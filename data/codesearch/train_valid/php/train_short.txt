0<CODESPLIT>https://github.com/antaresproject/core/blob/b6d088d9f8a0642e71e8ff7a93997f1f34bc5ca2/src/ui/components/datatables/src/Adapter/FilterAdapter.php#L124-L147<CODESPLIT>FilterAdapter.getFilters<CODESPLIT>creates removable sidebar filter items<CODESPLIT>public function getFilters ( $ view = null ) { if ( ! $ this -> filters ) { return false ; } $ this -> filters = array_unique ( $ this -> filters ) ; //$this->filters = array_unique($this->filters); $ renderable = false ; foreach ( $ this -> filters as $ filter ) { if ( $ filter -> renderable ) { $ renderable = true ; break ; } } if ( ! $ renderable ) { return false ; } $ this -> attachScripts ( ) ; return view ( ( $ view ) ? $ view : 'datatables-helpers::filters' , [ 'filters' => $ this -> filters , 'selected' => $ this -> selected , 'route' => $ this -> route , 'urls' => [ 'store' => handles ( 'antares/foundation::datatables/filters/store' ) , 'destroy' => handles ( 'antares/foundation::datatables/filters/destroy' ) , 'update' => handles ( 'antares/foundation::datatables/filters/update' ) , ] , 'group' => 'Groups' ] ) -> render ( ) ; }

1<CODESPLIT>https://github.com/fluxbb/core/blob/9085669c175a4d331a2cd2af85ccbd941f5b5b59/src/Core/FilesystemServiceProvider.php#L18-L30<CODESPLIT>FilesystemServiceProvider.register<CODESPLIT>Register the service provider .<CODESPLIT>public function register ( ) { $ this -> app -> singleton ( 'files' , function ( ) { return new Filesystem ( ) ; } ) ; $ this -> app -> singleton ( 'filesystem' , function ( ) { $ flysystem = new Flysystem ( new LocalAdapter ( $ this -> app -> make ( 'path' ) ) ) ; return new FilesystemAdapter ( $ flysystem ) ; } ) ; $ this -> app -> alias ( 'filesystem' , 'Illuminate\Contracts\Filesystem\Filesystem' ) ; }

0<CODESPLIT>https://github.com/OXID-eSales/oxideshop_ce/blob/acd72f4a7c5c7340d70b191e081e4a24b74887cc/source/Application/Controller/Admin/CategoryMain.php#L138-L168<CODESPLIT>CategoryMain.getSortableFields<CODESPLIT>Saves article category data .<CODESPLIT>public function getSortableFields ( ) { $ aSkipFields = [ "OXID" , "OXSHOPID" , "OXMAPID" , "OXPARENTID" , "OXACTIVE" , "OXACTIVEFROM" , "OXACTIVETO" , "OXSHORTDESC" , "OXUNITNAME" , "OXUNITQUANTITY" , "OXEXTURL" , "OXURLDESC" , "OXURLIMG" , "OXVAT" , "OXTHUMB" , "OXPIC1" , "OXPIC2" , "OXPIC3" , "OXPIC4" , "OXPIC5" , "OXPIC6" , "OXPIC7" , "OXPIC8" , "OXPIC9" , "OXPIC10" , "OXPIC11" , "OXPIC12" , "OXSTOCKFLAG" , "OXSTOCKTEXT" , "OXNOSTOCKTEXT" , "OXDELIVERY" , "OXFILE" , "OXSEARCHKEYS" , "OXTEMPLATE" , "OXQUESTIONEMAIL" , "OXISSEARCH" , "OXISCONFIGURABLE" , "OXBUNDLEID" , "OXFOLDER" , "OXSUBCLASS" , "OXREMINDACTIVE" , "OXREMINDAMOUNT" , "OXVENDORID" , "OXMANUFACTURERID" , "OXSKIPDISCOUNTS" , "OXBLFIXEDPRICE" , "OXICON" , "OXVARSELECT" , "OXAMITEMID" , "OXAMTASKID" , "OXPIXIEXPORT" , "OXPIXIEXPORTED" , "OXSORT" , "OXUPDATEPRICE" , "OXUPDATEPRICEA" , "OXUPDATEPRICEB" , "OXUPDATEPRICEC" , "OXUPDATEPRICETIME" , "OXISDOWNLOADABLE" , "OXVARMAXPRICE" , "OXSHOWCUSTOMAGREEMENT" ] ; /** @var \OxidEsales\Eshop\Core\DbMetaDataHandler $oDbHandler */ $ oDbHandler = oxNew ( \ OxidEsales \ Eshop \ Core \ DbMetaDataHandler :: class ) ; $ aFields = array_merge ( $ oDbHandler -> getMultilangFields ( 'oxarticles' ) , array_keys ( $ oDbHandler -> getSinglelangFields ( 'oxarticles' , 0 ) ) ) ; $ aFields = array_diff ( $ aFields , $ aSkipFields ) ; $ aFields = array_unique ( $ aFields ) ; return $ aFields ; }

0<CODESPLIT>https://github.com/jagilpe/ajax-blocks-bundle/blob/b41b45a84dc3fbcf291eba39388c65cb867411e8/EventListener/AjaxBlockControllerEventListener.php#L30-L55<CODESPLIT>modelMetaAttributeTrait.setMeta<CODESPLIT>Loads in the request the parameters that the controller should receive as query parameters<CODESPLIT>public function setMeta ( $ name , $ value ) { $ meta = $ this -> meta ; $ meta = array_set ( $ meta , $ name , $ value ) ; $ this -> meta = json_encode ( $ meta ) ; $ this -> save ( ) ; return $ this -> meta ; }

0<CODESPLIT>https://github.com/twinh/wei/blob/06cb65a1d638e5b3f23e45115a265a2becf04f4c/lib/Validator/BaseValidator.php#L272-L289<CODESPLIT>BaseValidator.reset<CODESPLIT>Set property value<CODESPLIT>protected function reset ( ) { $ this -> errors = array ( ) ; if ( count ( $ this -> store ) >= 2 ) { $ last = end ( $ this -> store ) ; foreach ( $ this -> backup as $ name => $ value ) { if ( ! array_key_exists ( $ name , $ last ) ) { $ this -> $ name = $ value ; } } array_shift ( $ this -> store ) ; } $ this -> store [ ] = array ( ) ; }

1<CODESPLIT>https://github.com/nails/module-cdn/blob/1c2ff1cbdf2aa6a7162f92c8fdbcde87c506e1ef/src/Service/Cdn.php#L2701-L2712<CODESPLIT>Cdn.urlPlaceholder<CODESPLIT>Calls the driver s public urlPlaceholder method<CODESPLIT>public function urlPlaceholder ( $ iWidth = 100 , $ iHeight = 100 , $ border = 0 ) { if ( ! $ this -> isPermittedDimension ( $ iWidth , $ iHeight ) ) { throw new PermittedDimensionException ( 'CDN::urlPlaceholder() - Transformation of image to ' . $ iWidth . 'x' . $ iHeight . ' is not permitted' ) ; } // -------------------------------------------------------------------------- return $ this -> callDriver ( 'urlPlaceholder' , [ $ iWidth , $ iHeight , $ border ] ) ; }

0<CODESPLIT>https://github.com/timegridio/concierge/blob/f5495dab5907ba9df3210af843fceaa8c8d009d6/src/Models/Vacancy.php#L266-L275<CODESPLIT>Vacancy.getCapacityAttribute<CODESPLIT>has Room between time .<CODESPLIT>public function getCapacityAttribute ( ) { if ( $ this -> humanresource ) { return intval ( $ this -> humanresource -> capacity ) ; } return intval ( $ this -> attributes [ 'capacity' ] ) ; }

1<CODESPLIT>https://github.com/eclipxe13/engineworks-dbal/blob/f142ee32e15d7a551cee05fdea785633985dcf0c/src/Recordset.php#L432-L444<CODESPLIT>Recordset.sqlDelete<CODESPLIT>Create the sql statement for DELETE<CODESPLIT>protected function sqlDelete ( string $ extraWhereClause ) : string { // get the conditions to alter the current record $ conditions = $ this -> sqlWhereConditions ( $ extraWhereClause ) ; // if no conditions then log error and return false if ( ! count ( $ conditions ) ) { throw new \ LogicException ( 'Recordset: The current record does not have any conditions to delete' ) ; } return 'DELETE' . ' FROM ' . $ this -> dbal -> sqlTableEscape ( $ this -> entity ) . ' WHERE ' . implode ( ' AND ' , $ conditions ) . ';' ; }

1<CODESPLIT>https://github.com/silverstripe/silverstripe-framework/blob/ed7aaff7da61eefa172fe213ec25e35d2568bc20/src/ORM/DatabaseAdmin.php#L128-L152<CODESPLIT>DatabaseAdmin.build<CODESPLIT>Updates the database schema creating tables & fields as necessary .<CODESPLIT>public function build ( ) { // The default time limit of 30 seconds is normally not enough Environment :: increaseTimeLimitTo ( 600 ) ; // If this code is being run outside of a dev/build or without a ?flush query string param, // the class manifest hasn't been flushed, so do it here $ request = $ this -> getRequest ( ) ; if ( ! array_key_exists ( 'flush' , $ request -> getVars ( ) ) && strpos ( $ request -> getURL ( ) , 'dev/build' ) !== 0 ) { ClassLoader :: inst ( ) -> getManifest ( ) -> regenerate ( false ) ; } $ url = $ this -> getReturnURL ( ) ; if ( $ url ) { echo "<p>Setting up the database; you will be returned to your site shortly....</p>" ; $ this -> doBuild ( true ) ; echo "<p>Done!</p>" ; $ this -> redirect ( $ url ) ; } else { $ quiet = $ this -> request -> requestVar ( 'quiet' ) !== null ; $ fromInstaller = $ this -> request -> requestVar ( 'from_installer' ) !== null ; $ populate = $ this -> request -> requestVar ( 'dont_populate' ) === null ; $ this -> doBuild ( $ quiet || $ fromInstaller , $ populate ) ; } }

0<CODESPLIT>https://github.com/eloquent/schemer/blob/951fb321d1f50f5d2e905620fbe3b4a6f816b4b3/src/Eloquent/Schemer/Validation/ConstraintValidator.php#L651-L662<CODESPLIT>ConstraintValidator.visitPatternConstraint<CODESPLIT>@param StringValue \ MinimumLengthConstraint $constraint<CODESPLIT>public function visitPatternConstraint ( StringValue \ PatternConstraint $ constraint ) { $ value = $ this -> currentValue ( ) ; if ( ! $ value instanceof Value \ StringValue || preg_match ( $ this -> wrapPattern ( $ constraint -> pattern ( ) ) , $ value -> value ( ) ) ) { return $ this -> createResult ( ) ; } return $ this -> createSingleIssueResult ( $ constraint ) ; }

0<CODESPLIT>https://github.com/interactivesolutions/honeycomb-acl/blob/6c73d7d1c5d17ef730593e03386236a746bab12c/src/app/http/controllers/HCUsersController.php#L110-L141<CODESPLIT>HCUsersController.getInputData<CODESPLIT>Updates existing item based on ID<CODESPLIT>protected function getInputData ( ) { $ _data = request ( ) -> all ( ) ; array_set ( $ data , 'record.email' , array_get ( $ _data , 'email' ) ) ; array_set ( $ data , 'record.password' , array_get ( $ _data , 'password' ) ) ; array_set ( $ data , 'new_password' , array_get ( $ _data , 'new_password' ) ) ; array_set ( $ data , 'old_password' , array_get ( $ _data , 'old_password' ) ) ; array_set ( $ data , 'roles' , array_get ( $ _data , 'roles' , [ ] ) ) ; return $ data ; }

0<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/mod/url/classes/external.php#L181-L209<CODESPLIT>delete_incomplete_users_task.execute<CODESPLIT>Describes the get_urls_by_courses return value .<CODESPLIT>public function execute ( ) { global $ CFG , $ DB ; $ timenow = time ( ) ; // Delete users who haven't completed profile within required period. if ( ! empty ( $ CFG -> deleteincompleteusers ) ) { $ cuttime = $ timenow - ( $ CFG -> deleteincompleteusers * 3600 ) ; $ rs = $ DB -> get_recordset_sql ( "SELECT *                                                FROM {user}                                            WHERE confirmed = 1 AND lastaccess > 0                                                AND lastaccess < ? AND deleted = 0                                                AND (lastname = '' OR firstname = '' OR email = '')" , array ( $ cuttime ) ) ; foreach ( $ rs as $ user ) { if ( isguestuser ( $ user ) or is_siteadmin ( $ user ) ) { continue ; } if ( $ user -> lastname !== '' and $ user -> firstname !== '' and $ user -> email !== '' ) { // This can happen on MySQL - see MDL-52831. continue ; } delete_user ( $ user ) ; mtrace ( " Deleted not fully setup user $user->username ($user->id)" ) ; } $ rs -> close ( ) ; } }

0<CODESPLIT>https://github.com/masando/eDemyMainBundle/blob/cd9058e58d3a5ab06824f7ebc217a32c42f56a23/Controller/MainController.php#L163-L178<CODESPLIT>MainController.indexAction<CODESPLIT>Este listener calcula lastmodified de la ruta edemy_main_frontpage Para ello calcula el lastmodified de la ruta que se muestra en frontpage ( si existe ) o toma el de $event si no existe ( que por ahora es null )<CODESPLIT>public function indexAction ( $ _format = 'html' ) { $ event = new ContentEvent ( $ this -> getRouteWithoutNamespace ( ) ) ; $ event -> setFormat ( $ _format ) ; $ this -> dump ( $ event -> getRoute ( ) ) ; $ this -> start ( 'lastmodified' ) ; $ lastmodified = $ this -> getLastModified ( $ event -> getRoute ( ) , $ event -> getFormat ( ) ) ; if ( $ this -> getParameter ( 'timing' ) ) var_dump ( 'lastmodified: ' . $ this -> stop ( 'lastmodified' ) -> getDuration ( ) ) ; if ( $ lastmodified ) { //            if ($this->get('security.authorization_checker')->isGranted('ROLE_USER')) { //                $response->setPrivate(); //            } else { //                $response->setPublic(); //            } $ referer = $ this -> getRequest ( ) -> headers -> get ( 'referer' ) ; $ Pattern = "/logout$/" ; if ( preg_match ( $ Pattern , $ referer , $ matches ) ) { $ lastmodified = new \ DateTime ( ) ; } $ lastmodified = new \ DateTime ( ) ; $ event -> setLastModified ( $ lastmodified ) ; $ this -> dump ( $ lastmodified ) ; if ( $ response = $ this -> ifNotModified304 ( $ lastmodified ) ) { //                $response->headers->addCacheControlDirective( 'no-cache', true ); //                $response->headers->addCacheControlDirective( 'max-age', 0 ); //                $response->headers->addCacheControlDirective( 'must-revalidate', true ); //                $response->headers->addCacheControlDirective( 'no-store', true ); //                $response->setPrivate(); return $ response ; } } $ this -> start ( 'getContent' ) ; if ( $ content = $ this -> getContent ( $ event -> getRoute ( ) ) ) { $ event -> setContent ( $ content ) ; } if ( $ this -> getParameter ( 'timing' ) ) var_dump ( 'getContent: ' . $ this -> stop ( 'getContent' ) -> getDuration ( ) ) ; //die(var_dump($content)); if ( gettype ( $ content ) == 'object' ) { if ( get_class ( $ content ) == 'Symfony\Component\HttpFoundation\RedirectResponse' ) { return $ content ; } if ( get_class ( $ content ) == 'Symfony\Component\HttpFoundation\Response' ) { return $ content ; } } //die($event->getContent()); // @TODO comprobar stopPropagation if ( $ response = $ this -> isPropagationStopped ( $ event ) ) { return $ response ; } $ this -> start ( 'getFullResponse' ) ; if ( $ response = $ this -> getFullResponse ( $ event ) ) { $ this -> get ( 'session' ) -> set ( 'out' , '0' ) ; if ( $ this -> getParameter ( 'timing' ) ) { var_dump ( 'getFullResponse: ' . $ this -> stop ( 'getFullResponse' ) -> getDuration ( ) ) ; die ( ) ; } return $ response ; } return null ; }

0<CODESPLIT>https://github.com/nattreid/cms/blob/28eae564c6a8cdaf01d32ff5a1dffba58232f9c1/src/Control/presenters/SignPresenter.php#L325-L347<CODESPLIT>Message.create<CODESPLIT>Zpracovani formulare pro prvniho uzivatele<CODESPLIT>public function create ( MessageCreateEvent $ event , $ eventName , EventDispatcherInterface $ dispatcher ) { $ message = new MessageModel ( ) ; $ message -> setDispatcher ( $ dispatcher ) -> setName ( $ event -> getMessageName ( ) ) -> setLocale ( $ event -> getLocale ( ) ) -> setTitle ( $ event -> getTitle ( ) ) -> setSecured ( $ event -> getSecured ( ) ) -> save ( ) ; $ event -> setMessage ( $ message ) ; }

0<CODESPLIT>https://github.com/aferrandini/PHPQRCode/blob/919a6a0e3b29cb103ed9982eeeb5d3a4741c6a0c/lib/PHPQRCode/QRimage.php#L30-L48<CODESPLIT>QRimage.jpg<CODESPLIT>----------------------------------------------------------------------<CODESPLIT>public static function jpg ( $ frame , $ filename = false , $ pixelPerPoint = 8 , $ outerFrame = 4 , $ q = 85 ) { $ image = self :: image ( $ frame , $ pixelPerPoint , $ outerFrame ) ; if ( $ filename === false ) { Header ( "Content-type: image/jpeg" ) ; ImageJpeg ( $ image , null , $ q ) ; } else { ImageJpeg ( $ image , $ filename , $ q ) ; } ImageDestroy ( $ image ) ; }

1<CODESPLIT>https://github.com/xuzhenjun130/X-framework/blob/07b91c572d7fff79c46e9fb45389f03a6d53725f/Controller.php#L34-L46<CODESPLIT>Controller.render<CODESPLIT>渲染视图<CODESPLIT>public function render ( $ fileName , $ data = [ ] ) { $ content = $ this -> renderParticle ( $ fileName , $ data ) ; if ( $ this -> layout ) { ob_start ( ) ; ob_implicit_flush ( false ) ; $ layout = $ this -> getLayoutPath ( ) ; require $ layout ; return ob_get_clean ( ) ; } else { return $ content ; } }

0<CODESPLIT>https://github.com/deanblackborough/random-grab-bag/blob/b72814a80357d5dbd344b99c3d242678c8cf080f/src/ImageResize/AbstractResize.php#L168-L184<CODESPLIT>AbstractResize.sourceProperties<CODESPLIT>Load the image<CODESPLIT>protected function sourceProperties ( ) { $ properties = Helper :: imageProperties ( $ this -> source [ 'file' ] , $ this -> source [ 'path' ] ) ; if ( $ properties [ 'width' ] !== null ) { $ this -> source [ 'width' ] = $ properties [ 'width' ] ; $ this -> source [ 'height' ] = $ properties [ 'height' ] ; $ this -> source [ 'aspect_ratio' ] = $ properties [ 'aspect_ratio' ] ; } else { throw new \ Exception ( Helper :: ERROR_CALL_GETIMAGESIZE ) ; } if ( $ this -> canvas [ 'width' ] > $ this -> source [ 'width' ] || $ this -> canvas [ 'height' ] > $ this -> source [ 'height' ] ) { throw new \ Exception ( Helper :: ERROR_UPSCALE ) ; } }

0<CODESPLIT>https://github.com/rollerworks-graveyard/RollerworksMultiUserBundle/blob/6dda7b554d5bcc9637896ba3cd190a8e13782037/src/DependencyInjection/Configuration.php#L279-L337<CODESPLIT>AttributeFactory.create<CODESPLIT>Its only marked public for call_user_func () in addUserConfig ()<CODESPLIT>public static function create ( $ attribute , $ value ) { $ attributesType = self :: getAllAttributeType ( ) ; foreach ( $ attributesType as $ attributeType ) { if ( $ attributeType -> isMember ( $ attribute ) ) { return $ attributeType -> create ( $ value ) ; } } return $ value ; }

0<CODESPLIT>https://github.com/fisharebest/webtrees/blob/840bd0d721dc479520ec24a065996bc6becb8348/app/GedcomTag.php#L2347-L2405<CODESPLIT>GedcomTag.getPicklistFacts<CODESPLIT>Translate the value for 1 FILE / 2 FORM / 3 TYPE<CODESPLIT>public static function getPicklistFacts ( $ fact_type ) : array { switch ( $ fact_type ) { case 'INDI' : $ tags = [ // Facts, attributes for individuals (no links to FAMs) 'RESN' , 'NAME' , 'SEX' , 'BIRT' , 'CHR' , 'DEAT' , 'BURI' , 'CREM' , 'ADOP' , 'BAPM' , 'BARM' , 'BASM' , 'BLES' , 'CHRA' , 'CONF' , 'FCOM' , 'ORDN' , 'NATU' , 'EMIG' , 'IMMI' , 'CENS' , 'PROB' , 'WILL' , 'GRAD' , 'RETI' , 'EVEN' , 'CAST' , 'DSCR' , 'EDUC' , 'IDNO' , 'NATI' , 'NCHI' , 'NMR' , 'OCCU' , 'PROP' , 'RELI' , 'RESI' , 'SSN' , 'TITL' , 'FACT' , 'BAPL' , 'CONL' , 'ENDL' , 'SLGC' , 'SUBM' , 'ASSO' , 'ALIA' , 'ANCI' , 'DESI' , 'RFN' , 'AFN' , 'REFN' , 'RIN' , 'CHAN' , 'NOTE' , 'SHARED_NOTE' , 'SOUR' , 'OBJE' , // non standard tags '_BRTM' , '_DEG' , '_DNA' , '_EYEC' , '_FNRL' , '_HAIR' , '_HEIG' , '_HNM' , '_HOL' , '_INTE' , '_MDCL' , '_MEDC' , '_MILI' , '_MILT' , '_NAME' , '_NAMS' , '_NLIV' , '_NMAR' , '_PRMN' , '_TODO' , '_UID' , '_WEIG' , '_YART' , ] ; break ; case 'FAM' : $ tags = [ // Facts for families, left out HUSB, WIFE & CHIL links 'RESN' , 'ANUL' , 'CENS' , 'DIV' , 'DIVF' , 'ENGA' , 'MARB' , 'MARC' , 'MARR' , 'MARL' , 'MARS' , 'RESI' , 'EVEN' , 'NCHI' , 'SUBM' , 'SLGS' , 'REFN' , 'RIN' , 'CHAN' , 'NOTE' , 'SHARED_NOTE' , 'SOUR' , 'OBJE' , // non standard tags '_NMR' , 'MARR_CIVIL' , 'MARR_RELIGIOUS' , 'MARR_PARTNERS' , 'MARR_UNKNOWN' , '_COML' , '_MBON' , '_MARI' , '_SEPR' , '_TODO' , ] ; break ; case 'SOUR' : $ tags = [ // Facts for sources 'DATA' , 'AUTH' , 'TITL' , 'ABBR' , 'PUBL' , 'TEXT' , 'REPO' , 'REFN' , 'RIN' , 'CHAN' , 'NOTE' , 'SHARED_NOTE' , 'OBJE' , 'RESN' , ] ; break ; case 'REPO' : $ tags = [ // Facts for repositories 'NAME' , 'ADDR' , 'PHON' , 'EMAIL' , 'FAX' , 'WWW' , 'NOTE' , 'SHARED_NOTE' , 'REFN' , 'RIN' , 'CHAN' , 'RESN' , ] ; break ; case 'PLAC' : $ tags = [ // Facts for places 'FONE' , 'ROMN' , // non standard tags '_HEB' , ] ; break ; case 'NAME' : $ tags = [ // Facts subordinate to NAME 'FONE' , 'ROMN' , // non standard tags '_HEB' , '_AKA' , '_MARNM' , ] ; break ; default : $ tags = [ ] ; break ; } $ facts = [ ] ; foreach ( $ tags as $ tag ) { $ facts [ $ tag ] = self :: getLabel ( $ tag , null ) ; } uasort ( $ facts , '\Fisharebest\Webtrees\I18N::strcasecmp' ) ; return $ facts ; }

1<CODESPLIT>https://github.com/mhlavac/gearman/blob/89185314631d10dfc9b191209a3c2ede353b2d2b/src/Connection.php#L142-L180<CODESPLIT>Connection.connect<CODESPLIT>Connect to Gearman .<CODESPLIT>public static function connect ( $ host = 'localhost' , $ timeout = 2000 ) { if ( ! count ( self :: $ magic ) ) { foreach ( self :: $ commands as $ cmd => $ i ) { self :: $ magic [ $ i [ 0 ] ] = array ( $ cmd , $ i [ 1 ] ) ; } } $ err = '' ; $ errno = 0 ; $ port = self :: DEFAULT_PORT ; if ( strpos ( $ host , ':' ) ) { list ( $ host , $ port ) = explode ( ':' , $ host ) ; } $ start = microtime ( true ) ; do { $ socket = socket_create ( AF_INET , SOCK_STREAM , SOL_TCP ) ; $ socket_connected = @ socket_connect ( $ socket , $ host , $ port ) ; if ( $ socket_connected ) { socket_set_nonblock ( $ socket ) ; socket_set_option ( $ socket , SOL_TCP , 1 , 1 ) ; } $ timeLeft = ( ( microtime ( true ) - $ start ) * 1000 ) ; } while ( ! $ socket_connected && $ timeLeft < $ timeout ) ; if ( ! $ socket_connected ) { $ errno = socket_last_error ( $ socket ) ; $ errstr = socket_strerror ( $ errno ) ; throw new CouldNotConnectException ( "Can't connect to server ($errno: $errstr)" ) ; } self :: $ waiting [ ( int ) $ socket ] = array ( ) ; return $ socket ; }

0<CODESPLIT>https://github.com/php-mvc-project/php-mvc/blob/2523373c1cd3d77da73126a7ed60311b6e251d3a/src/AppBuilder.php#L430-L516<CODESPLIT>AppBuilder.canRoute<CODESPLIT>Initializes the ActionContext associated with the current request and route .<CODESPLIT>private static function canRoute ( ) { $ httpContext = self :: $ config [ 'httpContext' ] ; if ( $ httpContext -> isIgnoredRoute ( ) ) { $ request = $ httpContext -> getRequest ( ) ; $ response = $ httpContext -> getResponse ( ) ; $ response -> clear ( ) ; if ( ! file_exists ( $ request -> documentRoot ( ) . $ request -> path ( ) ) ) { $ response -> setStatusCode ( 404 ) ; } else { require ( $ request -> documentRoot ( ) . $ request -> path ( ) ) ; } $ response -> end ( ) ; return false ; } $ route = $ httpContext -> getRoute ( ) ; if ( $ route == null ) { $ response = $ httpContext -> getResponse ( ) ; $ response -> setStatusCode ( 404 ) ; $ response -> end ( ) ; return false ; } return $ route ; }

1<CODESPLIT>https://github.com/sirgrimorum/crudgenerator/blob/4431e9991a705689be50c4367776dc611bffb863/src/CrudGenerator.php#L41-L99<CODESPLIT>CrudGenerator.create<CODESPLIT>Generate create view for a model<CODESPLIT>public static function create ( $ config , $ simple = false ) { //$config = CrudGenerator::translateConfig($config);  if ( request ( ) -> has ( '_itemRelSel' ) ) { list ( $ itemsRelSelCampo , $ itemsRelSelId ) = explode ( "|" , request ( ) -> _itemRelSel ) ; foreach ( $ config [ 'campos' ] as $ clave => $ relacion ) { if ( $ clave != $ itemsRelSelCampo ) { unset ( $ config [ 'campos' ] [ $ clave ] ) ; } } } if ( ! CrudGenerator :: checkPermission ( $ config ) ) { return View :: make ( 'sirgrimorum::crudgen.error' , [ 'message' => trans ( 'crudgenerator::admin.messages.permission' ) ] ) ; } $ modelo = strtolower ( class_basename ( $ config [ "modelo" ] ) ) ; $ config = CrudGenerator :: loadTodosFromConfig ( $ config ) ; if ( ! $ simple ) { $ js_section = config ( "sirgrimorum.crudgenerator.js_section" ) ; $ css_section = config ( "sirgrimorum.crudgenerator.css_section" ) ; } else { $ js_section = "" ; $ css_section = "" ; } if ( $ config [ 'url' ] == "Sirgrimorum_CrudAdministrator" ) { $ config [ 'url' ] = route ( "sirgrimorum_modelo::store" , [ "modelo" => $ modelo ] ) ; if ( \ Lang :: has ( 'crudgenerator::' . $ modelo . '.labels.create' ) ) { $ config [ 'botones' ] = trans ( "crudgenerator::$modelo.labels.create" ) ; } else { $ config [ 'botones' ] = trans ( "crudgenerator::admin.layout.crear" ) ; } } if ( request ( ) -> has ( '_itemRelSel' ) ) { $ view = View :: make ( 'sirgrimorum::crudgen.templates.relationshipssel_simple' , [ 'config' => $ config , 'datoId' => $ itemsRelSelId , 'columna' => $ itemsRelSelCampo , 'tabla' => ( new $ config [ 'campos' ] [ $ itemsRelSelCampo ] [ 'modelo' ] ) -> getTable ( ) , 'datos' => $ config [ 'campos' ] [ $ itemsRelSelCampo ] , 'js_section' => $ js_section , 'css_section' => $ css_section , 'modelo' => $ modelo ] ) ; } else { $ view = View :: make ( 'sirgrimorum::crudgen.create' , [ 'config' => $ config , 'tieneHtml' => CrudGenerator :: hasTipo ( $ config , [ 'html' , 'article' ] ) , 'tieneDate' => CrudGenerator :: hasTipo ( $ config , [ 'date' , 'datetime' , 'time' ] ) , 'tieneSlider' => CrudGenerator :: hasTipo ( $ config , 'slider' ) , 'tieneSelect' => CrudGenerator :: hasTipo ( $ config , [ 'select' , 'relationship' , 'relationships' ] ) , 'tieneSearch' => CrudGenerator :: hasTipo ( $ config , [ 'relationshipssel' ] ) , 'tieneFile' => CrudGenerator :: hasTipo ( $ config , [ 'file' , 'files' ] ) , 'tieneJson' => CrudGenerator :: hasTipo ( $ config , [ 'json' ] ) , 'js_section' => $ js_section , 'css_section' => $ css_section , 'modelo' => $ modelo ] ) ; } return $ view -> render ( ) ; }

1<CODESPLIT>https://github.com/aferrandini/PHPQRCode/blob/919a6a0e3b29cb103ed9982eeeb5d3a4741c6a0c/lib/PHPQRCode/QRrsItem.php#L25-L33<CODESPLIT>QRrsItem.modnn<CODESPLIT>----------------------------------------------------------------------<CODESPLIT>public function modnn ( $ x ) { while ( $ x >= $ this -> nn ) { $ x -= $ this -> nn ; $ x = ( $ x >> $ this -> mm ) + ( $ x & $ this -> nn ) ; } return $ x ; }

0<CODESPLIT>https://github.com/libreworks/caridea-session/blob/cb2a7c0cdcd172edbf267e5c69b396708b425f47/src/FlashPlugin.php#L146-L154<CODESPLIT>FlashPlugin.onStart<CODESPLIT>Transitions the values from next to current .<CODESPLIT>public function onStart ( Session $ session ) : void { $ this -> curr = $ session -> getValues ( __CLASS__ . '\\CURR' ) ; $ this -> next = $ session -> getValues ( __CLASS__ . '\\NEXT' ) ; $ this -> cycle ( ) ; }

1<CODESPLIT>https://github.com/mmghv/lumen-route-binding/blob/c375be373dd0d5cda8d6b967b18ca8604519ae26/src/DingoServiceProvider.php#L16-L29<CODESPLIT>DingoServiceProvider.getDispatcherResolver<CODESPLIT>Get lumen - route - binding dispatcher resolver for dingo / api .<CODESPLIT>protected function getDispatcherResolver ( ) { return function ( $ routeCollector ) { // Get lumen-route-binding dispatcher from the container. $ dispatcher = $ this -> app [ 'dispatcher' ] ; // Set routes resolver from dingo router. $ dispatcher -> setRoutesResolver ( function ( ) use ( $ routeCollector ) { return $ routeCollector -> getData ( ) ; } ) ; return $ dispatcher ; } ; }

1<CODESPLIT>https://github.com/ssnepenthe/wp-requirements/blob/e805f4c0feb608ff3756c6aa84638217905603df/src/class-plugin-checker.php#L155-L175<CODESPLIT>Plugin_Checker.notify<CODESPLIT>Print an admin notice for each failed requirement .<CODESPLIT>public function notify ( ) { if ( $ this -> requirements_met ( ) ) { return ; } echo '<div class="notice notice-error">' ; foreach ( $ this -> requirements as $ requirement ) { if ( $ requirement -> is_met ( ) ) { continue ; } printf ( '<p>%s deactivated: %s</p>' , esc_html ( $ this -> name ) , esc_html ( $ requirement -> get_message ( ) ) ) ; } echo '</div>' ; }

1<CODESPLIT>https://github.com/rosasurfer/ministruts/blob/9d27f93dd53d2d626c75c92cfde9d004bab34d30/src/ministruts/ActionMapping.php#L191-L211<CODESPLIT>ActionMapping.setRoles<CODESPLIT>Set the mapping s role restrictions .<CODESPLIT>public function setRoles ( $ roles ) { if ( $ this -> configured ) throw new IllegalStateException ( 'Configuration is frozen' ) ; $ name = $ this -> name ? ' name="' . $ this -> name . '"' : '' ; $ path = $ this -> path ? ' path="' . $ this -> path . '"' : '' ; //static $pattern = '/^!?[A-Za-z_][A-Za-z0-9_]*(,!?[A-Za-z_][A-Za-z0-9_]*)*$/'; static $ pattern = '/^!?[A-Za-z_][A-Za-z0-9_]*$/' ; if ( ! strlen ( $ roles ) || ! preg_match ( $ pattern , $ roles ) ) throw new StrutsConfigException ( '<mapping' . $ name . $ path . ' roles="' . $ roles . '": Invalid roles expression.' ) ; // check for invalid id combinations, e.g. "Member,!Member" $ tokens = explode ( ',' , $ roles ) ; $ keys = \ array_flip ( $ tokens ) ; foreach ( $ tokens as $ role ) { if ( isset ( $ keys [ '!' . $ role ] ) ) throw new StrutsConfigException ( '<mapping' . $ name . $ path . ' roles="' . $ roles . '": Invalid roles expression.' ) ; } // remove duplicates $ this -> roles = join ( ',' , \ array_flip ( $ keys ) ) ; return $ this ; }

0<CODESPLIT>https://github.com/CeusMedia/Common/blob/1138adf9341782a6284c05884989f7497532bcf4/src/DB/PDO/Table.php#L314-L325<CODESPLIT>DB_PDO_Table.getByIndices<CODESPLIT>Returns data of first entry selected by index .<CODESPLIT>public function getByIndices ( $ indices , $ orders = array ( ) , $ fields = array ( ) , $ strict = FALSE ) { if ( is_string ( $ fields ) ) $ fields = strlen ( trim ( $ fields ) ) ? array ( trim ( $ fields ) ) : array ( ) ; if ( ! is_array ( $ fields ) ) throw new \ InvalidArgumentException ( 'Fields must be of array or string' ) ; foreach ( $ fields as $ field ) $ field = $ this -> checkField ( $ field , FALSE , TRUE ) ; $ this -> checkIndices ( $ indices , TRUE , TRUE ) ; foreach ( $ indices as $ key => $ value ) $ this -> table -> focusIndex ( $ key , $ value ) ; $ result = $ this -> table -> get ( TRUE , $ orders ) ; $ this -> table -> defocus ( ) ; return $ this -> getFieldsFromResult ( $ result , $ fields , $ strict ) ; }

0<CODESPLIT>https://github.com/anahitasocial/anahita/blob/957709c6644ca71ea7b5fd11bcbc1bb475fc76b3/src/components/com_application/templates/helpers/less.php#L24-L91<CODESPLIT>ComHashtagsFilterHashtag._sanitize<CODESPLIT>Compiles a less css file . The the compiler will create a css file output .<CODESPLIT>protected function _sanitize ( $ value ) { $ value = trim ( $ value ) ; $ pattern = ComHashtagsDomainEntityHashtag :: PATTERN_HASHTAG ; return preg_replace_callback ( $ pattern , function ( $ matches ) { return '' ; } , $ value ) ; }

1<CODESPLIT>https://github.com/Sylius/Sylius/blob/8b26d4188fa81bb488612f59d2418b9472be1c79/src/Sylius/Bundle/PromotionBundle/Form/Type/Core/AbstractConfigurationCollectionType.php#L59-L67<CODESPLIT>AbstractConfigurationCollectionType.buildView<CODESPLIT>{<CODESPLIT>public function buildView ( FormView $ view , FormInterface $ form , array $ options ) : void { $ view -> vars [ 'prototypes' ] = [ ] ; foreach ( $ form -> getConfig ( ) -> getAttribute ( 'prototypes' ) as $ type => $ prototype ) { /** @var FormInterface $prototype */ $ view -> vars [ 'prototypes' ] [ $ type ] = $ prototype -> createView ( $ view ) ; } }

1<CODESPLIT>https://github.com/terion-name/package-installer/blob/a1f53085b0b5dbbcc308476f61188103051bd201/src/Terion/PackageInstaller/ConfigUpdater.php#L288-L298<CODESPLIT>ConfigUpdater.write<CODESPLIT>Write new data to config file for selected config item ( providers aliases ) .<CODESPLIT>protected function write ( $ text , $ anchor ) { $ this -> backup ( ) ; $ file = $ this -> getFileContents ( ) ; if ( $ anchor [ 'symbol' ] === ',' ) { $ text = ltrim ( $ text , ',' ) ; } $ file = substr_replace ( $ file , $ text , $ anchor [ 'position' ] , 0 ) ; $ this -> file -> put ( $ this -> configFile , $ file ) ; $ this -> cleanup ( ) ; }

0<CODESPLIT>https://github.com/OXID-eSales/oxideshop_ce/blob/acd72f4a7c5c7340d70b191e081e4a24b74887cc/source/Application/Controller/OrderController.php#L300-L310<CODESPLIT>OrderController.getBasket<CODESPLIT>Template variable getter . Returns user remark<CODESPLIT>public function getBasket ( ) { if ( $ this -> _oBasket === null ) { $ this -> _oBasket = false ; if ( $ oBasket = $ this -> getSession ( ) -> getBasket ( ) ) { $ this -> _oBasket = $ oBasket ; } } return $ this -> _oBasket ; }

1<CODESPLIT>https://github.com/consigliere/components/blob/9b08bb111f0b55b0a860ed9c3407eda0d9cc1252/src/Publishing/AssetPublisher.php#L19-L26<CODESPLIT>AssetPublisher.getDestinationPath<CODESPLIT>Get destination path .<CODESPLIT>public function getDestinationPath ( ) { if ( $ this -> repository -> config ( 'merge.published-assets' ) ) { return $ this -> repository -> assetPath ( '' ) ; } return $ this -> repository -> assetPath ( $ this -> component -> getLowerName ( ) ) ; }

1<CODESPLIT>https://github.com/ezsystems/ezpublish-kernel/blob/ef2ae730a46e9718ebd80f1047c0f8b866209ce9/eZ/Publish/Core/Persistence/Cache/ObjectStateHandler.php#L241-L249<CODESPLIT>ObjectStateHandler.setContentState<CODESPLIT>{<CODESPLIT>public function setContentState ( $ contentId , $ groupId , $ stateId ) { $ this -> logger -> logCall ( __METHOD__ , array ( 'contentId' => $ contentId , 'groupId' => $ groupId , 'stateId' => $ stateId ) ) ; $ return = $ this -> persistenceHandler -> objectStateHandler ( ) -> setContentState ( $ contentId , $ groupId , $ stateId ) ; $ this -> cache -> deleteItem ( 'ez-state-by-group-' . $ groupId . '-on-content-' . $ contentId ) ; return $ return ; }

0<CODESPLIT>https://github.com/webriq/core/blob/cfeb6e8a4732561c2215ec94e736c07f9b8bc990/module/Paragraph/src/Grid/Paragraph/Model/ContentUri/Paragraph.php#L35-L44<CODESPLIT>Paragraph.getFallbackUri<CODESPLIT>Get cached site - info<CODESPLIT>protected function getFallbackUri ( $ paragraphId , $ absolute = false ) { $ uri = '/app/' . $ this -> locale . '/paragraph/render/' . $ paragraphId ; if ( $ absolute ) { $ uri = $ this -> getSiteInfo ( ) -> getSubdomainUrl ( null , $ uri ) ; } return $ uri ; }

0<CODESPLIT>https://github.com/BitbucketAPI/Client/blob/7255922d3c34499392a689a7e120785e4aa8c301/src/Api/Repositories/Users/PullRequests/Patch.php#L46-L49<CODESPLIT>Linkers.show<CODESPLIT>Build the patch path from the given parts .<CODESPLIT>public function show ( string $ linker , array $ params = [ ] ) { $ path = $ this -> buildLinkersPath ( $ linker ) ; return $ this -> get ( $ path , $ params ) ; }

1<CODESPLIT>https://github.com/nicolasdewez/webhome-common/blob/a9f6f83fa929ebd0510818c388cfb1ed44b87205/Menu/GetterAuthorizationsSession.php#L27-L44<CODESPLIT>GetterAuthorizationsSession.get<CODESPLIT>{<CODESPLIT>public function get ( ) { $ token = $ this -> tokenStorage -> getToken ( ) ; if ( null === $ token || ! is_object ( $ token -> getUser ( ) ) ) { return [ ] ; } $ authorizations = [ ] ; foreach ( $ token -> getUser ( ) -> getRoles ( ) as $ authorization ) { $ auth = new Authorization ( ) ; $ auth -> setCodeAction ( $ authorization ) ; $ auth -> setGranted ( true ) ; $ authorizations [ ] = $ auth ; } return $ authorizations ; }

1<CODESPLIT>https://github.com/php-poppler/php-poppler/blob/033427289ec4f1ff00656a0e02410a84c529ace4/Processor/PdfFile.php#L82-L91<CODESPLIT>PdfFile.toHtml<CODESPLIT>@param string $inputfile @param string $outputfile<CODESPLIT>public function toHtml ( $ inputfile , $ outputfile ) { if ( ! file_exists ( $ inputfile ) ) { throw new FileNotFoundException ( "File $inputfile not found." ) ; } $ output = $ this -> pdftohtml -> command ( array ( $ inputfile , $ outputfile ) ) ; return $ output ; }

1<CODESPLIT>https://github.com/symfony/symfony/blob/b82b09eefb084e487997f4af753400d721edd0a8/src/Symfony/Component/Security/Guard/Authenticator/AbstractFormLoginAuthenticator.php#L61-L66<CODESPLIT>AbstractFormLoginAuthenticator.start<CODESPLIT>Override to control what happens when the user hits a secure page but isn t logged in yet .<CODESPLIT>public function start ( Request $ request , AuthenticationException $ authException = null ) { $ url = $ this -> getLoginUrl ( ) ; return new RedirectResponse ( $ url ) ; }

1<CODESPLIT>https://github.com/jooorooo/embed/blob/078e70a093f246dc8e10b92f909f9166932c4106/src/Providers/TwitterCards.php#L79-L84<CODESPLIT>TwitterCards.getCode<CODESPLIT>{<CODESPLIT>public function getCode ( ) { if ( $ this -> bag -> has ( 'player' ) ) { return Utils :: iframe ( $ this -> bag -> get ( 'player' ) , $ this -> getWidth ( ) , $ this -> getHeight ( ) ) ; } }

0<CODESPLIT>https://github.com/joskolenberg/jory/blob/553064d999e38454e223762c65ebbea4b1d21c15/src/Parsers/ArrayValidator.php#L117-L184<CODESPLIT>ArrayValidator.validateRelations<CODESPLIT>Validate a single filter Throws a JoryException on failure .<CODESPLIT>protected function validateRelations ( ) : void { $ relations = $ this -> getArrayValue ( $ this -> joryArray , [ 'rlt' , 'relations' ] ) ; // No relations set, that's ok. return. if ( ! $ relations ) { return ; } if ( ! is_array ( $ relations ) ) { throw new JoryException ( 'The relation parameter should be an array. (Location: ' . $ this -> address . 'relations)' ) ; } foreach ( $ relations as $ name => $ jory ) { $ this -> validateRelation ( $ name , $ jory ) ; } }

0<CODESPLIT>https://github.com/woocommerce/wc-api-php/blob/a71aa95cc3de3f1d68c6303525d03c0557a96137/src/WooCommerce/HttpClient/OAuth.php#L147-L158<CODESPLIT>OAuth.generateOauthSignature<CODESPLIT>Process filters .<CODESPLIT>protected function generateOauthSignature ( $ parameters ) { $ baseRequestUri = \ rawurlencode ( $ this -> url ) ; // Extract filters. $ parameters = $ this -> processFilters ( $ parameters ) ; // Normalize parameter key/values and sort them. $ parameters = $ this -> normalizeParameters ( $ parameters ) ; \ uksort ( $ parameters , 'strcmp' ) ; // Set query string. $ queryString = \ implode ( '%26' , $ this -> joinWithEqualsSign ( $ parameters ) ) ; // Join with ampersand. $ stringToSign = $ this -> method . '&' . $ baseRequestUri . '&' . $ queryString ; $ secret = $ this -> getSecret ( ) ; return \ base64_encode ( \ hash_hmac ( self :: HASH_ALGORITHM , $ stringToSign , $ secret , true ) ) ; }

0<CODESPLIT>https://github.com/vspvt/kohana-helpers/blob/891c8f4e4efa09c97230162a2842d8ebf3105932/classes/Kohana/Helpers/Request.php#L127-L136<CODESPLIT>Kohana_Helpers_Request.isMethodParseBody<CODESPLIT>@param string $key @param null $default @param null $castType @param bool $nullable<CODESPLIT>public static function isMethodParseBody ( $ methodName = NULL , $ methodsList = NULL ) { NULL !== $ methodName or $ methodName = static :: method ( FALSE ) ; is_array ( $ methodsList ) or $ methodsList = static :: getMethodsParseBody ( ) ; return Kohana_Helpers_Arr :: inArray ( $ methodName , $ methodsList ) ; }

1<CODESPLIT>https://github.com/Smile-SA/elasticsuite/blob/0199ac1383c8db3b996ae3a0963e94edadaf0880/src/module-elasticsuite-core/Search/Request/SortOrder/SortOrderBuilder.php#L118-L140<CODESPLIT>SortOrderBuilder.addDefaultSortOrders<CODESPLIT>Append default sort to all queries to get fully predictable search results .<CODESPLIT>private function addDefaultSortOrders ( $ orders , MappingInterface $ mapping ) { $ defaultOrders = [ SortOrderInterface :: DEFAULT_SORT_FIELD => SortOrderInterface :: SORT_DESC , $ mapping -> getIdField ( ) -> getName ( ) => SortOrderInterface :: SORT_DESC , ] ; if ( count ( $ orders ) > 0 ) { $ firstOrder = current ( $ orders ) ; if ( $ firstOrder [ 'direction' ] == SortOrderInterface :: SORT_DESC ) { $ defaultOrders [ SortOrderInterface :: DEFAULT_SORT_FIELD ] = SortOrderInterface :: SORT_ASC ; $ defaultOrders [ $ mapping -> getIdField ( ) -> getName ( ) ] = SortOrderInterface :: SORT_ASC ; } } foreach ( $ defaultOrders as $ currentOrder => $ direction ) { if ( ! in_array ( $ currentOrder , array_keys ( $ orders ) ) ) { $ orders [ $ currentOrder ] = [ 'direction' => $ direction ] ; } } return $ orders ; }

0<CODESPLIT>https://github.com/backbee/backbee-php/blob/d752ec7b609e538de60fb0bfcac478f6c9ed607c/Bundle/BundleLoader.php#L441-L461<CODESPLIT>BundleLoader.getConfigDirByBundleBaseDir<CODESPLIT>Builds bundle Config definition .<CODESPLIT>private function getConfigDirByBundleBaseDir ( $ baseDir ) { $ directory = $ baseDir . DIRECTORY_SEPARATOR . BundleInterface :: CONFIG_DIRECTORY_NAME ; if ( ! is_dir ( $ directory ) ) { $ directory = $ baseDir . DIRECTORY_SEPARATOR . BundleInterface :: OLD_CONFIG_DIRECTORY_NAME ; } return $ directory ; }

1<CODESPLIT>https://github.com/brightnucleus/view/blob/f26703b78bf452403fda112563825f172dc9e8ce/src/View/ViewBuilder.php#L290-L317<CODESPLIT>ViewBuilder.resolveType<CODESPLIT>Resolve the view type .<CODESPLIT>protected function resolveType ( $ type , string $ uri , Engine $ engine = null ) : View { $ configKey = [ static :: VIEW_FINDER_KEY , 'Views' , $ type ] ; if ( is_string ( $ type ) && $ this -> config -> hasKey ( $ configKey ) ) { $ className = $ this -> config -> getKey ( $ configKey ) ; $ type = new $ className ( $ uri , $ engine , $ this ) ; } if ( is_string ( $ type ) ) { $ type = new $ type ( $ uri , $ engine , $ this ) ; } if ( is_callable ( $ type ) ) { $ type = $ type ( $ uri , $ engine , $ this ) ; } if ( ! $ type instanceof View ) { throw new FailedToInstantiateView ( sprintf ( _ ( 'Could not instantiate view "%s".' ) , serialize ( $ type ) ) ) ; } return $ type ; }

1<CODESPLIT>https://github.com/acquia/commerce-manager/blob/e6c3a5fb9166d6c447725339ac4e0ae341c06d50/modules/acm_sku/src/Form/SKUTypeForm.php#L53-L78<CODESPLIT>SKUTypeForm.save<CODESPLIT>{<CODESPLIT>public function save ( array $ form , FormStateInterface $ form_state ) { $ sku_type = $ this -> entity ; if ( $ sku_type_id = $ sku_type -> id ( ) ) { $ plugin_manager = \ Drupal :: service ( 'plugin.manager.sku' ) ; $ plugin = $ plugin_manager -> pluginInstanceFromType ( $ sku_type_id ) ; $ plugin -> saveSettingsForm ( $ form , $ form_state , $ sku_type ) ; } $ status = $ sku_type -> save ( ) ; switch ( $ status ) { case SAVED_NEW : drupal_set_message ( $ this -> t ( 'Created the %label SKU type.' , [ '%label' => $ sku_type -> label ( ) , ] ) ) ; break ; default : drupal_set_message ( $ this -> t ( 'Saved the %label SKU type.' , [ '%label' => $ sku_type -> label ( ) , ] ) ) ; } $ form_state -> setRedirectUrl ( $ sku_type -> urlInfo ( 'collection' ) ) ; }

1<CODESPLIT>https://github.com/phpWhois/phpWhois/blob/32a5e85cc833f9b886c86123f7be5ada3d326272/src/IpTools.php#L66-L77<CODESPLIT>IpTools.validIpv4<CODESPLIT>Check if given IP is valid ipv4 address and doesn t belong to private and reserved ranges<CODESPLIT>public function validIpv4 ( $ ip , $ strict = true ) { $ flags = FILTER_FLAG_IPV4 ; if ( $ strict ) { $ flags = FILTER_FLAG_IPV4 | FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE ; } if ( filter_var ( $ ip , FILTER_VALIDATE_IP , array ( 'flags' => $ flags ) ) !== false ) { return true ; } return false ; }

1<CODESPLIT>https://github.com/intothesource/laravel-entrance/blob/06abacfd7fa06bb44aaa7196faafd7b243d185b0/src/EntranceServiceProvider.php#L25-L41<CODESPLIT>EntranceServiceProvider.boot<CODESPLIT>Perform post - registration booting of services .<CODESPLIT>public function boot ( ) { $ this -> loadViewsFrom ( realpath ( __DIR__ . '/views' ) , 'entrance' ) ; $ this -> setupRoutes ( ) ; // this  for conig $ this -> publishes ( [ __DIR__ . '/config/entrance.php' => config_path ( 'entrance.php' ) , __DIR__ . '/database/migrations' => database_path ( 'migrations' ) , __DIR__ . '/database/seeds' => database_path ( 'seeds' ) , //__DIR__.'/models' => app_path(), //__DIR__.'/views/emails' => base_path('resources/views/intothesource/entrance/emails'), //__DIR__.'/views/pages' => base_path('resources/views/intothesource/entrance/pages'), //__DIR__.'/Http/Controllers' => app_path('Http/Controllers/Intothesource/Entrance'), ] ) ; }

0<CODESPLIT>https://github.com/bobthecow/psysh/blob/9aaf29575bb8293206bb0420c1e1c87ff2ffa94e/src/Command/ListCommand/ClassConstantEnumerator.php#L25-L55<CODESPLIT>ClassConstantEnumerator.getConstants<CODESPLIT>{<CODESPLIT>protected function getConstants ( \ Reflector $ reflector , $ noInherit = false ) { $ className = $ reflector -> getName ( ) ; $ constants = [ ] ; foreach ( $ reflector -> getConstants ( ) as $ name => $ constant ) { $ constReflector = ReflectionClassConstant :: create ( $ reflector -> name , $ name ) ; if ( $ noInherit && $ constReflector -> getDeclaringClass ( ) -> getName ( ) !== $ className ) { continue ; } $ constants [ $ name ] = $ constReflector ; } \ ksort ( $ constants , SORT_NATURAL | SORT_FLAG_CASE ) ; return $ constants ; }

0<CODESPLIT>https://github.com/MINISTRYGmbH/morrow-core/blob/bdc916eedb14b65b06dbc88efbd2b7779f4a9a9e/src/Url.php#L204-L261<CODESPLIT>Url.slug<CODESPLIT>Creates a URL for use with Morrow . It handles automatically languages in the URL .<CODESPLIT>public function slug ( $ text ) { $ table = [ 'Š'= >' S',   š'=> 's ',  ' '=>' Dj ', ' đ =>'d j' , 'Ž ' >'Z' ,  'ž' = 'z',  ' Č'= > C',  'č '=> ' ', ' Ć' =>' C , 'ć '= >'c '     'À'= >' A',   Á'=> 'A ',  ' '=>' A' , ' Ã =>'A ',  'Ä ' >'AE ',  'Å' = 'A',  ' Æ'= > A',  'Ç '=> ' ', ' È' =>' E , 'É '= >'E '     'Ê'= >' E',   Ë'=> 'E ',  ' '=>' I' , ' Í =>'I ',  'Î ' >'I' ,  'Ï' = 'I',  ' Ñ'= > N',  'Ò '=> ' ', ' Ó' =>' O , 'Ô '= >'O '     'Õ'= >' O',   Ö'=> 'O E',  ' '=>' O' , ' Ù =>'U ',  'Ú ' >'U' ,  'Û' = 'U',  ' Ü'= > UE',  ' Ý'=> ' ', ' Þ' =>' B , 'ß '= >'s s ,    'à'= >' a',   á'=> 'a ',  ' '=>' a' , ' ã =>'a ',  'ä ' >'a' ,  'å' = 'a',  ' æ'= > a',  'ç '=> ' ', ' è' =>' e , 'é '= >'e '     'ê'= >' e',   ë'=> 'e ',  ' '=>' i' , ' í =>'i ',  'î ' >'i' ,  'ï' = 'i',  ' ð'= > o',  'ñ '=> ' ', ' ò' =>' o , 'ó '= >'o '     'ô'= >' o',   õ'=> 'o ',  ' '=>' oe ', ' ø =>'o ',  'ü ' >'ue ',  'ù' = 'u',  ' ú'= > u',  'û '=> ' ', ' ý' =>' y , 'ý '= >'y '  'þ' => 'b' ,     'ÿ'= >' y',   Ŕ'=> 'R ',  ' '=>' r' ,  ] ; $ slug = strtr ( $ text , $ table ) ; $ slug = trim ( preg_replace ( "|\W+|" , '-' , $ slug ) , '-' ) ; return $ slug ; }

0<CODESPLIT>https://github.com/ClanCats/Core/blob/9f6ec72c1a439de4b253d0223f1029f7f85b6ef8/src/classes/CCIn/Instance.php#L252-L260<CODESPLIT>CCIn_Instance.uri<CODESPLIT>get the current requesting method GET POST PUT DELETE<CODESPLIT>public function uri ( $ full = false ) { // check if we already set the current uri if ( is_null ( $ this -> uri ) ) { $ this -> uri = $ this -> server ( 'REQUEST_URI' , '/' ) ; // fix doubled slashes $ this -> uri = preg_replace ( '/(\/+)/' , '/' , $ this -> uri ) ; // remove get params if ( ! $ full ) { $ this -> uri = CCStr :: cut ( $ this -> uri , '?' ) ; } // cut the offset from the config $ this -> uri = substr ( $ this -> uri , strlen ( ClanCats :: $ config -> get ( 'url.path' ) ) ) ; // if null or false set to default if ( ! $ this -> uri ) { $ this -> uri = '' ; } } return $ this -> uri ; }

0<CODESPLIT>https://github.com/arckinteractive/events_api/blob/56c0f0ae403af1672a913db5dc259db9cb712491/classes/Events/API/Util.php#L352-L361<CODESPLIT>Util.getWeekdays<CODESPLIT>Checks if two timestamps fall on the same week day of the month ( e . g . 3rd Monday )<CODESPLIT>public static function getWeekdays ( ) { return array ( self :: MONDAY , self :: TUESDAY , self :: WEDNESDAY , self :: THURSDAY , self :: FRIDAY , self :: SATURDAY , self :: SUNDAY , ) ; }

1<CODESPLIT>https://github.com/ezsystems/ezpublish-legacy/blob/2493420f527fbc829a8d5bdda402e05d64a20db7/kernel/classes/ezcontentobjectattribute.php#L897-L914<CODESPLIT>eZContentObjectAttribute.removeThis<CODESPLIT>Remove the attribute $id by using the datatype .<CODESPLIT>function removeThis ( $ id , $ currentVersion = null ) { $ dataType = $ this -> dataType ( ) ; if ( ! $ dataType ) return false ; $ dataType -> deleteStoredObjectAttribute ( $ this , $ currentVersion ) ; if ( $ currentVersion == null ) { eZPersistentObject :: removeObject ( eZContentObjectAttribute :: definition ( ) , array ( "id" => $ id ) ) ; } else { eZPersistentObject :: removeObject ( eZContentObjectAttribute :: definition ( ) , array ( "id" => $ id , "version" => $ currentVersion ) ) ; } }

1<CODESPLIT>https://github.com/mjacobus/php-query-builder/blob/eb7a90ae3bc433659306807535b39f12ce4dfd9f/lib/PO/QueryBuilder/Helper.php#L47-L54<CODESPLIT>Helper.quote<CODESPLIT>Quote value with either double or single quotes depending on the configuration<CODESPLIT>public function quote ( $ value ) { if ( $ this -> isDoubleQuoted ( ) ) { return $ this -> doubleQuote ( $ value ) ; } else { return $ this -> singleQuote ( $ value ) ; } }

0<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/lib/portfolio/formats/leap2a/lib.php#L451-L479<CODESPLIT>portfolio_format_leap2a_file.add_extra_links<CODESPLIT>Try to load whatever is in $content into xhtml and add it to the dom . Failing that load the html escape it and set it as the body of the tag . Either way it sets the type attribute of the top level element . Moodle should always provide xhtml content but user - defined content can t be trusted<CODESPLIT>protected function add_extra_links ( $ dom , $ entry ) { $ link = $ dom -> createElement ( 'link' ) ; $ link -> setAttribute ( 'rel' , 'enclosure' ) ; $ link -> setAttribute ( 'href' , portfolio_format_leap2a :: get_file_directory ( ) . $ this -> referencedfile -> get_filename ( ) ) ; $ link -> setAttribute ( 'length' , $ this -> referencedfile -> get_filesize ( ) ) ; $ link -> setAttribute ( 'type' , $ this -> referencedfile -> get_mimetype ( ) ) ; $ entry -> appendChild ( $ link ) ; }

0<CODESPLIT>https://github.com/Art-of-WiFi/UniFi-API-client/blob/09db47affd6a006d6ff71236a581e61fd7d9901b/src/Client.php#L2970-L2979<CODESPLIT>Client.spectrum_scan<CODESPLIT>Power - cycle the PoE output of a switch port ------------------------------------------- return true on success required parameter <switch_mac > = string ; main MAC address of the switch required parameter <port_idx > = integer ; port number / index of the port to be affected<CODESPLIT>public function spectrum_scan ( $ ap_mac ) { if ( ! $ this -> is_loggedin ) { return false ; } $ payload = [ 'cmd' => 'spectrum-scan' , 'mac' => strtolower ( $ ap_mac ) ] ; $ response = $ this -> exec_curl ( '/api/s/' . $ this -> site . '/cmd/devmgr' , $ payload ) ; return $ this -> process_response_boolean ( $ response ) ; }

1<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/lib/lessphp/Parser.php#L383-L389<CODESPLIT>Less_Parser.ModifyVars<CODESPLIT>Allows a user to set variables values<CODESPLIT>public function ModifyVars ( $ vars ) { $ this -> input = Less_Parser :: serializeVars ( $ vars ) ; $ this -> _parse ( ) ; return $ this ; }

1<CODESPLIT>https://github.com/lndj/Lcrawl/blob/61adc5d99355155099743b288ea3be52efebb852/src/Traits/BuildRequest.php#L55-L73<CODESPLIT>BuildRequest.buildPostRequest<CODESPLIT>Build the POST request .<CODESPLIT>public function buildPostRequest ( $ uri , $ query , $ param , $ headers = [ ] , $ isAsync = false ) { $ query_param = array_merge ( [ 'xh' => $ this -> stu_id ] , $ query ) ; $ post = [ 'query' => $ query_param , 'headers' => $ headers , 'form_params' => $ param , ] ; //If opened cookie cache if ( $ this -> cacheCookie ) { $ post [ 'cookies' ] = $ this -> getCookie ( ) ; } //If use getAll(), use the Async request. return $ isAsync ? $ this -> client -> postAsync ( $ uri , $ post ) : $ this -> client -> post ( $ uri , $ post ) ; }

1<CODESPLIT>https://github.com/fondbot/drivers-vk/blob/b4da296d19f0c58dacb7bae486b43d59b82da4c3/src/VkCommunityDriver.php#L69-L89<CODESPLIT>VkCommunityDriver.verifyRequest<CODESPLIT>Verify incoming request data .<CODESPLIT>public function verifyRequest ( ) : void { $ type = $ this -> request -> getParameter ( 'type' ) ; $ object = $ this -> request -> getParameter ( 'object' ) ; if ( $ type === null || $ type !== 'message_new' ) { throw new InvalidRequest ( 'Invalid type' ) ; } if ( $ object === null ) { throw new InvalidRequest ( 'Invalid object' ) ; } if ( ! isset ( $ object [ 'user_id' ] ) ) { throw new InvalidRequest ( 'Invalid user_id' ) ; } if ( ! isset ( $ object [ 'body' ] ) ) { throw new InvalidRequest ( 'Invalid body' ) ; } }

1<CODESPLIT>https://github.com/webforge-labs/psc-cms/blob/467bfa2547e6b4fa487d2d7f35fa6cc618dbc763/lib/Psc/TPL/ContentStream/Converter.php#L183-L198<CODESPLIT>Converter.convertUnserialized<CODESPLIT>Convertes an serialized ContentStream to the real object structure<CODESPLIT>public function convertUnserialized ( Array $ serialized , ContentStream $ contentStream = NULL ) { if ( isset ( $ contentStream ) ) { foreach ( $ serialized as $ serializedEntry ) { $ entry = $ this -> unserializeEntry ( ( object ) $ serializedEntry ) ; $ entry -> setContentStream ( $ contentStream ) ; } return $ contentStream ; } else { $ unserialized = array ( ) ; foreach ( $ serialized as $ serializedEntry ) { $ unserialized [ ] = $ this -> unserializeEntry ( $ serializedEntry ) ; } } return $ unserialized ; }

0<CODESPLIT>https://github.com/hail-framework/framework/blob/d419e6c098d29ef9b62192b74050e51985b94f90/src/Http/Helpers.php#L267-L278<CODESPLIT>Helpers.getMethod<CODESPLIT>Get protocol from server variables .<CODESPLIT>public static function getMethod ( array $ server ) : string { $ method = $ server [ 'REQUEST_METHOD' ] ?? 'GET' ; if ( $ method === 'POST' && isset ( $ server [ 'HTTP_X_HTTP_METHOD_OVERRIDE' ] , self :: $ methods [ $ server [ 'HTTP_X_HTTP_METHOD_OVERRIDE' ] ] ) ) { $ method = $ server [ 'HTTP_X_HTTP_METHOD_OVERRIDE' ] ; } return $ method ; }

0<CODESPLIT>https://github.com/yawik/geo/blob/8dea9621466bffd168eba5a093e82c30ca55a69c/src/Form/GeoSelectHydratorStrategy.php#L70-L93<CODESPLIT>ModelMapperService.create<CODESPLIT>Converts the given value so that it can be extracted by the hydrator .<CODESPLIT>public function create ( $ model , $ config = [ ] ) { if ( empty ( $ model -> type ) ) { $ model -> type = CoreGlobal :: TYPE_DEFAULT ; } return parent :: create ( $ model , $ config ) ; }

0<CODESPLIT>https://github.com/oat-sa/generis/blob/789c057e509fc1f9b54c1ed46dd625c6fbe4fdf6/core/kernel/persistence/smoothsql/class.Resource.php#L307-L332<CODESPLIT>core_kernel_persistence_smoothsql_Resource.removePropertyValues<CODESPLIT>Short description of method setPropertyValueByLg<CODESPLIT>public function removePropertyValues ( core_kernel_classes_Resource $ resource , core_kernel_classes_Property $ property , $ options = array ( ) ) { $ returnValue = ( bool ) false ; // Optional params $ pattern = isset ( $ options [ 'pattern' ] ) && ! is_null ( $ options [ 'pattern' ] ) ? $ options [ 'pattern' ] : null ; $ like = isset ( $ options [ 'like' ] ) && $ options [ 'like' ] == true ? true : false ; //build query: $ query = 'DELETE FROM statements WHERE subject = ? AND predicate = ?' ; $ objectType = $ this -> getPersistence ( ) -> getPlatForm ( ) -> getObjectTypeCondition ( ) ; $ conditions = array ( ) ; if ( is_string ( $ pattern ) ) { if ( ! is_null ( $ pattern ) ) { $ searchPattern = core_kernel_persistence_smoothsql_Utils :: buildSearchPattern ( $ this -> getPersistence ( ) , $ pattern , $ like ) ; $ conditions [ ] = '( ' . $ objectType . ' ' . $ searchPattern . ' )' ; } } elseif ( is_array ( $ pattern ) ) { if ( count ( $ pattern ) > 0 ) { $ multiCondition = "( " ; foreach ( $ pattern as $ i => $ patternToken ) { $ searchPattern = core_kernel_persistence_smoothsql_Utils :: buildSearchPattern ( $ this -> getPersistence ( ) , $ patternToken , $ like ) ; if ( $ i > 0 ) { $ multiCondition .= " OR " ; } $ multiCondition .= '(' . $ objectType . ' ' . $ searchPattern . ' )' ; } $ conditions [ ] = "{$multiCondition} ) " ; } } foreach ( $ conditions as $ i => $ additionalCondition ) { $ query .= " AND ( {$additionalCondition} ) " ; } //be sure the property we try to remove is included in an updatable model $ query .= ' AND ' . $ this -> getModelWriteSqlCondition ( ) ; if ( $ property -> isLgDependent ( ) ) { $ query .= ' AND (l_language = ? OR l_language = ?) ' ; $ returnValue = $ this -> getPersistence ( ) -> exec ( $ query , array ( $ resource -> getUri ( ) , $ property -> getUri ( ) , '' , $ this -> getServiceLocator ( ) -> get ( SessionService :: SERVICE_ID ) -> getCurrentSession ( ) -> getDataLanguage ( ) ) ) ; } else { $ returnValue = $ this -> getPersistence ( ) -> exec ( $ query , array ( $ resource -> getUri ( ) , $ property -> getUri ( ) ) ) ; } if ( ! $ returnValue ) { $ returnValue = false ; } return ( bool ) $ returnValue ; }

1<CODESPLIT>https://github.com/laravel/valet/blob/364e29ab20a85015b54708cefe33ee0bb2283426/cli/Valet/Nginx.php#L131-L136<CODESPLIT>Nginx.rewriteSecureNginxFiles<CODESPLIT>Generate fresh Nginx servers for existing secure sites .<CODESPLIT>function rewriteSecureNginxFiles ( ) { $ tld = $ this -> configuration -> read ( ) [ 'tld' ] ; $ this -> site -> resecureForNewTld ( $ tld , $ tld ) ; }

1<CODESPLIT>https://github.com/spipu/html2pdf/blob/83c9bd942e8520681808b70584e01d17157335ba/src/SvgDrawer.php#L74-L81<CODESPLIT>SvgDrawer.stopDrawing<CODESPLIT>Stop Drawing<CODESPLIT>public function stopDrawing ( ) { $ this -> properties = null ; $ this -> pdf -> setAlpha ( 1. ) ; $ this -> pdf -> undoTransform ( ) ; $ this -> pdf -> clippingPathStop ( ) ; }

1<CODESPLIT>https://github.com/cosmow/riak/blob/49c2bbfbbc036cd38babfeba1e93667ceca5ec0a/lib/CosmoW/Riak/Cursor.php#L456-L462<CODESPLIT>Cursor.next<CODESPLIT>Wrapper method for RiakCursor :: next () .<CODESPLIT>public function next ( ) { $ cursor = $ this ; $ this -> retry ( function ( ) use ( $ cursor ) { $ cursor -> getRiakCursor ( ) -> next ( ) ; } , false ) ; }

0<CODESPLIT>https://github.com/BugBuster1701/contao-dlstats-bundle/blob/d0d6f8cbbd6a6694bb0564d9865e24bd95e1f6e3/src/Resources/contao/modules/ModuleDlstatsStatistics.php#L189-L213<CODESPLIT>ModuleDlstatsStatistics.getYear<CODESPLIT>Monthly Statistics last 12 Months<CODESPLIT>protected function getYear ( ) { $ arrYear = array ( ) ; $ objYear = \ Database :: getInstance ( ) -> prepare ( "SELECT                                                         FROM_UNIXTIME(`tstamp`,'%Y')  AS Y                                                       , COUNT(`id`) AS SUMDL                                                       FROM `tl_dlstatdets`                                                       WHERE 1                                                       GROUP BY Y                                                       ORDER BY Y DESC" ) -> limit ( 12 ) -> execute ( ) ; $ intRows = $ objYear -> numRows ; if ( $ intRows > 0 ) { while ( $ objYear -> next ( ) ) { // Y, formatierte Zahl, unformatierte Zahl $ arrYear [ ] = array ( $ objYear -> Y , $ this -> getFormattedNumber ( $ objYear -> SUMDL , 0 ) , $ objYear -> SUMDL ) ; } } return $ arrYear ; }

1<CODESPLIT>https://github.com/googleapis/google-cloud-php/blob/ff5030ffa1f12904565509a7bc24ecc0bd794a3e/Firestore/src/V1beta1/StructuredQuery.php#L304-L310<CODESPLIT>StructuredQuery.setEndAt<CODESPLIT>A end point for the query results .<CODESPLIT>public function setEndAt ( $ var ) { GPBUtil :: checkMessage ( $ var , \ Google \ Cloud \ Firestore \ V1beta1 \ Cursor :: class ) ; $ this -> end_at = $ var ; return $ this ; }

0<CODESPLIT>https://github.com/atelierspierrot/templatengine/blob/de01b117f882670bed7b322e2d3b8b30fa9ae45f/src/TemplateEngine/TemplateObject/CssFile.php#L88-L101<CODESPLIT>CssFile.set<CODESPLIT>Add a CSS file in CSS stack<CODESPLIT>public function set ( array $ files ) { if ( ! empty ( $ files ) ) { foreach ( $ files as $ _file ) { if ( is_array ( $ _file ) && isset ( $ _file [ 'file' ] ) ) { $ this -> add ( $ _file [ 'file' ] , isset ( $ _file [ 'media' ] ) ? $ _file [ 'media' ] : '' , isset ( $ _file [ 'condition' ] ) ? $ _file [ 'condition' ] : null ) ; } elseif ( is_string ( $ _file ) ) { $ this -> add ( $ _file ) ; } } } return $ this ; }

0<CODESPLIT>https://github.com/scherersoftware/cake-model-history/blob/4dceac1cc7db0e6d443750dd9d76b960df385931/src/View/Helper/ModelHistoryHelper.php#L207-L221<CODESPLIT>ModelHistoryHelper.getLocalizedFieldnames<CODESPLIT>Retrieve localized slug when translation is available in type descriptions .<CODESPLIT>public function getLocalizedFieldnames ( ModelHistory $ historyEntry ) : string { $ fields = join ( ', ' , array_map ( function ( $ value ) use ( $ historyEntry ) { if ( ! is_string ( $ value ) ) { return $ value ; } // Get pre configured translations and return it if found $ fields = TableRegistry :: get ( $ historyEntry -> model ) -> getFields ( ) ; if ( isset ( $ fields [ $ value ] [ 'translation' ] ) ) { if ( is_callable ( $ fields [ $ value ] [ 'translation' ] ) ) { return $ fields [ $ value ] [ 'translation' ] ( ) ; } return $ fields [ $ value ] [ 'translation' ] ; } // Try to get the generic model.field translation string $ localeSlug = strtolower ( Inflector :: singularize ( Inflector :: delimit ( $ historyEntry -> model ) ) ) . '.' . strtolower ( $ value ) ; $ translatedString = __ ( $ localeSlug ) ; // Return original value when no translation was made if ( $ localeSlug == $ translatedString ) { return $ value ; } return $ translatedString ; } , array_keys ( $ historyEntry -> data ) ) ) ; return $ fields ; }

1<CODESPLIT>https://github.com/symfony/symfony/blob/b82b09eefb084e487997f4af753400d721edd0a8/src/Symfony/Component/Config/Definition/Builder/ArrayNodeDefinition.php#L274-L295<CODESPLIT>ArrayNodeDefinition.canBeEnabled<CODESPLIT>Adds an enabled boolean to enable the current section .<CODESPLIT>public function canBeEnabled ( ) { $ this -> addDefaultsIfNotSet ( ) -> treatFalseLike ( [ 'enabled' => false ] ) -> treatTrueLike ( [ 'enabled' => true ] ) -> treatNullLike ( [ 'enabled' => true ] ) -> beforeNormalization ( ) -> ifArray ( ) -> then ( function ( $ v ) { $ v [ 'enabled' ] = isset ( $ v [ 'enabled' ] ) ? $ v [ 'enabled' ] : true ; return $ v ; } ) -> end ( ) -> children ( ) -> booleanNode ( 'enabled' ) -> defaultFalse ( ) ; return $ this ; }

0<CODESPLIT>https://github.com/br-monteiro/htr-core/blob/04c85684e9317fdc52c47aacb357661b4939fb4b/src/Database/AbstractModel.php#L68-L78<CODESPLIT>AbstractModel.commonError<CODESPLIT>Initialize one new instance of AbstractModel and configure it with the results of query<CODESPLIT>protected static function commonError ( Response $ response , \ Exception $ ex ) : Response { $ data = [ "message" => "Somethings are wrong" , "status" => "error" ] ; if ( cfg :: htrFileConfigs ( ) -> devmode ?? false ) { $ data [ 'dev_error' ] = $ ex -> getMessage ( ) ; } return $ response -> withJson ( $ data , 500 ) ; }

1<CODESPLIT>https://github.com/yuncms/framework/blob/af42e28ea4ae15ab8eead3f6d119f93863b94154/src/helpers/ArrayHelper.php#L548-L553<CODESPLIT>ArrayHelper.rename<CODESPLIT>重命名数组中的项目。如果新Key已经存在于数组中，并且旧Key不存在，数组将保持不变。<CODESPLIT>public static function rename ( array & $ array , string $ oldKey , string $ newKey , $ default = null ) { if ( ! array_key_exists ( $ newKey , $ array ) || array_key_exists ( $ oldKey , $ array ) ) { $ array [ $ newKey ] = static :: remove ( $ array , $ oldKey , $ default ) ; } }

0<CODESPLIT>https://github.com/Nayjest/Grids/blob/06f0a3d1b62844006d7c5e177e554dba0933d18e/src/Build/Setup.php#L185-L202<CODESPLIT>ColumnHeadersRow.createHeaders<CODESPLIT>Creates blueprint for grid columns .<CODESPLIT>protected function createHeaders ( Grid $ grid ) { foreach ( $ grid -> getConfig ( ) -> getColumns ( ) as $ column ) { $ this -> addComponent ( new ColumnHeader ( $ column ) ) ; } }

1<CODESPLIT>https://github.com/jtallant/skimpy-engine/blob/2fce5bc16f8745e54fd66a1c291fcea47fc1b4b2/src/Provider/SkimpyProvider.php#L102-L123<CODESPLIT>SkimpyProvider.registerConfigs<CODESPLIT>Register the config provider and load the default configs<CODESPLIT>protected function registerConfigs ( Application $ app ) { $ base = $ app [ 'path.base' ] ; if ( file_exists ( "$base/.env" ) ) { $ dotenv = \ Dotenv :: load ( $ base ) ; } $ preloadedVars = [ 'env.DEBUG' => $ app [ 'debug' ] , 'env.AUTO_REBUILD' => $ app [ 'auto_rebuild' ] , 'env.DOMAIN' => isset ( $ _SERVER [ 'SERVER_NAME' ] ) ? $ _SERVER [ 'SERVER_NAME' ] : 'skimpy.dev' , 'path.base' => $ base , ] ; $ envVars = $ _ENV ; foreach ( $ envVars as $ k => $ v ) { $ preloadedVars [ "env.$k" ] = $ v ; } $ app -> register ( new \ Igorw \ Silex \ ConfigServiceProvider ( "$base/config/site.php" ) ) ; }

0<CODESPLIT>https://github.com/unreal4u/telegram-api/blob/0a6e40fbad3fca64a4707c68d335b783060976eb/src/Telegram/Methods/GetUpdates.php#L65-L68<CODESPLIT>Guard.createRememberTokenIfDoesntExist<CODESPLIT>This call will return an array with updates so call up a custom type to do this<CODESPLIT>protected function createRememberTokenIfDoesntExist ( UserContract $ user ) { $ rememberToken = $ user -> getRememberToken ( ) ; if ( empty ( $ rememberToken ) ) { $ this -> refreshRememberToken ( $ user ) ; } }

0<CODESPLIT>https://github.com/jasonhinkle/phreeze/blob/6e45b1b29449ab5e7b81d2b8cb60ed61ec438e62/libs/verysimple/Phreeze/QueryBuilder.php#L39-L50<CODESPLIT>QueryBuilder.RecurseFieldMaps<CODESPLIT>Adds a field map to the queue which will be used later when the SQL is generated<CODESPLIT>public function RecurseFieldMaps ( $ typename , $ fms ) { // if we see the same table again, we have an infinite loop  if ( isset ( $ this -> _keymapcache [ $ typename ] ) ) { // return;  // TODO: why doesn't this work..?  throw new Exception ( "A circular EAGER join was detected while parsing `$typename`.  This is possibly due to an EAGER join with `" . $ this -> _prevkeymap . "`  Please edit your Map so that at least one side of the join is LAZY." ) ; } // first we just add the basic columns of this object  foreach ( $ fms as $ fm ) { $ this -> AddFieldMap ( $ fm ) ; } // get the keymaps for the requested object  $ kms = $ this -> _phreezer -> GetKeyMaps ( $ typename ) ; $ this -> _keymapcache [ $ typename ] = $ kms ; // save this to prevent infinite loop  $ this -> _prevkeymap = $ typename ; // each keymap in this object that is eagerly loaded, we want to join into the query.  // each of these tables, then might have eagerly loaded keymaps as well, so we'll use  // recursion to eagerly load as much of the graph as is desired  foreach ( $ kms as $ km ) { if ( $ km -> LoadType == KM_LOAD_EAGER || $ km -> LoadType == KM_LOAD_INNER ) { // check that we didn't eagerly join this already.  // TODO: use aliases to support multiple eager joins to the same table  if ( isset ( $ this -> Joins [ $ km -> ForeignObject . "_is_joined" ] ) ) { //print_r($typename);  throw new Exception ( $ typename . "Map has multiple EAGER joins to `" . $ km -> ForeignObject . "` which is not yet supported by Phreeze." ) ; } $ ffms = $ this -> _phreezer -> GetFieldMaps ( $ km -> ForeignObject ) ; $ this -> RecurseFieldMaps ( $ km -> ForeignObject , $ ffms ) ; // lastly we need to add the join information for this foreign field map  $ jointype = $ km -> LoadType == KM_LOAD_INNER ? "inner" : "left" ; foreach ( $ ffms as $ ffm ) { if ( ! isset ( $ this -> Joins [ $ ffm -> TableName ] ) ) { $ this -> Joins [ $ ffm -> TableName ] = " " . $ jointype . " join `" . $ ffm -> TableName . "` on `" . $ fms [ $ km -> KeyProperty ] -> TableName . "`.`" . $ fms [ $ km -> KeyProperty ] -> ColumnName . "` = `" . $ ffms [ $ km -> ForeignKeyProperty ] -> TableName . "`.`" . $ ffms [ $ km -> ForeignKeyProperty ] -> ColumnName . "`" ; } } // keep track of what we have eagerly joined already  $ this -> Joins [ $ km -> ForeignObject . "_is_joined" ] = 1 ; } } }

0<CODESPLIT>https://github.com/AnonymPHP/Anonym-Library/blob/c967ad804f84e8fb204593a0959cda2fed5ae075/src/Anonym/Upload/ByteConvert.php#L111-L124<CODESPLIT>Module.prepareException<CODESPLIT>Dosyanın tipini bulur ve boyutunu ayarlar<CODESPLIT>public function prepareException ( MvcEvent $ e ) { if ( $ e -> getRequest ( ) instanceof Request ) { $ error = $ e -> getError ( ) ; if ( ! empty ( $ error ) && ! $ e -> getResult ( ) instanceof Response ) { switch ( $ error ) { case Application :: ERROR_CONTROLLER_NOT_FOUND : case Application :: ERROR_CONTROLLER_INVALID : case Application :: ERROR_ROUTER_NO_MATCH : // Specifically not handling these return ; case Application :: ERROR_EXCEPTION : default : /** @var Exception $exception */ $ exception = $ e -> getParam ( 'exception' ) ; // Filter exceptions that we must except foreach ( $ this -> whoopsConfig [ 'blacklist' ] as $ except ) { if ( $ exception instanceof $ except ) { return ; } } if ( $ this -> whoopsConfig [ 'handler' ] [ 'options_type' ] === 'prettyPage' ) { $ response = $ e -> getResponse ( ) ; if ( ! $ response || $ response -> getStatusCode ( ) === 200 ) { header ( 'HTTP/1.0 500 Internal Server Error' , true , 500 ) ; } ob_clean ( ) ; } $ this -> run -> handleException ( $ e -> getParam ( 'exception' ) ) ; break ; } } } }

1<CODESPLIT>https://github.com/rozdol/bi/blob/f63d6b219cc4a7bb25b1865905a2a888ce6ce855/src/Utils/Utils.php#L1848-L1880<CODESPLIT>Utils.tablehead<CODESPLIT>/// ============== To resove with HTML class ========= \\\\\\\<CODESPLIT>public function tablehead ( $ what = '' , $ qry = '' , $ order = '' , $ addbutton = '' , $ fields = [ ] , $ sort = [ ] , $ tips = [ ] ) { $ out .= "                 <table class='table table-bordered table-striped-tr table-morecondensed tooltip-demo  table-notfull' id='sortableTable'>                 <thead  class='c'>                 <tr>                     " ; if ( $ what != '' ) { $ out .= "<th><a href='?act=search&what=$what' class='c'><i class='icon-search'></i></a></th>" ; } $ i = 0 ; foreach ( $ fields as $ field ) { $ field = strtolower ( $ field ) ; if ( $ tips [ $ i ] != "" ) { $ tip = "data-original-title='$tips[$i]'" ; } else { $ tip = "" ; } if ( $ sort [ $ i ] != "" ) { $ out .= " <th class='tooltip-test' $tip><a href='?$qry&sortby=$sort[$i]$order' TITLE='Sort'>" . ucfirst ( $ field ) . "</a></th>" ; } else { $ out .= " <th class='tooltip-test' $tip>" . ucfirst ( $ field ) . "</th>" ; } $ i ++ ; } if ( $ what != '' ) { $ out .= "<th style='text-align: center; width: 50px;'>$addbutton</th>" ; } $ out .= "</tr>                     </thead>                     <tbody>" ; return $ out ; }

1<CODESPLIT>https://github.com/Linkvalue-Interne/MobileNotifBundle/blob/8124f4132c581516be9928ece81ae2cf9f59763d/Profiler/ClientProfiler.php#L49-L62<CODESPLIT>ClientProfiler.startProfiling<CODESPLIT>@param $message<CODESPLIT>public function startProfiling ( $ message ) { $ this -> calls [ $ this -> counter ] = array ( 'message' => $ message , 'duration' => null , 'memory_start' => memory_get_usage ( true ) , 'memory_end' => null , 'memory_use' => null , 'error' => null , 'error_message' => null , ) ; return $ this -> stopwatch -> start ( $ message ) ; }

1<CODESPLIT>https://github.com/duncan3dc/sql-class/blob/a2b31ceced57c651199c787f4b1e509bc5a022ae/src/Sql.php#L792-L807<CODESPLIT>Sql.limit<CODESPLIT>Convert any limit usage Doesn t work with the mssql variety<CODESPLIT>protected function limit ( & $ query ) { switch ( $ this -> mode ) { case "mysql" : case "postgres" : case "redshift" : case "sqlite" : $ query = preg_replace ( "/\bFETCH\s+FIRST\s+([0-9]+)\s+ROW(S?)\s+ONLY\b/i" , "\nLIMIT $1\n" , $ query ) ; break ; case "odbc" : $ query = preg_replace ( "/\bLIMIT\s+([0-9]+)\b/i" , "\nFETCH FIRST $1 ROWS ONLY\n" , $ query ) ; break ; } }

0<CODESPLIT>https://github.com/php-casbin/php-casbin/blob/7dce1785af3d927dc725f35a82b38e97e19b0089/src/ManagementApi.php#L258-L274<CODESPLIT>ManagementApi.removeNamedPolicy<CODESPLIT>AddNamedPolicy adds an authorization rule to the current named policy . If the rule already exists the function returns false and the rule will not be added . Otherwise the function returns true by adding the new rule .<CODESPLIT>public function removeNamedPolicy ( $ ptype , ... $ params ) { $ ruleRemoved = false ; if ( 1 == count ( $ params ) && is_array ( $ params [ 0 ] ) ) { $ strSlice = $ params [ 0 ] ; $ ruleAdded = $ this -> removePolicyInternal ( 'p' , $ ptype , $ strSlice ) ; } else { $ policy = [ ] ; foreach ( $ params as $ param ) { $ policy [ ] = $ param ; } $ ruleRemoved = $ this -> removePolicyInternal ( 'p' , $ ptype , $ policy ) ; } return $ ruleRemoved ; }

1<CODESPLIT>https://github.com/ezsystems/eztags/blob/a8d414ed38ae866d40cf2470a8222cd9afd07f4d/datatypes/eztags/eztagstype.php#L233-L258<CODESPLIT>eZTagsType.fetchClassAttributeHTTPInput<CODESPLIT>Fetches class attribute HTTP input and stores it<CODESPLIT>public function fetchClassAttributeHTTPInput ( $ http , $ base , $ attribute ) { $ classAttributeID = $ attribute -> attribute ( 'id' ) ; $ subTreeLimit = ( int ) $ http -> postVariable ( $ base . self :: SUBTREE_LIMIT_VARIABLE . $ classAttributeID , - 1 ) ; $ maxTags = ( int ) trim ( $ http -> postVariable ( $ base . self :: MAX_TAGS_VARIABLE . $ classAttributeID , - 1 ) ) ; if ( $ subTreeLimit < 0 || $ maxTags < 0 ) return false ; $ hideRootTag = ( int ) $ http -> hasPostVariable ( $ base . self :: HIDE_ROOT_TAG_VARIABLE . $ classAttributeID ) ; $ editView = trim ( $ http -> postVariable ( $ base . self :: EDIT_VIEW_VARIABLE . $ classAttributeID , self :: EDIT_VIEW_DEFAULT_VALUE ) ) ; $ eZTagsIni = eZINI :: instance ( 'eztags.ini' ) ; $ availableEditViews = $ eZTagsIni -> variable ( 'EditSettings' , 'AvailableViews' ) ; if ( ! in_array ( $ editView , array_keys ( $ availableEditViews ) ) ) return false ; $ attribute -> setAttribute ( self :: SUBTREE_LIMIT_FIELD , $ subTreeLimit ) ; $ attribute -> setAttribute ( self :: HIDE_ROOT_TAG_FIELD , $ hideRootTag ) ; $ attribute -> setAttribute ( self :: MAX_TAGS_FIELD , $ maxTags ) ; $ attribute -> setAttribute ( self :: EDIT_VIEW_FIELD , $ editView ) ; return true ; }

1<CODESPLIT>https://github.com/wisp-x/hopephp/blob/5d4ec0fdb847772783259c16c97e9843b81df3c9/hopephp/library/hope/Session.php#L85-L95<CODESPLIT>Session.pull<CODESPLIT>取出Session值并删除<CODESPLIT>public static function pull ( $ name ) { empty ( self :: $ init ) && self :: init ( ) ; $ session = self :: get ( $ name ) ; if ( $ session ) { self :: delete ( $ name ) ; return $ session ; } return false ; }

1<CODESPLIT>https://github.com/Opifer/Cms/blob/fa288bc9d58bf9078c2fa265fa63064fa9323797/src/ContentBundle/Controller/Backend/ContentTypeController.php#L40-L69<CODESPLIT>ContentTypeController.createAction<CODESPLIT>Create a ContentType .<CODESPLIT>public function createAction ( Request $ request ) { $ contentTypeManager = $ this -> get ( 'opifer.content.content_type_manager' ) ; $ contentType = $ contentTypeManager -> create ( ) ; $ form = $ this -> createForm ( ContentTypeType :: class , $ contentType ) ; $ form -> handleRequest ( $ request ) ; if ( $ form -> isSubmitted ( ) && $ form -> isValid ( ) ) { foreach ( $ form -> getData ( ) -> getSchema ( ) -> getAttributes ( ) as $ attribute ) { $ attribute -> setSchema ( $ contentType -> getSchema ( ) ) ; foreach ( $ attribute -> getOptions ( ) as $ option ) { $ option -> setAttribute ( $ attribute ) ; } } $ contentTypeManager -> save ( $ contentType ) ; $ this -> addFlash ( 'success' , 'Content type has been created successfully' ) ; return $ this -> redirectToRoute ( 'opifer_content_contenttype_edit' , [ 'id' => $ contentType -> getId ( ) ] ) ; } return $ this -> render ( $ this -> getParameter ( 'opifer_content.content_type_create_view' ) , [ 'content_type' => $ contentType , 'form' => $ form -> createView ( ) , ] ) ; }

1<CODESPLIT>https://github.com/malenkiki/bah/blob/23495014acec63c2790e8021c75bc97d7e04a9c7/src/Malenki/Bah/S.php#L3387-L3407<CODESPLIT>S.chunk<CODESPLIT>Cuts the string as a set of substrings having given size .<CODESPLIT>public function chunk ( $ size = 1 ) { self :: mustBeInteger ( $ size , 'Chunk’s size');   if ( $ size instanceof N ) $ size = $ size -> int ; if ( $ size < 1 ) { throw new \ InvalidArgumentException ( 'Chunk’s size must be equal at least to 1.' ) ; } $ a = new A ( ) ; $ cnt = count ( $ this ) ; for ( $ i = 0 ; $ i < $ cnt ; $ i += $ size ) { $ a -> add ( $ this -> sub ( $ i , $ size ) ) ; } return $ a ; }

1<CODESPLIT>https://github.com/ExSituMarketing/EXS-LanderTrackingHouseBundle/blob/404ce51ec1ee0bf5e669eb1f4cd04746e244f61a/Service/TrackingParameterManager/UvTrackingParameterManager.php#L39-L57<CODESPLIT>UvTrackingParameterManager.format<CODESPLIT>uv : exid and visit with ~ as a delimiter<CODESPLIT>public function format ( ParameterBag $ trackingParameters ) { $ uv = null ; if ( $ trackingParameters -> has ( 'u' ) && $ trackingParameters -> has ( 'v' ) ) { $ uv = sprintf ( '%s~%s' , $ trackingParameters -> get ( 'u' ) , $ trackingParameters -> get ( 'v' ) ) ; } return [ 'uv' => $ uv , ] ; }

1<CODESPLIT>https://github.com/fisharebest/webtrees/blob/840bd0d721dc479520ec24a065996bc6becb8348/app/Functions/Functions.php#L588-L2318<CODESPLIT>Functions.getRelationshipNameFromPath<CODESPLIT>Convert a relationship path into a relationship name .<CODESPLIT>public static function getRelationshipNameFromPath ( $ path , Individual $ person1 = null , Individual $ person2 = null ) : string { if ( ! preg_match ( '/^(mot|fat|par|hus|wif|spo|son|dau|chi|bro|sis|sib)*$/' , $ path ) ) { return '<span class="error">' . $ path . '</span>' ; } // The path does not include the starting person. In some languages, the // translation for a man’s (relative) is different from a woman’s (relative), // due to inflection. $ sex1 = $ person1 ? $ person1 -> sex ( ) : 'U' ; // The sex of the last person in the relationship determines the name in // many cases. e.g. great-aunt / great-uncle if ( preg_match ( '/(fat|hus|son|bro)$/' , $ path ) ) { $ sex2 = 'M' ; } elseif ( preg_match ( '/(mot|wif|dau|sis)$/' , $ path ) ) { $ sex2 = 'F' ; } else { $ sex2 = 'U' ; } switch ( $ path ) { case '' : return I18N :: translate ( 'self' ) ; //  Level One relationships case 'mot' : return I18N :: translate ( 'mother' ) ; case 'fat' : return I18N :: translate ( 'father' ) ; case 'par' : return I18N :: translate ( 'parent' ) ; case 'hus' : if ( $ person1 && $ person2 ) { foreach ( $ person1 -> spouseFamilies ( ) as $ family ) { if ( $ person2 === $ family -> spouse ( $ person1 ) ) { if ( $ family -> facts ( [ 'MARR' ] ) -> isNotEmpty ( ) ) { if ( $ family -> facts ( Gedcom :: DIVORCE_EVENTS ) -> isNotEmpty ( ) ) { return I18N :: translate ( 'ex-husband' ) ; } return I18N :: translate ( 'husband' ) ; } if ( $ family -> facts ( Gedcom :: DIVORCE_EVENTS ) -> isNotEmpty ( ) ) { return I18N :: translateContext ( 'MALE' , 'ex-partner' ) ; } } } } return I18N :: translateContext ( 'MALE' , 'partner' ) ; case 'wif' : if ( $ person1 && $ person2 ) { foreach ( $ person1 -> spouseFamilies ( ) as $ family ) { if ( $ person2 === $ family -> spouse ( $ person1 ) ) { if ( $ family -> facts ( [ 'MARR' ] ) -> isNotEmpty ( ) ) { if ( $ family -> facts ( Gedcom :: DIVORCE_EVENTS ) -> isNotEmpty ( ) ) { return I18N :: translate ( 'ex-wife' ) ; } return I18N :: translate ( 'wife' ) ; } if ( $ family -> facts ( Gedcom :: DIVORCE_EVENTS ) -> isNotEmpty ( ) ) { return I18N :: translateContext ( 'FEMALE' , 'ex-partner' ) ; } } } } return I18N :: translateContext ( 'FEMALE' , 'partner' ) ; case 'spo' : if ( $ person1 && $ person2 ) { foreach ( $ person1 -> spouseFamilies ( ) as $ family ) { if ( $ person2 === $ family -> spouse ( $ person1 ) ) { if ( $ family -> facts ( [ 'MARR' ] ) -> isNotEmpty ( ) ) { if ( $ family -> facts ( Gedcom :: DIVORCE_EVENTS ) -> isNotEmpty ( ) ) { return I18N :: translate ( 'ex-spouse' ) ; } return I18N :: translate ( 'spouse' ) ; } if ( $ family -> facts ( Gedcom :: DIVORCE_EVENTS ) -> isNotEmpty ( ) ) { return I18N :: translate ( 'ex-partner' ) ; } } } } return I18N :: translate ( 'partner' ) ; case 'son' : return I18N :: translate ( 'son' ) ; case 'dau' : return I18N :: translate ( 'daughter' ) ; case 'chi' : return I18N :: translate ( 'child' ) ; case 'bro' : if ( $ person1 && $ person2 ) { $ dob1 = $ person1 -> getBirthDate ( ) ; $ dob2 = $ person2 -> getBirthDate ( ) ; if ( $ dob1 -> isOK ( ) && $ dob2 -> isOK ( ) ) { if ( abs ( $ dob1 -> julianDay ( ) - $ dob2 -> julianDay ( ) ) < 2 && $ dob1 -> minimumDate ( ) -> day > 0 && $ dob2 -> minimumDate ( ) -> day > 0 ) { // Exclude BEF, AFT, etc. return I18N :: translate ( 'twin brother' ) ; } if ( $ dob1 -> maximumJulianDay ( ) < $ dob2 -> minimumJulianDay ( ) ) { return I18N :: translate ( 'younger brother' ) ; } if ( $ dob1 -> minimumJulianDay ( ) > $ dob2 -> maximumJulianDay ( ) ) { return I18N :: translate ( 'elder brother' ) ; } } } return I18N :: translate ( 'brother' ) ; case 'sis' : if ( $ person1 && $ person2 ) { $ dob1 = $ person1 -> getBirthDate ( ) ; $ dob2 = $ person2 -> getBirthDate ( ) ; if ( $ dob1 -> isOK ( ) && $ dob2 -> isOK ( ) ) { if ( abs ( $ dob1 -> julianDay ( ) - $ dob2 -> julianDay ( ) ) < 2 && $ dob1 -> minimumDate ( ) -> day > 0 && $ dob2 -> minimumDate ( ) -> day > 0 ) { // Exclude BEF, AFT, etc. return I18N :: translate ( 'twin sister' ) ; } if ( $ dob1 -> maximumJulianDay ( ) < $ dob2 -> minimumJulianDay ( ) ) { return I18N :: translate ( 'younger sister' ) ; } if ( $ dob1 -> minimumJulianDay ( ) > $ dob2 -> maximumJulianDay ( ) ) { return I18N :: translate ( 'elder sister' ) ; } } } return I18N :: translate ( 'sister' ) ; case 'sib' : if ( $ person1 && $ person2 ) { $ dob1 = $ person1 -> getBirthDate ( ) ; $ dob2 = $ person2 -> getBirthDate ( ) ; if ( $ dob1 -> isOK ( ) && $ dob2 -> isOK ( ) ) { if ( abs ( $ dob1 -> julianDay ( ) - $ dob2 -> julianDay ( ) ) < 2 && $ dob1 -> minimumDate ( ) -> day > 0 && $ dob2 -> minimumDate ( ) -> day > 0 ) { // Exclude BEF, AFT, etc. return I18N :: translate ( 'twin sibling' ) ; } if ( $ dob1 -> maximumJulianDay ( ) < $ dob2 -> minimumJulianDay ( ) ) { return I18N :: translate ( 'younger sibling' ) ; } if ( $ dob1 -> minimumJulianDay ( ) > $ dob2 -> maximumJulianDay ( ) ) { return I18N :: translate ( 'elder sibling' ) ; } } } return I18N :: translate ( 'sibling' ) ; // Level Two relationships case 'brochi' : return I18N :: translateContext ( 'brother’s child',  ' ephew/niece');   case 'brodau' : return I18N :: translateContext ( 'brother’s daughter',  ' iece');   case 'broson' : return I18N :: translateContext ( 'brother’s son',  ' ephew');   case 'browif' : return I18N :: translateContext ( 'brother’s wife',  ' ister-in-law');   case 'chichi' : return I18N :: translateContext ( 'child’s child',  ' randchild');   case 'chidau' : return I18N :: translateContext ( 'child’s daughter',  ' randdaughter');   case 'chihus' : return I18N :: translateContext ( 'child’s husband',  ' on-in-law');   case 'chison' : return I18N :: translateContext ( 'child’s son',  ' randson');   case 'chispo' : return I18N :: translateContext ( 'child’s spouse',  ' on/daughter-in-law');   case 'chiwif' : return I18N :: translateContext ( 'child’s wife',  ' aughter-in-law');   case 'dauchi' : return I18N :: translateContext ( 'daughter’s child',  ' randchild');   case 'daudau' : return I18N :: translateContext ( 'daughter’s daughter',  ' randdaughter');   case 'dauhus' : return I18N :: translateContext ( 'daughter’s husband',  ' on-in-law');   case 'dauson' : return I18N :: translateContext ( 'daughter’s son',  ' randson');   case 'fatbro' : return I18N :: translateContext ( 'father’s brother',  ' ncle');   case 'fatchi' : return I18N :: translateContext ( 'father’s child',  ' alf-sibling');   case 'fatdau' : return I18N :: translateContext ( 'father’s daughter',  ' alf-sister');   case 'fatfat' : return I18N :: translateContext ( 'father’s father',  ' aternal grandfather');   case 'fatmot' : return I18N :: translateContext ( 'father’s mother',  ' aternal grandmother');   case 'fatpar' : return I18N :: translateContext ( 'father’s parent',  ' aternal grandparent');   case 'fatsib' : return I18N :: translateContext ( 'father’s sibling',  ' unt/uncle');   case 'fatsis' : return I18N :: translateContext ( 'father’s sister',  ' unt');   case 'fatson' : return I18N :: translateContext ( 'father’s son',  ' alf-brother');   case 'fatwif' : return I18N :: translateContext ( 'father’s wife',  ' tep-mother');   case 'husbro' : return I18N :: translateContext ( 'husband’s brother',  ' rother-in-law');   case 'huschi' : return I18N :: translateContext ( 'husband’s child',  ' tep-child');   case 'husdau' : return I18N :: translateContext ( 'husband’s daughter',  ' tep-daughter');   case 'husfat' : return I18N :: translateContext ( 'husband’s father',  ' ather-in-law');   case 'husmot' : return I18N :: translateContext ( 'husband’s mother',  ' other-in-law');   case 'hussib' : return I18N :: translateContext ( 'husband’s sibling',  ' rother/sister-in-law');   case 'hussis' : return I18N :: translateContext ( 'husband’s sister',  ' ister-in-law');   case 'husson' : return I18N :: translateContext ( 'husband’s son',  ' tep-son');   case 'motbro' : return I18N :: translateContext ( 'mother’s brother',  ' ncle');   case 'motchi' : return I18N :: translateContext ( 'mother’s child',  ' alf-sibling');   case 'motdau' : return I18N :: translateContext ( 'mother’s daughter',  ' alf-sister');   case 'motfat' : return I18N :: translateContext ( 'mother’s father',  ' aternal grandfather');   case 'mothus' : return I18N :: translateContext ( 'mother’s husband',  ' tep-father');   case 'motmot' : return I18N :: translateContext ( 'mother’s mother',  ' aternal grandmother');   case 'motpar' : return I18N :: translateContext ( 'mother’s parent',  ' aternal grandparent');   case 'motsib' : return I18N :: translateContext ( 'mother’s sibling',  ' unt/uncle');   case 'motsis' : return I18N :: translateContext ( 'mother’s sister',  ' unt');   case 'motson' : return I18N :: translateContext ( 'mother’s son',  ' alf-brother');   case 'parbro' : return I18N :: translateContext ( 'parent’s brother',  ' ncle');   case 'parchi' : return I18N :: translateContext ( 'parent’s child',  ' alf-sibling');   case 'pardau' : return I18N :: translateContext ( 'parent’s daughter',  ' alf-sister');   case 'parfat' : return I18N :: translateContext ( 'parent’s father',  ' randfather');   case 'parmot' : return I18N :: translateContext ( 'parent’s mother',  ' randmother');   case 'parpar' : return I18N :: translateContext ( 'parent’s parent',  ' randparent');   case 'parsib' : return I18N :: translateContext ( 'parent’s sibling',  ' unt/uncle');   case 'parsis' : return I18N :: translateContext ( 'parent’s sister',  ' unt');   case 'parson' : return I18N :: translateContext ( 'parent’s son',  ' alf-brother');   case 'parspo' : return I18N :: translateContext ( 'parent’s spouse',  ' tep-parent');   case 'sibchi' : return I18N :: translateContext ( 'sibling’s child',  ' ephew/niece');   case 'sibdau' : return I18N :: translateContext ( 'sibling’s daughter',  ' iece');   case 'sibson' : return I18N :: translateContext ( 'sibling’s son',  ' ephew');   case 'sibspo' : return I18N :: translateContext ( 'sibling’s spouse',  ' rother/sister-in-law');   case 'sischi' : return I18N :: translateContext ( 'sister’s child',  ' ephew/niece');   case 'sisdau' : return I18N :: translateContext ( 'sister’s daughter',  ' iece');   case 'sishus' : return I18N :: translateContext ( 'sister’s husband',  ' rother-in-law');   case 'sisson' : return I18N :: translateContext ( 'sister’s son',  ' ephew');   case 'sonchi' : return I18N :: translateContext ( 'son’s child',  ' randchild');   case 'sondau' : return I18N :: translateContext ( 'son’s daughter',  ' randdaughter');   case 'sonson' : return I18N :: translateContext ( 'son’s son',  ' randson');   case 'sonwif' : return I18N :: translateContext ( 'son’s wife',  ' aughter-in-law');   case 'spobro' : return I18N :: translateContext ( 'spouse’s brother',  ' rother-in-law');   case 'spochi' : return I18N :: translateContext ( 'spouse’s child',  ' tep-child');   case 'spodau' : return I18N :: translateContext ( 'spouse’s daughter',  ' tep-daughter');   case 'spofat' : return I18N :: translateContext ( 'spouse’s father',  ' ather-in-law');   case 'spomot' : return I18N :: translateContext ( 'spouse’s mother',  ' other-in-law');   case 'sposis' : return I18N :: translateContext ( 'spouse’s sister',  ' ister-in-law');   case 'sposon' : return I18N :: translateContext ( 'spouse’s son',  ' tep-son');   case 'spopar' : return I18N :: translateContext ( 'spouse’s parent',  ' other/father-in-law');   case 'sposib' : return I18N :: translateContext ( 'spouse’s sibling',  ' rother/sister-in-law');   case 'wifbro' : return I18N :: translateContext ( 'wife’s brother',  ' rother-in-law');   case 'wifchi' : return I18N :: translateContext ( 'wife’s child',  ' tep-child');   case 'wifdau' : return I18N :: translateContext ( 'wife’s daughter',  ' tep-daughter');   case 'wiffat' : return I18N :: translateContext ( 'wife’s father',  ' ather-in-law');   case 'wifmot' : return I18N :: translateContext ( 'wife’s mother',  ' other-in-law');   case 'wifsib' : return I18N :: translateContext ( 'wife’s sibling',  ' rother/sister-in-law');   case 'wifsis' : return I18N :: translateContext ( 'wife’s sister',  ' ister-in-law');   case 'wifson' : return I18N :: translateContext ( 'wife’s son',  ' tep-son');   // Level Three relationships case 'brochichi' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s child’s child', 'gre a -nephew/niece');   } return I18N :: translateContext ( '(a woman’s) brother’s child’s child', 'gre a -nephew/niece');   case 'brochidau' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s child’s daughter', 'gre a -niece');   } return I18N :: translateContext ( '(a woman’s) brother’s child’s daughter', 'gre a -niece');   case 'brochison' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s child’s son', 'gre a -nephew');   } return I18N :: translateContext ( '(a woman’s) brother’s child’s son', 'gre a -nephew');   case 'brodauchi' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s daughter’s child', 'gre a -nephew/niece');   } return I18N :: translateContext ( '(a woman’s) brother’s daughter’s child', 'gre a -nephew/niece');   case 'brodaudau' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s daughter’s daughter', 'gre a -niece');   } return I18N :: translateContext ( '(a woman’s) brother’s daughter’s daughter', 'gre a -niece');   case 'brodauhus' : return I18N :: translateContext ( 'brother’s daughter’s husband', 'n e hew-in-law');   case 'brodauson' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s daughter’s son', 'gre a -nephew');   } return I18N :: translateContext ( '(a woman’s) brother’s daughter’s son', 'gre a -nephew');   case 'brosonchi' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s son’s child', 'gre a -nephew/niece');   } return I18N :: translateContext ( '(a woman’s) brother’s son’s child', 'gre a -nephew/niece');   case 'brosondau' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s son’s daughter', 'gre a -niece');   } return I18N :: translateContext ( '(a woman’s) brother’s son’s daughter', 'gre a -niece');   case 'brosonson' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s son’s son', 'gre a -nephew');   } return I18N :: translateContext ( '(a woman’s) brother’s son’s son', 'gre a -nephew');   case 'brosonwif' : return I18N :: translateContext ( 'brother’s son’s wife', 'n i ce-in-law');   case 'browifbro' : return I18N :: translateContext ( 'brother’s wife’s brother', 'b r ther-in-law');   case 'browifsib' : return I18N :: translateContext ( 'brother’s wife’s sibling', 'b r ther/sister-in-law');   case 'browifsis' : return I18N :: translateContext ( 'brother’s wife’s sister', 's i ter-in-law');   case 'chichichi' : return I18N :: translateContext ( 'child’s child’s child', 'g r at-grandchild');   case 'chichidau' : return I18N :: translateContext ( 'child’s child’s daughter', 'g r at-granddaughter');   case 'chichison' : return I18N :: translateContext ( 'child’s child’s son', 'g r at-grandson');   case 'chidauchi' : return I18N :: translateContext ( 'child’s daughter’s child', 'g r at-grandchild');   case 'chidaudau' : return I18N :: translateContext ( 'child’s daughter’s daughter', 'g r at-granddaughter');   case 'chidauhus' : return I18N :: translateContext ( 'child’s daughter’s husband', 'g r nddaughter’s husband');   case 'chidauson' : return I18N :: translateContext ( 'child’s daughter’s son', 'g r at-grandson');   case 'chisonchi' : return I18N :: translateContext ( 'child’s son’s child', 'g r at-grandchild');   case 'chisondau' : return I18N :: translateContext ( 'child’s son’s daughter', 'g r at-granddaughter');   case 'chisonson' : return I18N :: translateContext ( 'child’s son’s son', 'g r at-grandson');   case 'chisonwif' : return I18N :: translateContext ( 'child’s son’s wife', 'g r ndson’s wife');   case 'dauchichi' : return I18N :: translateContext ( 'daughter’s child’s child', 'g r at-grandchild');   case 'dauchidau' : return I18N :: translateContext ( 'daughter’s child’s daughter', 'g r at-granddaughter');   case 'dauchison' : return I18N :: translateContext ( 'daughter’s child’s son', 'g r at-grandson');   case 'daudauchi' : return I18N :: translateContext ( 'daughter’s daughter’s child', 'g r at-grandchild');   case 'daudaudau' : return I18N :: translateContext ( 'daughter’s daughter’s daughter', 'g r at-granddaughter');   case 'daudauhus' : return I18N :: translateContext ( 'daughter’s daughter’s husband', 'g r nddaughter’s husband');   case 'daudauson' : return I18N :: translateContext ( 'daughter’s daughter’s son', 'g r at-grandson');   case 'dauhusfat' : return I18N :: translateContext ( 'daughter’s husband’s father', 's o -in-law’s father');   case 'dauhusmot' : return I18N :: translateContext ( 'daughter’s husband’s mother', 's o -in-law’s mother');   case 'dauhuspar' : return I18N :: translateContext ( 'daughter’s husband’s parent', 's o -in-law’s parent');   case 'dausonchi' : return I18N :: translateContext ( 'daughter’s son’s child', 'g r at-grandchild');   case 'dausondau' : return I18N :: translateContext ( 'daughter’s son’s daughter', 'g r at-granddaughter');   case 'dausonson' : return I18N :: translateContext ( 'daughter’s son’s son', 'g r at-grandson');   case 'dausonwif' : return I18N :: translateContext ( 'daughter’s son’s wife', 'g r ndson’s wife');   case 'fatbrochi' : return I18N :: translateContext ( 'father’s brother’s child', 'f i st cousin');   case 'fatbrodau' : return I18N :: translateContext ( 'father’s brother’s daughter', 'f i st cousin');   case 'fatbroson' : return I18N :: translateContext ( 'father’s brother’s son', 'f i st cousin');   case 'fatbrowif' : return I18N :: translateContext ( 'father’s brother’s wife', 'a u t');   case 'fatfatbro' : return I18N :: translateContext ( 'father’s father’s brother', 'g r at-uncle');   case 'fatfatfat' : return I18N :: translateContext ( 'father’s father’s father', 'g r at-grandfather');   case 'fatfatmot' : return I18N :: translateContext ( 'father’s father’s mother', 'g r at-grandmother');   case 'fatfatpar' : return I18N :: translateContext ( 'father’s father’s parent', 'g r at-grandparent');   case 'fatfatsib' : return I18N :: translateContext ( 'father’s father’s sibling', 'g r at-aunt/uncle');   case 'fatfatsis' : return I18N :: translateContext ( 'father’s father’s sister', 'g r at-aunt');   case 'fatmotbro' : return I18N :: translateContext ( 'father’s mother’s brother', 'g r at-uncle');   case 'fatmotfat' : return I18N :: translateContext ( 'father’s mother’s father', 'g r at-grandfather');   case 'fatmotmot' : return I18N :: translateContext ( 'father’s mother’s mother', 'g r at-grandmother');   case 'fatmotpar' : return I18N :: translateContext ( 'father’s mother’s parent', 'g r at-grandparent');   case 'fatmotsib' : return I18N :: translateContext ( 'father’s mother’s sibling', 'g r at-aunt/uncle');   case 'fatmotsis' : return I18N :: translateContext ( 'father’s mother’s sister', 'g r at-aunt');   case 'fatparbro' : return I18N :: translateContext ( 'father’s parent’s brother', 'g r at-uncle');   case 'fatparfat' : return I18N :: translateContext ( 'father’s parent’s father', 'g r at-grandfather');   case 'fatparmot' : return I18N :: translateContext ( 'father’s parent’s mother', 'g r at-grandmother');   case 'fatparpar' : return I18N :: translateContext ( 'father’s parent’s parent', 'g r at-grandparent');   case 'fatparsib' : return I18N :: translateContext ( 'father’s parent’s sibling', 'g r at-aunt/uncle');   case 'fatparsis' : return I18N :: translateContext ( 'father’s parent’s sister', 'g r at-aunt');   case 'fatsischi' : return I18N :: translateContext ( 'father’s sister’s child', 'f i st cousin');   case 'fatsisdau' : return I18N :: translateContext ( 'father’s sister’s daughter', 'f i st cousin');   case 'fatsishus' : return I18N :: translateContext ( 'father’s sister’s husband', 'u n le');   case 'fatsisson' : return I18N :: translateContext ( 'father’s sister’s son', 'f i st cousin');   case 'fatwifchi' : return I18N :: translateContext ( 'father’s wife’s child', 's t p-sibling');   case 'fatwifdau' : return I18N :: translateContext ( 'father’s wife’s daughter', 's t p-sister');   case 'fatwifson' : return I18N :: translateContext ( 'father’s wife’s son', 's t p-brother');   case 'husbrowif' : return I18N :: translateContext ( 'husband’s brother’s wife', 's i ter-in-law');   case 'hussishus' : return I18N :: translateContext ( 'husband’s sister’s husband', 'b r ther-in-law');   case 'hussibchi' : return I18N :: translateContext ( 'husband’s sibling’s child', 'n e hew/niece');   case 'hussischi' : return I18N :: translateContext ( 'husband’s sister’s child', 'n e hew/niece');   case 'husbrochi' : return I18N :: translateContext ( 'husband’s brother’s child', 'n e hew/niece');   case 'hussibdau' : return I18N :: translateContext ( 'husband’s sibling’s daughter', 'n i ce');   case 'hussisdau' : return I18N :: translateContext ( 'husband’s sister’s daughter', 'n i ce');   case 'husbrodau' : return I18N :: translateContext ( 'husband’s brother’s daughter', 'n i ce');   case 'hussibson' : return I18N :: translateContext ( 'husband’s sibling’s son', 'n e hew');   case 'hussisson' : return I18N :: translateContext ( 'husband’s sister’s son', 'n e hew');   case 'husbroson' : return I18N :: translateContext ( 'husband’s brother’s son', 'n e hew');   case 'motbrochi' : return I18N :: translateContext ( 'mother’s brother’s child', 'f i st cousin');   case 'motbrodau' : return I18N :: translateContext ( 'mother’s brother’s daughter', 'f i st cousin');   case 'motbroson' : return I18N :: translateContext ( 'mother’s brother’s son', 'f i st cousin');   case 'motbrowif' : return I18N :: translateContext ( 'mother’s brother’s wife', 'a u t');   case 'motfatbro' : return I18N :: translateContext ( 'mother’s father’s brother', 'g r at-uncle');   case 'motfatfat' : return I18N :: translateContext ( 'mother’s father’s father', 'g r at-grandfather');   case 'motfatmot' : return I18N :: translateContext ( 'mother’s father’s mother', 'g r at-grandmother');   case 'motfatpar' : return I18N :: translateContext ( 'mother’s father’s parent', 'g r at-grandparent');   case 'motfatsib' : return I18N :: translateContext ( 'mother’s father’s sibling', 'g r at-aunt/uncle');   case 'motfatsis' : return I18N :: translateContext ( 'mother’s father’s sister', 'g r at-aunt');   case 'mothuschi' : return I18N :: translateContext ( 'mother’s husband’s child', 's t p-sibling');   case 'mothusdau' : return I18N :: translateContext ( 'mother’s husband’s daughter', 's t p-sister');   case 'mothusson' : return I18N :: translateContext ( 'mother’s husband’s son', 's t p-brother');   case 'motmotbro' : return I18N :: translateContext ( 'mother’s mother’s brother', 'g r at-uncle');   case 'motmotfat' : return I18N :: translateContext ( 'mother’s mother’s father', 'g r at-grandfather');   case 'motmotmot' : return I18N :: translateContext ( 'mother’s mother’s mother', 'g r at-grandmother');   case 'motmotpar' : return I18N :: translateContext ( 'mother’s mother’s parent', 'g r at-grandparent');   case 'motmotsib' : return I18N :: translateContext ( 'mother’s mother’s sibling', 'g r at-aunt/uncle');   case 'motmotsis' : return I18N :: translateContext ( 'mother’s mother’s sister', 'g r at-aunt');   case 'motparbro' : return I18N :: translateContext ( 'mother’s parent’s brother', 'g r at-uncle');   case 'motparfat' : return I18N :: translateContext ( 'mother’s parent’s father', 'g r at-grandfather');   case 'motparmot' : return I18N :: translateContext ( 'mother’s parent’s mother', 'g r at-grandmother');   case 'motparpar' : return I18N :: translateContext ( 'mother’s parent’s parent', 'g r at-grandparent');   case 'motparsib' : return I18N :: translateContext ( 'mother’s parent’s sibling', 'g r at-aunt/uncle');   case 'motparsis' : return I18N :: translateContext ( 'mother’s parent’s sister', 'g r at-aunt');   case 'motsischi' : return I18N :: translateContext ( 'mother’s sister’s child', 'f i st cousin');   case 'motsisdau' : return I18N :: translateContext ( 'mother’s sister’s daughter', 'f i st cousin');   case 'motsishus' : return I18N :: translateContext ( 'mother’s sister’s husband', 'u n le');   case 'motsisson' : return I18N :: translateContext ( 'mother’s sister’s son', 'f i st cousin');   case 'parbrowif' : return I18N :: translateContext ( 'parent’s brother’s wife', 'a u t');   case 'parfatbro' : return I18N :: translateContext ( 'parent’s father’s brother', 'g r at-uncle');   case 'parfatfat' : return I18N :: translateContext ( 'parent’s father’s father', 'g r at-grandfather');   case 'parfatmot' : return I18N :: translateContext ( 'parent’s father’s mother', 'g r at-grandmother');   case 'parfatpar' : return I18N :: translateContext ( 'parent’s father’s parent', 'g r at-grandparent');   case 'parfatsib' : return I18N :: translateContext ( 'parent’s father’s sibling', 'g r at-aunt/uncle');   case 'parfatsis' : return I18N :: translateContext ( 'parent’s father’s sister', 'g r at-aunt');   case 'parmotbro' : return I18N :: translateContext ( 'parent’s mother’s brother', 'g r at-uncle');   case 'parmotfat' : return I18N :: translateContext ( 'parent’s mother’s father', 'g r at-grandfather');   case 'parmotmot' : return I18N :: translateContext ( 'parent’s mother’s mother', 'g r at-grandmother');   case 'parmotpar' : return I18N :: translateContext ( 'parent’s mother’s parent', 'g r at-grandparent');   case 'parmotsib' : return I18N :: translateContext ( 'parent’s mother’s sibling', 'g r at-aunt/uncle');   case 'parmotsis' : return I18N :: translateContext ( 'parent’s mother’s sister', 'g r at-aunt');   case 'parparbro' : return I18N :: translateContext ( 'parent’s parent’s brother', 'g r at-uncle');   case 'parparfat' : return I18N :: translateContext ( 'parent’s parent’s father', 'g r at-grandfather');   case 'parparmot' : return I18N :: translateContext ( 'parent’s parent’s mother', 'g r at-grandmother');   case 'parparpar' : return I18N :: translateContext ( 'parent’s parent’s parent', 'g r at-grandparent');   case 'parparsib' : return I18N :: translateContext ( 'parent’s parent’s sibling', 'g r at-aunt/uncle');   case 'parparsis' : return I18N :: translateContext ( 'parent’s parent’s sister', 'g r at-aunt');   case 'parsishus' : return I18N :: translateContext ( 'parent’s sister’s husband', 'u n le');   case 'parspochi' : return I18N :: translateContext ( 'parent’s spouse’s child', 's t p-sibling');   case 'parspodau' : return I18N :: translateContext ( 'parent’s spouse’s daughter', 's t p-sister');   case 'parsposon' : return I18N :: translateContext ( 'parent’s spouse’s son', 's t p-brother');   case 'sibchichi' : return I18N :: translateContext ( 'sibling’s child’s child', 'g r at-nephew/niece');   case 'sibchidau' : return I18N :: translateContext ( 'sibling’s child’s daughter', 'g r at-niece');   case 'sibchison' : return I18N :: translateContext ( 'sibling’s child’s son', 'g r at-nephew');   case 'sibdauchi' : return I18N :: translateContext ( 'sibling’s daughter’s child', 'g r at-nephew/niece');   case 'sibdaudau' : return I18N :: translateContext ( 'sibling’s daughter’s daughter', 'g r at-niece');   case 'sibdauhus' : return I18N :: translateContext ( 'sibling’s daughter’s husband', 'n e hew-in-law');   case 'sibdauson' : return I18N :: translateContext ( 'sibling’s daughter’s son', 'g r at-nephew');   case 'sibsonchi' : return I18N :: translateContext ( 'sibling’s son’s child', 'g r at-nephew/niece');   case 'sibsondau' : return I18N :: translateContext ( 'sibling’s son’s daughter', 'g r at-niece');   case 'sibsonson' : return I18N :: translateContext ( 'sibling’s son’s son', 'g r at-nephew');   case 'sibsonwif' : return I18N :: translateContext ( 'sibling’s son’s wife', 'n i ce-in-law');   case 'sischichi' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s child’s child', 'gre a -nephew/niece');   } return I18N :: translateContext ( '(a woman’s) sister’s child’s child', 'gre a -nephew/niece');   case 'sischidau' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s child’s daughter', 'gre a -niece');   } return I18N :: translateContext ( '(a woman’s) sister’s child’s daughter', 'gre a -niece');   case 'sischison' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s child’s son', 'gre a -nephew');   } return I18N :: translateContext ( '(a woman’s) sister’s child’s son', 'gre a -nephew');   case 'sisdauchi' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s daughter’s child', 'gre a -nephew/niece');   } return I18N :: translateContext ( '(a woman’s) sister’s daughter’s child', 'gre a -nephew/niece');   case 'sisdaudau' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s daughter’s daughter', 'gre a -niece');   } return I18N :: translateContext ( '(a woman’s) sister’s daughter’s daughter', 'gre a -niece');   case 'sisdauhus' : return I18N :: translateContext ( 'sisters’s daughter’s husband', 'n e hew-in-law');   case 'sisdauson' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s daughter’s son', 'gre a -nephew');   } return I18N :: translateContext ( '(a woman’s) sister’s daughter’s son', 'gre a -nephew');   case 'sishusbro' : return I18N :: translateContext ( 'sister’s husband’s brother', 'b r ther-in-law');   case 'sishussib' : return I18N :: translateContext ( 'sister’s husband’s sibling', 'b r ther/sister-in-law');   case 'sishussis' : return I18N :: translateContext ( 'sister’s husband’s sister', 's i ter-in-law');   case 'sissonchi' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s son’s child', 'gre a -nephew/niece');   } return I18N :: translateContext ( '(a woman’s) sister’s son’s child', 'gre a -nephew/niece');   case 'sissondau' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s son’s daughter', 'gre a -niece');   } return I18N :: translateContext ( '(a woman’s) sister’s son’s daughter', 'gre a -niece');   case 'sissonson' : if ( $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s son’s son', 'gre a -nephew');   } return I18N :: translateContext ( '(a woman’s) sister’s son’s son', 'gre a -nephew');   case 'sissonwif' : return I18N :: translateContext ( 'sisters’s son’s wife', 'n i ce-in-law');   case 'sonchichi' : return I18N :: translateContext ( 'son’s child’s child', 'g r at-grandchild');   case 'sonchidau' : return I18N :: translateContext ( 'son’s child’s daughter', 'g r at-granddaughter');   case 'sonchison' : return I18N :: translateContext ( 'son’s child’s son', 'g r at-grandson');   case 'sondauchi' : return I18N :: translateContext ( 'son’s daughter’s child', 'g r at-grandchild');   case 'sondaudau' : return I18N :: translateContext ( 'son’s daughter’s daughter', 'g r at-granddaughter');   case 'sondauhus' : return I18N :: translateContext ( 'son’s daughter’s husband', 'g r nddaughter’s husband');   case 'sondauson' : return I18N :: translateContext ( 'son’s daughter’s son', 'g r at-grandson');   case 'sonsonchi' : return I18N :: translateContext ( 'son’s son’s child', 'g r at-grandchild');   case 'sonsondau' : return I18N :: translateContext ( 'son’s son’s daughter', 'g r at-granddaughter');   case 'sonsonson' : return I18N :: translateContext ( 'son’s son’s son', 'g r at-grandson');   case 'sonsonwif' : return I18N :: translateContext ( 'son’s son’s wife', 'g r ndson’s wife');   case 'sonwiffat' : return I18N :: translateContext ( 'son’s wife’s father', 'd a ghter-in-law’s father');   case 'sonwifmot' : return I18N :: translateContext ( 'son’s wife’s mother', 'd a ghter-in-law’s mother');   case 'sonwifpar' : return I18N :: translateContext ( 'son’s wife’s parent', 'd a ghter-in-law’s parent');   case 'wifbrowif' : return I18N :: translateContext ( 'wife’s brother’s wife', 's i ter-in-law');   case 'wifsishus' : return I18N :: translateContext ( 'wife’s sister’s husband', 'b r ther-in-law');   case 'wifsibchi' : return I18N :: translateContext ( 'wife’s sibling’s child', 'n e hew/niece');   case 'wifsischi' : return I18N :: translateContext ( 'wife’s sister’s child', 'n e hew/niece');   case 'wifbrochi' : return I18N :: translateContext ( 'wife’s brother’s child', 'n e hew/niece');   case 'wifsibdau' : return I18N :: translateContext ( 'wife’s sibling’s daughter', 'n i ce');   case 'wifsisdau' : return I18N :: translateContext ( 'wife’s sister’s daughter', 'n i ce');   case 'wifbrodau' : return I18N :: translateContext ( 'wife’s brother’s daughter', 'n i ce');   case 'wifsibson' : return I18N :: translateContext ( 'wife’s sibling’s son', 'n e hew');   case 'wifsisson' : return I18N :: translateContext ( 'wife’s sister’s son', 'n e hew');   case 'wifbroson' : return I18N :: translateContext ( 'wife’s brother’s son', 'n e hew');   // Some “special case” level four relationships that have specific names in certain languages case 'fatfatbrowif' : return I18N :: translateContext ( 'father’s father’s brother’s wife', 'gre a -aunt');   case 'fatfatsibspo' : return I18N :: translateContext ( 'father’s father’s sibling’s spouse', 'gre a -aunt/uncle');   case 'fatfatsishus' : return I18N :: translateContext ( 'father’s father’s sister’s husband', 'gre a -uncle');   case 'fatmotbrowif' : return I18N :: translateContext ( 'father’s mother’s brother’s wife', 'gre a -aunt');   case 'fatmotsibspo' : return I18N :: translateContext ( 'father’s mother’s sibling’s spouse', 'gre a -aunt/uncle');   case 'fatmotsishus' : return I18N :: translateContext ( 'father’s mother’s sister’s husband', 'gre a -uncle');   case 'fatparbrowif' : return I18N :: translateContext ( 'father’s parent’s brother’s wife', 'gre a -aunt');   case 'fatparsibspo' : return I18N :: translateContext ( 'father’s parent’s sibling’s spouse', 'gre a -aunt/uncle');   case 'fatparsishus' : return I18N :: translateContext ( 'father’s parent’s sister’s husband', 'gre a -uncle');   case 'motfatbrowif' : return I18N :: translateContext ( 'mother’s father’s brother’s wife', 'gre a -aunt');   case 'motfatsibspo' : return I18N :: translateContext ( 'mother’s father’s sibling’s spouse', 'gre a -aunt/uncle');   case 'motfatsishus' : return I18N :: translateContext ( 'mother’s father’s sister’s husband', 'gre a -uncle');   case 'motmotbrowif' : return I18N :: translateContext ( 'mother’s mother’s brother’s wife', 'gre a -aunt');   case 'motmotsibspo' : return I18N :: translateContext ( 'mother’s mother’s sibling’s spouse', 'gre a -aunt/uncle');   case 'motmotsishus' : return I18N :: translateContext ( 'mother’s mother’s sister’s husband', 'gre a -uncle');   case 'motparbrowif' : return I18N :: translateContext ( 'mother’s parent’s brother’s wife', 'gre a -aunt');   case 'motparsibspo' : return I18N :: translateContext ( 'mother’s parent’s sibling’s spouse', 'gre a -aunt/uncle');   case 'motparsishus' : return I18N :: translateContext ( 'mother’s parent’s sister’s husband', 'gre a -uncle');   case 'parfatbrowif' : return I18N :: translateContext ( 'parent’s father’s brother’s wife', 'gre a -aunt');   case 'parfatsibspo' : return I18N :: translateContext ( 'parent’s father’s sibling’s spouse', 'gre a -aunt/uncle');   case 'parfatsishus' : return I18N :: translateContext ( 'parent’s father’s sister’s husband', 'gre a -uncle');   case 'parmotbrowif' : return I18N :: translateContext ( 'parent’s mother’s brother’s wife', 'gre a -aunt');   case 'parmotsibspo' : return I18N :: translateContext ( 'parent’s mother’s sibling’s spouse', 'gre a -aunt/uncle');   case 'parmotsishus' : return I18N :: translateContext ( 'parent’s mother’s sister’s husband', 'gre a -uncle');   case 'parparbrowif' : return I18N :: translateContext ( 'parent’s parent’s brother’s wife', 'gre a -aunt');   case 'parparsibspo' : return I18N :: translateContext ( 'parent’s parent’s sibling’s spouse', 'gre a -aunt/uncle');   case 'parparsishus' : return I18N :: translateContext ( 'parent’s parent’s sister’s husband', 'gre a -uncle');   case 'fatfatbrodau' : return I18N :: translateContext ( 'father’s father’s brother’s daughter', 'fir s  cousin once removed ascending');   case 'fatfatbroson' : return I18N :: translateContext ( 'father’s father’s brother’s son', 'fir s  cousin once removed ascending');   case 'fatfatbrochi' : return I18N :: translateContext ( 'father’s father’s brother’s child', 'fir s  cousin once removed ascending');   case 'fatfatsisdau' : return I18N :: translateContext ( 'father’s father’s sister’s daughter', 'fir s  cousin once removed ascending');   case 'fatfatsisson' : return I18N :: translateContext ( 'father’s father’s sister’s son', 'fir s  cousin once removed ascending');   case 'fatfatsischi' : return I18N :: translateContext ( 'father’s father’s sister’s child', 'fir s  cousin once removed ascending');   case 'fatmotbrodau' : return I18N :: translateContext ( 'father’s mother’s brother’s daughter', 'fir s  cousin once removed ascending');   case 'fatmotbroson' : return I18N :: translateContext ( 'father’s mother’s brother’s son', 'fir s  cousin once removed ascending');   case 'fatmotbrochi' : return I18N :: translateContext ( 'father’s mother’s brother’s child', 'fir s  cousin once removed ascending');   case 'fatmotsisdau' : return I18N :: translateContext ( 'father’s mother’s sister’s daughter', 'fir s  cousin once removed ascending');   case 'fatmotsisson' : return I18N :: translateContext ( 'father’s mother’s sister’s son', 'fir s  cousin once removed ascending');   case 'fatmotsischi' : return I18N :: translateContext ( 'father’s mother’s sister’s child', 'fir s  cousin once removed ascending');   case 'motfatbrodau' : return I18N :: translateContext ( 'mother’s father’s brother’s daughter', 'fir s  cousin once removed ascending');   case 'motfatbroson' : return I18N :: translateContext ( 'mother’s father’s brother’s son', 'fir s  cousin once removed ascending');   case 'motfatbrochi' : return I18N :: translateContext ( 'mother’s father’s brother’s child', 'fir s  cousin once removed ascending');   case 'motfatsisdau' : return I18N :: translateContext ( 'mother’s father’s sister’s daughter', 'fir s  cousin once removed ascending');   case 'motfatsisson' : return I18N :: translateContext ( 'mother’s father’s sister’s son', 'fir s  cousin once removed ascending');   case 'motfatsischi' : return I18N :: translateContext ( 'mother’s father’s sister’s child', 'fir s  cousin once removed ascending');   case 'motmotbrodau' : return I18N :: translateContext ( 'mother’s mother’s brother’s daughter', 'fir s  cousin once removed ascending');   case 'motmotbroson' : return I18N :: translateContext ( 'mother’s mother’s brother’s son', 'fir s  cousin once removed ascending');   case 'motmotbrochi' : return I18N :: translateContext ( 'mother’s mother’s brother’s child', 'fir s  cousin once removed ascending');   case 'motmotsisdau' : return I18N :: translateContext ( 'mother’s mother’s sister’s daughter', 'fir s  cousin once removed ascending');   case 'motmotsisson' : return I18N :: translateContext ( 'mother’s mother’s sister’s son', 'fir s  cousin once removed ascending');   case 'motmotsischi' : return I18N :: translateContext ( 'mother’s mother’s sister’s child', 'fir s  cousin once removed ascending');   } // Some “special case” level five relationships that have specific names in certain languages if ( preg_match ( '/^(mot|fat|par)fatbro(son|dau|chi)dau$/' , $ path ) ) { return I18N :: translateContext ( 'grandfather’s brother’s granddaughter', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)fatbro(son|dau|chi)son$/' , $ path ) ) { return I18N :: translateContext ( 'grandfather’s brother’s grandson', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)fatbro(son|dau|chi)chi$/' , $ path ) ) { return I18N :: translateContext ( 'grandfather’s brother’s grandchild', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)fatsis(son|dau|chi)dau$/' , $ path ) ) { return I18N :: translateContext ( 'grandfather’s sister’s granddaughter', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)fatsis(son|dau|chi)son$/' , $ path ) ) { return I18N :: translateContext ( 'grandfather’s sister’s grandson', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)fatsis(son|dau|chi)chi$/' , $ path ) ) { return I18N :: translateContext ( 'grandfather’s sister’s grandchild', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)fatsib(son|dau|chi)dau$/' , $ path ) ) { return I18N :: translateContext ( 'grandfather’s sibling’s granddaughter', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)fatsib(son|dau|chi)son$/' , $ path ) ) { return I18N :: translateContext ( 'grandfather’s sibling’s grandson', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)fatsib(son|dau|chi)chi$/' , $ path ) ) { return I18N :: translateContext ( 'grandfather’s sibling’s grandchild', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)motbro(son|dau|chi)dau$/' , $ path ) ) { return I18N :: translateContext ( 'grandmother’s brother’s granddaughter', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)motbro(son|dau|chi)son$/' , $ path ) ) { return I18N :: translateContext ( 'grandmother’s brother’s grandson', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)motbro(son|dau|chi)chi$/' , $ path ) ) { return I18N :: translateContext ( 'grandmother’s brother’s grandchild', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)motsis(son|dau|chi)dau$/' , $ path ) ) { return I18N :: translateContext ( 'grandmother’s sister’s granddaughter', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)motsis(son|dau|chi)son$/' , $ path ) ) { return I18N :: translateContext ( 'grandmother’s sister’s grandson', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)motsis(son|dau|chi)chi$/' , $ path ) ) { return I18N :: translateContext ( 'grandmother’s sister’s grandchild', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)motsib(son|dau|chi)dau$/' , $ path ) ) { return I18N :: translateContext ( 'grandmother’s sibling’s granddaughter', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)motsib(son|dau|chi)son$/' , $ path ) ) { return I18N :: translateContext ( 'grandmother’s sibling’s grandson', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)motsib(son|dau|chi)chi$/' , $ path ) ) { return I18N :: translateContext ( 'grandmother’s sibling’s grandchild', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)parbro(son|dau|chi)dau$/' , $ path ) ) { return I18N :: translateContext ( 'grandparent’s brother’s granddaughter', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)parbro(son|dau|chi)son$/' , $ path ) ) { return I18N :: translateContext ( 'grandparent’s brother’s grandson', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)parbro(son|dau|chi)chi$/' , $ path ) ) { return I18N :: translateContext ( 'grandparent’s brother’s grandchild', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)parsis(son|dau|chi)dau$/' , $ path ) ) { return I18N :: translateContext ( 'grandparent’s sister’s granddaughter', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)parsis(son|dau|chi)son$/' , $ path ) ) { return I18N :: translateContext ( 'grandparent’s sister’s grandson', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)parsis(son|dau|chi)chi$/' , $ path ) ) { return I18N :: translateContext ( 'grandparent’s sister’s grandchild', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)parsib(son|dau|chi)dau$/' , $ path ) ) { return I18N :: translateContext ( 'grandparent’s sibling’s granddaughter', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)parsib(son|dau|chi)son$/' , $ path ) ) { return I18N :: translateContext ( 'grandparent’s sibling’s grandson', 's e ond cousin');   } if ( preg_match ( '/^(mot|fat|par)parsib(son|dau|chi)chi$/' , $ path ) ) { return I18N :: translateContext ( 'grandparent’s sibling’s grandchild', 's e ond cousin');   } // Look for generic/pattern relationships. if ( preg_match ( '/^((?:mot|fat|par)+)(bro|sis|sib)$/' , $ path , $ match ) ) { // siblings of direct ancestors $ up = intdiv ( strlen ( $ match [ 1 ] ) , 3 ) ; $ bef_last = substr ( $ path , - 6 , 3 ) ; switch ( $ up ) { case 3 : if ( $ sex2 === 'M' ) { if ( $ bef_last === 'fat' ) { return I18N :: translateContext ( 'great-grandfather’s brother',  ' reat-great-uncle');   } if ( $ bef_last === 'mot' ) { return I18N :: translateContext ( 'great-grandmother’s brother',  ' reat-great-uncle');   } return I18N :: translateContext ( 'great-grandparent’s brother',  ' reat-great-uncle');   } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great-great-aunt' ) ; } return I18N :: translate ( 'great-great-aunt/uncle' ) ; case 4 : if ( $ sex2 === 'M' ) { if ( $ bef_last === 'fat' ) { return I18N :: translateContext ( 'great-great-grandfather’s brother',  ' reat-great-great-uncle');   } if ( $ bef_last === 'mot' ) { return I18N :: translateContext ( 'great-great-grandmother’s brother',  ' reat-great-great-uncle');   } return I18N :: translateContext ( 'great-great-grandparent’s brother',  ' reat-great-great-uncle');   } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great-great-great-aunt' ) ; } return I18N :: translate ( 'great-great-great-aunt/uncle' ) ; case 5 : if ( $ sex2 === 'M' ) { if ( $ bef_last === 'fat' ) { return I18N :: translateContext ( 'great-great-great-grandfather’s brother',  ' reat ×4 uncle');   } if ( $ bef_last === 'mot' ) { return I18N :: translateContext ( 'great-great-great-grandmother’s brother',  ' reat ×4 uncle');   } return I18N :: translateContext ( 'great-great-great-grandparent’s brother',  ' reat ×4 uncle');   } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×4 aunt') ;  } return I18N :: translate ( 'great ×4 aunt/uncle') ;  case 6 : if ( $ sex2 === 'M' ) { if ( $ bef_last === 'fat' ) { return I18N :: translateContext ( 'great ×4 grandfather’s brother', ' g eat ×5 uncle');   } if ( $ bef_last === 'mot' ) { return I18N :: translateContext ( 'great ×4 grandmother’s brother', ' g eat ×5 uncle');   } return I18N :: translateContext ( 'great ×4 grandparent’s brother', ' g eat ×5 uncle');   } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×5 aunt') ;  } return I18N :: translate ( 'great ×5 aunt/uncle') ;  case 7 : if ( $ sex2 === 'M' ) { if ( $ bef_last === 'fat' ) { return I18N :: translateContext ( 'great ×5 grandfather’s brother', ' g eat ×6 uncle');   } if ( $ bef_last === 'mot' ) { return I18N :: translateContext ( 'great ×5 grandmother’s brother', ' g eat ×6 uncle');   } return I18N :: translateContext ( 'great ×5 grandparent’s brother', ' g eat ×6 uncle');   } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×6 aunt') ;  } return I18N :: translate ( 'great ×6 aunt/uncle') ;  case 8 : if ( $ sex2 === 'M' ) { if ( $ bef_last === 'fat' ) { return I18N :: translateContext ( 'great ×6 grandfather’s brother', ' g eat ×7 uncle');   } if ( $ bef_last === 'mot' ) { return I18N :: translateContext ( 'great ×6 grandmother’s brother', ' g eat ×7 uncle');   } return I18N :: translateContext ( 'great ×6 grandparent’s brother', ' g eat ×7 uncle');   } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×7 aunt') ;  } return I18N :: translate ( 'great ×7 aunt/uncle') ;  default : // Different languages have different rules for naming generations. // An English great ×12 uncle is a Danish great ×10 uncle. // // Need to find out which languages use which rules. switch ( WT_LOCALE ) { case 'da' : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×%s uncle',   18N: :n umber( $ u p    ) ) ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×%s aunt',   18N: :n umber( $ u p    ) ) ;  } return I18N :: translate ( 'great ×%s aunt/uncle',   18N: :n umber( $ u p    ) ) ;  case 'pl' : if ( $ sex2 === 'M' ) { if ( $ bef_last === 'fat' ) { return I18N :: translateContext ( 'great ×(%s-1) grandfather’s brother', ' g eat ×%s uncle', I1 8 ::nu mb er($up   -  2 )     } if ( $ bef_last === 'mot' ) { return I18N :: translateContext ( 'great ×(%s-1) grandmother’s brother', ' g eat ×%s uncle', I1 8 ::nu mb er($up   -  2 )     } return I18N :: translateContext ( 'great ×(%s-1) grandparent’s brother', ' g eat ×%s uncle', I1 8 ::nu mb er($up   -  2 )     } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×%s aunt',   18N: :n umber( $ u p    ) ) ;  } return I18N :: translate ( 'great ×%s aunt/uncle',   18N: :n umber( $ u p    ) ) ;  case 'it' : // Source: Michele Locati case 'en_AU' : case 'en_GB' : case 'en_US' : default : if ( $ sex2 === 'M' ) { // I18N: if you need a different number for %s, contact the developers, as a code-change is required return I18N :: translate ( 'great ×%s uncle',   18N: :n umber( $ u p    ) ) ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×%s aunt',   18N: :n umber( $ u p    ) ) ;  } return I18N :: translate ( 'great ×%s aunt/uncle',   18N: :n umber( $ u p    ) ) ;  } } } if ( preg_match ( '/^(?:bro|sis|sib)((?:son|dau|chi)+)$/' , $ path , $ match ) ) { // direct descendants of siblings $ down = intdiv ( strlen ( $ match [ 1 ] ) , 3 ) + 1 ; // Add one, as we count generations from the common ancestor $ first = substr ( $ path , 0 , 3 ) ; switch ( $ down ) { case 4 : if ( $ sex2 === 'M' ) { if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great-grandson', 'g r at-great-nephew');   } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great-grandson', 'g r at-great-nephew');   } return I18N :: translateContext ( '(a woman’s) great-great-nephew',  ' reat-great-nephew');   } if ( $ sex2 === 'F' ) { if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great-granddaughter', 'g r at-great-niece');   } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great-granddaughter', 'g r at-great-niece');   } return I18N :: translateContext ( '(a woman’s) great-great-niece',  ' reat-great-niece');   } if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great-grandchild', 'g r at-great-nephew/niece');   } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great-grandchild', 'g r at-great-nephew/niece');   } return I18N :: translateContext ( '(a woman’s) great-great-nephew/niece',  ' reat-great-nephew/niece');   case 5 : if ( $ sex2 === 'M' ) { if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great-great-grandson', 'g r at-great-great-nephew');   } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great-great-grandson', 'g r at-great-great-nephew');   } return I18N :: translateContext ( '(a woman’s) great-great-great-nephew',  ' reat-great-great-nephew');   } if ( $ sex2 === 'F' ) { if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great-great-granddaughter', 'g r at-great-great-niece');   } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great-great-granddaughter', 'g r at-great-great-niece');   } return I18N :: translateContext ( '(a woman’s) great-great-great-niece',  ' reat-great-great-niece');   } if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great-great-grandchild', 'g r at-great-great-nephew/niece');   } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great-great-grandchild', 'g r at-great-great-nephew/niece');   } return I18N :: translateContext ( '(a woman’s) great-great-great-nephew/niece',  ' reat-great-great-nephew/niece');   case 6 : if ( $ sex2 === 'M' ) { if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great-great-great-grandson', 'g r at ×4 nephew');   } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great-great-great-grandson', 'g r at ×4 nephew');   } return I18N :: translateContext ( '(a woman’s) great ×4 nephew', ' g eat ×4 nephew');   } if ( $ sex2 === 'F' ) { if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great-great-great-granddaughter', 'g r at ×4 niece');   } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great-great-great-granddaughter', 'g r at ×4 niece');   } return I18N :: translateContext ( '(a woman’s) great ×4 niece', ' g eat ×4 niece');   } if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great-great-great-grandchild', 'g r at ×4 nephew/niece');   } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great-great-great-grandchild', 'g r at ×4 nephew/niece');   } return I18N :: translateContext ( '(a woman’s) great ×4 nephew/niece', ' g eat ×4 nephew/niece');   case 7 : if ( $ sex2 === 'M' ) { if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great ×4 grandson', 'gr e t ×5 nephew');   } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great ×4 grandson', 'gr e t ×5 nephew');   } return I18N :: translateContext ( '(a woman’s) great ×5 nephew', ' g eat ×5 nephew');   } if ( $ sex2 === 'F' ) { if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great ×4 granddaughter', 'gr e t ×5 niece');   } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great ×4 granddaughter', 'gr e t ×5 niece');   } return I18N :: translateContext ( '(a woman’s) great ×5 niece', ' g eat ×5 niece');   } if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great ×4 grandchild', 'gr e t ×5 nephew/niece');   } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great ×4 grandchild', 'gr e t ×5 nephew/niece');   } return I18N :: translateContext ( '(a woman’s) great ×5 nephew/niece', ' g eat ×5 nephew/niece');   default : // Different languages have different rules for naming generations. // An English great ×12 nephew is a Polish great ×11 nephew. // // Need to find out which languages use which rules. switch ( WT_LOCALE ) { case 'pl' : // Source: Lukasz Wilenski if ( $ sex2 === 'M' ) { if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great ×(%s-1) grandson', 'gr e t ×%s nephew', I18N : numb er ($down   -  3))      } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great ×(%s-1) grandson', 'gr e t ×%s nephew', I18N : numb er ($down   -  3))      } return I18N :: translateContext ( '(a woman’s) great ×%s nephew', ' g eat ×%s nephew', I1 8 ::nu mb er($do w n  - 3 )     } if ( $ sex2 === 'F' ) { if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great ×(%s-1) granddaughter', 'gr e t ×%s niece', I18N : numb er ($down   -  3))      } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great ×(%s-1) granddaughter', 'gr e t ×%s niece', I18N : numb er ($down   -  3))      } return I18N :: translateContext ( '(a woman’s) great ×%s niece', ' g eat ×%s niece', I1 8 ::nu mb er($do w n  - 3 )     } if ( $ first === 'bro' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) brother’s great ×(%s-1) grandchild', 'gr e t ×%s nephew/niece', I18N : numb er ($down   -  3))      } if ( $ first === 'sis' && $ sex1 === 'M' ) { return I18N :: translateContext ( '(a man’s) sister’s great ×(%s-1) grandchild', 'gr e t ×%s nephew/niece', I18N : numb er ($down   -  3))      } return I18N :: translateContext ( '(a woman’s) great ×%s nephew/niece', ' g eat ×%s nephew/niece', I1 8 ::nu mb er($do w n  - 3 )     case 'he' : // Source: Meliza Amity if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×%s nephew',   18N: :n umber( $ d own    ) ) ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×%s niece',   18N: :n umber( $ d own    ) ) ;  } return I18N :: translate ( 'great ×%s nephew/niece',   18N: :n umber( $ d own    ) ) ;  case 'it' : // Source: Michele Locati. case 'en_AU' : case 'en_GB' : case 'en_US' : default : if ( $ sex2 === 'M' ) { // I18N: if you need a different number for %s, contact the developers, as a code-change is required return I18N :: translate ( 'great ×%s nephew',   18N: :n umber( $ d own    ) ) ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×%s niece',   18N: :n umber( $ d own    ) ) ;  } return I18N :: translate ( 'great ×%s nephew/niece',   18N: :n umber( $ d own    ) ) ;  } } } if ( preg_match ( '/^((?:mot|fat|par)*)$/' , $ path , $ match ) ) { // direct ancestors $ up = intdiv ( strlen ( $ match [ 1 ] ) , 3 ) ; switch ( $ up ) { case 4 : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great-great-grandfather' ) ; } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great-great-grandmother' ) ; } return I18N :: translate ( 'great-great-grandparent' ) ; case 5 : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great-great-great-grandfather' ) ; } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great-great-great-grandmother' ) ; } return I18N :: translate ( 'great-great-great-grandparent' ) ; case 6 : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×4 grandfather') ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×4 grandmother') ;  } return I18N :: translate ( 'great ×4 grandparent') ;  case 7 : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×5 grandfather') ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×5 grandmother') ;  } return I18N :: translate ( 'great ×5 grandparent') ;  case 8 : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×6 grandfather') ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×6 grandmother') ;  } return I18N :: translate ( 'great ×6 grandparent') ;  case 9 : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×7 grandfather') ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×7 grandmother') ;  } return I18N :: translate ( 'great ×7 grandparent') ;  default : // Different languages have different rules for naming generations. // An English great ×12 grandfather is a Danish great ×11 grandfather. // // Need to find out which languages use which rules. switch ( WT_LOCALE ) { case 'da' : // Source: Patrick Sorensen if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×%s grandfather',   18N: :n umber( $ u p    ) ) ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×%s grandmother',   18N: :n umber( $ u p    ) ) ;  } return I18N :: translate ( 'great ×%s grandparent',   18N: :n umber( $ u p    ) ) ;  case 'it' : // Source: Michele Locati case 'es' : // Source: Wes Groleau if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×%s grandfather',   18N: :n umber( $ u p) ) ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×%s grandmother',   18N: :n umber( $ u p) ) ;  } return I18N :: translate ( 'great ×%s grandparent',   18N: :n umber( $ u p) ) ;  case 'fr' : // Source: Jacqueline Tetreault case 'fr_CA' : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×%s grandfather',   18N: :n umber( $ u p    ) ) ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×%s grandmother',   18N: :n umber( $ u p    ) ) ;  } return I18N :: translate ( 'great ×%s grandparent',   18N: :n umber( $ u p    ) ) ;  case 'nn' : // Source: Hogne Røed Nilsen (https://bugs.launchpad.net/webtrees/+bug/1168553) case 'nb' : if ( $ sex2 === 'M' ) { // I18N: if you need a different number for %s, contact the developers, as a code-change is required return I18N :: translate ( 'great ×%s grandfather',   18N: :n umber( $ u p    ) ) ;  } if ( $ sex2 === 'F' ) { // I18N: if you need a different number for %s, contact the developers, as a code-change is required return I18N :: translate ( 'great ×%s grandmother',   18N: :n umber( $ u p    ) ) ;  } // I18N: if you need a different number for %s, contact the developers, as a code-change is required return I18N :: translate ( 'great ×%s grandparent',   18N: :n umber( $ u p    ) ) ;  case 'en_AU' : case 'en_GB' : case 'en_US' : default : if ( $ sex2 === 'M' ) { // I18N: if you need a different number for %s, contact the developers, as a code-change is required return I18N :: translate ( 'great ×%s grandfather',   18N: :n umber( $ u p    ) ) ;  } if ( $ sex2 === 'F' ) { // I18N: if you need a different number for %s, contact the developers, as a code-change is required return I18N :: translate ( 'great ×%s grandmother',   18N: :n umber( $ u p    ) ) ;  } // I18N: if you need a different number for %s, contact the developers, as a code-change is required return I18N :: translate ( 'great ×%s grandparent',   18N: :n umber( $ u p    ) ) ;  } } } if ( preg_match ( '/^((?:son|dau|chi)*)$/' , $ path , $ match ) ) { // direct descendants $ up = intdiv ( strlen ( $ match [ 1 ] ) , 3 ) ; switch ( $ up ) { case 4 : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great-great-grandson' ) ; } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great-great-granddaughter' ) ; } return I18N :: translate ( 'great-great-grandchild' ) ; case 5 : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great-great-great-grandson' ) ; } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great-great-great-granddaughter' ) ; } return I18N :: translate ( 'great-great-great-grandchild' ) ; case 6 : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×4 grandson') ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×4 granddaughter') ;  } return I18N :: translate ( 'great ×4 grandchild') ;  case 7 : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×5 grandson') ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×5 granddaughter') ;  } return I18N :: translate ( 'great ×5 grandchild') ;  case 8 : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×6 grandson') ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×6 granddaughter') ;  } return I18N :: translate ( 'great ×6 grandchild') ;  case 9 : if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×7 grandson') ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×7 granddaughter') ;  } return I18N :: translate ( 'great ×7 grandchild') ;  default : // Different languages have different rules for naming generations. // An English great ×12 grandson is a Danish great ×11 grandson. // // Need to find out which languages use which rules. switch ( WT_LOCALE ) { case 'nn' : // Source: Hogne Røed Nilsen case 'nb' : case 'da' : // Source: Patrick Sorensen if ( $ sex2 === 'M' ) { return I18N :: translate ( 'great ×%s grandson',   18N: :n umber( $ u p    ) ) ;  } if ( $ sex2 === 'F' ) { return I18N :: translate ( 'great ×%s granddaughter',   18N: :n umber( $ u p    ) ) ;  } return I18N :: translate ( 'great ×%s grandchild',   18N: :n umber( $ u p    ) ) ;  case 'it' : // Source: Michele Locati case 'es' : // Source: Wes Groleau (adding doesn’t change behavior, but needs to be better researched) case 'en_AU' : case 'en_GB' : case 'en_US' : default : if ( $ sex2 === 'M' ) { // I18N: if you need a different number for %s, contact the developers, as a code-change is required return I18N :: translate ( 'great ×%s grandson',   18N: :n umber( $ u p    ) ) ;  } if ( $ sex2 === 'F' ) { // I18N: if you need a different number for %s, contact the developers, as a code-change is required return I18N :: translate ( 'great ×%s granddaughter',   18N: :n umber( $ u p    ) ) ;  } // I18N: if you need a different number for %s, contact the developers, as a code-change is required return I18N :: translate ( 'great ×%s grandchild',   18N: :n umber( $ u p    ) ) ;  } } } if ( preg_match ( '/^((?:mot|fat|par)+)(?:bro|sis|sib)((?:son|dau|chi)+)$/' , $ path , $ match ) ) { // cousins in English $ ascent = $ match [ 1 ] ; $ descent = $ match [ 2 ] ; $ up = intdiv ( strlen ( $ ascent ) , 3 ) ; $ down = intdiv ( strlen ( $ descent ) , 3 ) ; $ cousin = min ( $ up , $ down ) ; // Moved out of switch (en/default case) so that $ removed = abs ( $ down - $ up ) ; // Spanish (and other languages) can use it, too. // Different languages have different rules for naming cousins. For example, // an English “second cousin once removed” is a Polish “cousin of 7th degree”. // // Need to find out which languages use which rules. switch ( WT_LOCALE ) { case 'pl' : // Source: Lukasz Wilenski return self :: cousinName ( $ up + $ down + 2 , $ sex2 ) ; case 'it' : // Source: Michele Locati. See italian_cousins_names.zip // https://webtrees.net/forums/8-translation/1200-great-xn-grandparent?limit=6&start=6 return self :: cousinName ( $ up + $ down - 3 , $ sex2 ) ; case 'es' : // Source: Wes Groleau. See http://UniGen.us/Parentesco.html & http://UniGen.us/Parentesco-D.html if ( $ down === $ up ) { return self :: cousinName ( $ cousin , $ sex2 ) ; } if ( $ down < $ up ) { return self :: cousinName2 ( $ cousin + 1 , $ sex2 , self :: getRelationshipNameFromPath ( 'sib' . $ descent ) ) ; } if ( $ sex2 === 'M' ) { return self :: cousinName2 ( $ cousin + 1 , $ sex2 , self :: getRelationshipNameFromPath ( 'bro' . $ descent ) ) ; } if ( $ sex2 === 'F' ) { return self :: cousinName2 ( $ cousin + 1 , $ sex2 , self :: getRelationshipNameFromPath ( 'sis' . $ descent ) ) ; } return self :: cousinName2 ( $ cousin + 1 , $ sex2 , self :: getRelationshipNameFromPath ( 'sib' . $ descent ) ) ; case 'en_AU' : // See: http://en.wikipedia.org/wiki/File:CousinTree.svg case 'en_GB' : case 'en_US' : default : switch ( $ removed ) { case 0 : return self :: cousinName ( $ cousin , $ sex2 ) ; case 1 : if ( $ up > $ down ) { /* I18N: %s=“fifth cousin”, etc. http://www.ancestry.com/learn/library/article.aspx?article=2856 */ return I18N :: translate ( '%s once removed ascending' , self :: cousinName ( $ cousin , $ sex2 ) ) ; } /* I18N: %s=“fifth cousin”, etc. http://www.ancestry.com/learn/library/article.aspx?article=2856 */ return I18N :: translate ( '%s once removed descending' , self :: cousinName ( $ cousin , $ sex2 ) ) ; case 2 : if ( $ up > $ down ) { /* I18N: %s=“fifth cousin”, etc. */ return I18N :: translate ( '%s twice removed ascending' , self :: cousinName ( $ cousin , $ sex2 ) ) ; } /* I18N: %s=“fifth cousin”, etc. */ return I18N :: translate ( '%s twice removed descending' , self :: cousinName ( $ cousin , $ sex2 ) ) ; case 3 : if ( $ up > $ down ) { /* I18N: %s=“fifth cousin”, etc. */ return I18N :: translate ( '%s three times removed ascending' , self :: cousinName ( $ cousin , $ sex2 ) ) ; } /* I18N: %s=“fifth cousin”, etc. */ return I18N :: translate ( '%s three times removed descending' , self :: cousinName ( $ cousin , $ sex2 ) ) ; default : if ( $ up > $ down ) { /* I18N: %1$s=“fifth cousin”, etc., %2$s>=4 */ return I18N :: translate ( '%1$s %2$s times removed ascending' , self :: cousinName ( $ cousin , $ sex2 ) , I18N :: number ( $ removed ) ) ; } /* I18N: %1$s=“fifth cousin”, etc., %2$s>=4 */ return I18N :: translate ( '%1$s %2$s times removed descending' , self :: cousinName ( $ cousin , $ sex2 ) , I18N :: number ( $ removed ) ) ; } } } // Split the relationship into sub-relationships, e.g., third-cousin’s great-uncle. // Try splitting at every point, and choose the path with the shorted translated name. // But before starting to recursively go through all combinations, do a cache look-up if ( array_key_exists ( $ path , self :: $ relationshipsCache ) ) { return self :: $ relationshipsCache [ $ path ] ; } $ relationship = null ; $ path1 = substr ( $ path , 0 , 3 ) ; $ path2 = substr ( $ path , 3 ) ; while ( $ path2 ) { // @TODO need the actual people // I18N: A complex relationship, such as “third-cousin’s great-uncle” $ tmp = I18N :: translate ( '%1$s’s %2$s',  self :: getRelationshipNameFromPath ( $ path1 ) , self :: getRelationshipNameFromPath ( $ path2 ) ) ; if ( ! $ relationship || strlen ( $ tmp ) < strlen ( $ relationship ) ) { $ relationship = $ tmp ; } $ path1 .= substr ( $ path2 , 0 , 3 ) ; $ path2 = substr ( $ path2 , 3 ) ; } // and store the result in the cache self :: $ relationshipsCache [ $ path ] = $ relationship ; return $ relationship ; }

1<CODESPLIT>https://github.com/intrip/laravel-library/blob/9ea7d5cd9d84c70893238af6300b24c7dd4b8ca3/src/Jacopo/Library/Form/FormModel.php#L121-L145<CODESPLIT>FormModel.delete<CODESPLIT>Run delete on the repository<CODESPLIT>public function delete ( array $ input ) { if ( isset ( $ input [ $ this -> id_field_name ] ) && ! empty ( $ input [ $ this -> id_field_name ] ) ) { try { $ this -> r -> delete ( $ input [ $ this -> id_field_name ] ) ; } catch ( ModelNotFoundException $ e ) { $ this -> errors = new MessageBag ( array ( "model" => "Element does not exists." ) ) ; throw new NotFoundException ( ) ; } catch ( PermissionException $ e ) { $ this -> errors = new MessageBag ( array ( "model" => "Cannot delete this item, please check that the item is not already associated to any other element, in that case remove the association first." ) ) ; throw new PermissionException ( ) ; } } else { $ this -> errors = new MessageBag ( array ( "model" => "Id not given" ) ) ; throw new NotFoundException ( ) ; } }

0<CODESPLIT>https://github.com/OXID-eSales/oxideshop_ce/blob/acd72f4a7c5c7340d70b191e081e4a24b74887cc/source/Application/Controller/StartController.php#L354-L365<CODESPLIT>StartController.getManufacturerForSlider<CODESPLIT>Returns active banner list<CODESPLIT>public function getManufacturerForSlider ( ) { $ oList = null ; if ( \ OxidEsales \ Eshop \ Core \ Registry :: getConfig ( ) -> getConfigParam ( 'bl_perfLoadManufacturerTree' ) ) { $ oList = $ this -> getManufacturerlist ( ) ; } return $ oList ; }

1<CODESPLIT>https://github.com/AgenceYuzu/PipelineBundle/blob/d199b0869368d51a200b03e71bf79448402382b5/DependencyInjection/YuzuPipelineExtension.php#L28-L37<CODESPLIT>YuzuPipelineExtension.load<CODESPLIT>Loads a specific configuration .<CODESPLIT>public function load ( array $ config , ContainerBuilder $ container ) { $ loader = new YamlFileLoader ( $ container , new FileLocator ( __DIR__ . '/../Resources/config' ) ) ; // Base services override $ loader -> load ( 'services.yml' ) ; }

1<CODESPLIT>https://github.com/atk4/data/blob/f40b23beb42cfd27d075c770779cb7aeb98c0812/src/Reference/HasOne_SQL.php#L29-L75<CODESPLIT>HasOne_SQL.addField<CODESPLIT>Creates expression which sub - selects a field inside related model .<CODESPLIT>public function addField ( $ field , $ their_field = null ) : Field_SQL_Expression { if ( is_array ( $ field ) ) { $ defaults = $ field ; if ( ! isset ( $ defaults [ 0 ] ) ) { throw new Exception ( [ 'Field name must be specified' , 'field' => $ field , ] ) ; } $ field = $ defaults [ 0 ] ; unset ( $ defaults [ 0 ] ) ; } else { $ defaults = [ ] ; } if ( $ their_field === null ) { $ their_field = $ field ; } $ e = $ this -> owner -> addExpression ( $ field , array_merge ( [ function ( $ m ) use ( $ their_field ) { // remove order if we just select one field from hasOne model // that is mandatory for Oracle return $ m -> refLink ( $ this -> link ) -> action ( 'field' , [ $ their_field ] ) -> reset ( 'order' ) ; } , ] , $ defaults ) ) ; $ e -> read_only = false ; $ e -> never_save = true ; // Will try to execute last $ this -> owner -> addHook ( 'beforeSave' , function ( $ m ) use ( $ field , $ their_field ) { // if title field is changed, but reference ID field (our_field) // is not changed, then update reference ID field value if ( $ m -> isDirty ( $ field ) && ! $ m -> isDirty ( $ this -> our_field ) ) { $ mm = $ this -> getModel ( ) ; $ mm -> addCondition ( $ their_field , $ m [ $ field ] ) ; $ m [ $ this -> our_field ] = $ mm -> action ( 'field' , [ $ mm -> id_field ] ) ; unset ( $ m [ $ field ] ) ; } } , null , 21 ) ; return $ e ; }

1<CODESPLIT>https://github.com/bolt/bolt/blob/127434d79990b54abfb3e830243deaf725baa4de/src/Legacy/Storage.php#L658-L742<CODESPLIT>Storage.searchContent<CODESPLIT>Search through actual content .<CODESPLIT>public function searchContent ( $ q , array $ contenttypes = null , array $ filters = null , $ limit = 9999 , $ offset = 0 ) { $ query = $ this -> decodeSearchQuery ( $ q ) ; if ( ! $ query [ 'valid' ] ) { return false ; } $ appCt = $ this -> app [ 'config' ] -> get ( 'contenttypes' ) ; // By default we only search through searchable contenttypes if ( is_null ( $ contenttypes ) ) { $ contenttypes = array_keys ( $ appCt ) ; $ contenttypes = array_filter ( $ contenttypes , function ( $ ct ) use ( $ appCt ) { if ( ( isset ( $ appCt [ $ ct ] [ 'searchable' ] ) && $ appCt [ $ ct ] [ 'searchable' ] === false ) || ( isset ( $ appCt [ $ ct ] [ 'viewless' ] ) && $ appCt [ $ ct ] [ 'viewless' ] === true ) ) { return false ; } return true ; } ) ; $ contenttypes = array_map ( function ( $ ct ) use ( $ appCt ) { return $ appCt [ $ ct ] [ 'slug' ] ; } , $ contenttypes ) ; } // Build our search results array $ results = [ ] ; // First, attempt to search for the literal string, eg. "Lorum Ipsum" foreach ( $ contenttypes as $ contenttype ) { $ ctconfig = $ this -> getContentType ( $ contenttype ) ; $ fields = $ ctconfig [ 'fields' ] ; $ filter = null ; if ( is_array ( $ filters ) && isset ( $ filters [ $ contenttype ] ) ) { $ filter = $ filters [ $ contenttype ] ; } $ subResults = $ this -> searchSingleContentType ( $ query , $ contenttype , $ fields , $ filter , true ) ; $ results = array_merge ( $ results , $ subResults ) ; } // If that didn't produce results, search for "Lorum" or "Ipsum" if ( empty ( $ results ) ) { foreach ( $ contenttypes as $ contenttype ) { $ ctconfig = $ this -> getContentType ( $ contenttype ) ; $ fields = $ ctconfig [ 'fields' ] ; $ filter = null ; if ( is_array ( $ filters ) && isset ( $ filters [ $ contenttype ] ) ) { $ filter = $ filters [ $ contenttype ] ; } $ subResults = $ this -> searchSingleContentType ( $ query , $ contenttype , $ fields , $ filter , false ) ; $ results = array_merge ( $ results , $ subResults ) ; } } // Sort the results usort ( $ results , [ $ this , 'compareSearchWeights' ] ) ; $ noOfResults = count ( $ results ) ; $ pageResults = [ ] ; if ( $ offset < $ noOfResults ) { $ pageResults = array_slice ( $ results , $ offset , $ limit ) ; } return [ 'query' => $ query , 'no_of_results' => $ noOfResults , 'results' => $ pageResults , ] ; }

0<CODESPLIT>https://github.com/saksmt/pmpd/blob/f93587acbc6ca98e7b1c145255fd78a666ff4fab/src/Smt/Pmpd/Client/Impl/DefaultClient.php#L119-L124<CODESPLIT>DefaultClient.setVolume<CODESPLIT>{<CODESPLIT>public function setVolume ( $ volume ) { $ this -> handleFailResponse ( $ this -> query ( Commands :: SET_VOLUME , $ volume ) ) ; return $ this ; }

1<CODESPLIT>https://github.com/php-devil-old/php-devil-framework/blob/bbbcdaac7243306fb338fe13bc9f71d7a339dba3/web/Application.php#L76-L94<CODESPLIT>Application.run<CODESPLIT>Сценарий выполнения приложения : - если путь начинается с адреса модуля - загрузка модуля и передача управления ему - если нет - попытка найти и выполнить действие контроллера<CODESPLIT>final public function run ( ) { \ Devil :: registerApplication ( $ this ) ; if ( $ moduleID = $ this -> url -> isModuleRequested ( ) ) { if ( $ module = $ this -> loadModule ( $ moduleID ) ) { if ( $ module -> beforeRun ( ) ) { $ this -> url -> useModule ( $ moduleID ) ; $ module -> run ( ) ; $ module -> afterRun ( ) ; } else { $ module -> errorRun ( ) ; } } else { throw new HttpException ( HttpException :: NOT_FOUND ) ; } } else { parent :: run ( ) ; } }

0<CODESPLIT>https://github.com/neos/neos-development-collection/blob/9062fb5e8e9217bc99324b7eba0378e9274fc051/Neos.Media/Classes/Domain/Model/Adjustment/ResizeImageAdjustment.php#L403-L413<CODESPLIT>ResizeImageAdjustment.calculateScalingToHeight<CODESPLIT>Calculates new dimensions with a requested width applied . Takes upscaling into consideration .<CODESPLIT>protected function calculateScalingToHeight ( BoxInterface $ originalDimensions , $ requestedHeight ) { if ( $ this -> getAllowUpScaling ( ) === false && $ requestedHeight >= $ originalDimensions -> getHeight ( ) ) { return $ originalDimensions ; } $ newDimensions = clone $ originalDimensions ; $ newDimensions = $ newDimensions -> heighten ( $ requestedHeight ) ; return $ newDimensions ; }

0<CODESPLIT>https://github.com/wapmorgan/UnifiedArchive/blob/48abec701f5acf00422747b2f4b8b3097d9de6cd/src/UnifiedArchive.php#L493-L529<CODESPLIT>UnifiedArchive.archiveFile<CODESPLIT>Creates an archive with passed files list<CODESPLIT>public static function archiveFile ( $ file , $ archiveName ) { if ( ! is_file ( $ file ) ) throw new InvalidArgumentException ( $ file . ' is not a valid file to archive' ) ; return static :: archiveFiles ( $ file , $ archiveName ) === 1 ; }

0<CODESPLIT>https://github.com/sulu/sulu/blob/6766a36cc2f0c807c59202bf7540a08c4ef31192/src/Sulu/Bundle/MediaBundle/Admin/MediaAdmin.php#L85-L119<CODESPLIT>StructureHandler.doDeserialize<CODESPLIT>{<CODESPLIT>public function doDeserialize ( JsonDeserializationVisitor $ visitor , array $ data , array $ type , Context $ context ) { $ structure = new Structure ( ) ; foreach ( $ data as $ key => $ value ) { $ structure -> getProperty ( $ key ) -> setValue ( $ value ) ; } return $ structure ; }

0<CODESPLIT>https://github.com/cedx/yii2-mustache/blob/20c961e65e74a0bacbe992dd7fdb28319f58a919/lib/helpers/Format.php#L35-L50<CODESPLIT>Format.getBoolean<CODESPLIT>Returns a helper function formatting a value as currency number .<CODESPLIT>function getBoolean ( ) : \ Closure { return function ( $ value , \ Mustache_LambdaHelper $ helper ) { return HtmlHelper :: encode ( \ Yii :: $ app -> formatter -> asBoolean ( $ helper -> render ( $ value ) ) ) ; } ; }

1<CODESPLIT>https://github.com/contao-bootstrap/form/blob/7e6a83190b852207ba41a1f8ffa2b4b02f9e9eb7/src/ContaoManager/Plugin.php#L35-L47<CODESPLIT>Plugin.getBundles<CODESPLIT>{<CODESPLIT>public function getBundles ( ParserInterface $ parser ) { return [ BundleConfig :: create ( ContaoBootstrapFormBundle :: class ) -> setLoadAfter ( [ ContaoCoreBundle :: class , ContaoBootstrapCoreBundle :: class , NetzmachtContaoFormDesignerBundle :: class , ] ) , ] ; }

1<CODESPLIT>https://github.com/mrimann/CacheBreaker/blob/2b195f06bc2f92d1d9dc069fdc67cc28a3bee576/Classes/FusionObjects/ResourceUriImplementation.php#L61-L77<CODESPLIT>ResourceUriImplementation.evaluate<CODESPLIT>Returns the absolute URL of a resource with cache bursting string<CODESPLIT>public function evaluate ( ) { $ path = $ this -> getPath ( ) ; if ( $ path === null ) { throw new FusionException ( '"path" was not specified' , 1386458763 ) ; } $ package = $ this -> getPackage ( ) ; if ( $ package === null ) { $ controllerContext = $ this -> runtime -> getControllerContext ( ) ; /** @var $actionRequest ActionRequest */ $ actionRequest = $ controllerContext -> getRequest ( ) ; $ package = $ actionRequest -> getControllerPackageKey ( ) ; } return $ this -> resourceService -> getResourceUri ( $ path , $ package ) ; }

0<CODESPLIT>https://github.com/Ingewikkeld/rest-user-bundle/blob/73acdeadc6098bea7256a7969536d7ba9c5afa5a/src/Ingewikkeld/Rest/UserBundle/ResourceMapper/User.php#L59-L70<CODESPLIT>RoutingContext.getMiddlewares<CODESPLIT>Returns a resource representation of the user with the given username .<CODESPLIT>public function getMiddlewares ( array $ middlewares = [ ] ) : array { return $ this -> parent ? $ this -> parent -> getMiddlewares ( array_merge ( $ middlewares , $ this -> middlewares ) ) : array_merge ( $ middlewares , $ this -> middlewares ) ; }

1<CODESPLIT>https://github.com/secucard/secucard-connect-php-sdk/blob/d990686095e4e02d0924fc12b9bf60140fe8efab/src/SecucardConnect/Product/Payment/Service/PaymentService.php#L236-L239<CODESPLIT>PaymentService.onStatusChange<CODESPLIT>Set a callback to be notified when a creditcard has changed . Pass null to remove a previous setting .<CODESPLIT>public function onStatusChange ( $ fn ) { $ this -> registerEventHandler ( static :: class , $ fn === null ? null : new PaymentChanged ( $ fn , $ this ) ) ; }

1<CODESPLIT>https://github.com/shopsys/doctrine-orm/blob/faf2288cd1c133c4b5340079a26aa4f14dd7beab/lib/Doctrine/ORM/Persisters/Entity/JoinedSubclassPersister.php#L272-L301<CODESPLIT>JoinedSubclassPersister.delete<CODESPLIT>{<CODESPLIT>public function delete ( $ entity ) { $ identifier = $ this -> em -> getUnitOfWork ( ) -> getEntityIdentifier ( $ entity ) ; $ id = array_combine ( $ this -> class -> getIdentifierColumnNames ( ) , $ identifier ) ; $ this -> deleteJoinTableRecords ( $ identifier ) ; // If the database platform supports FKs, just // delete the row from the root table. Cascades do the rest. if ( $ this -> platform -> supportsForeignKeyConstraints ( ) ) { $ rootClass = $ this -> em -> getClassMetadata ( $ this -> class -> rootEntityName ) ; $ rootTable = $ this -> quoteStrategy -> getTableName ( $ rootClass , $ this -> platform ) ; return ( bool ) $ this -> conn -> delete ( $ rootTable , $ id ) ; } // Delete from all tables individually, starting from this class' table up to the root table. $ rootTable = $ this -> quoteStrategy -> getTableName ( $ this -> class , $ this -> platform ) ; $ affectedRows = $ this -> conn -> delete ( $ rootTable , $ id ) ; foreach ( $ this -> class -> parentClasses as $ parentClass ) { $ parentMetadata = $ this -> em -> getClassMetadata ( $ parentClass ) ; $ parentTable = $ this -> quoteStrategy -> getTableName ( $ parentMetadata , $ this -> platform ) ; $ this -> conn -> delete ( $ parentTable , $ id ) ; } return ( bool ) $ affectedRows ; }

0<CODESPLIT>https://github.com/jenskooij/cloudcontrol/blob/76e5d9ac8f9c50d06d39a995d13cc03742536548/src/cc/ComposerScripts.php#L200-L216<CODESPLIT>Client.call<CODESPLIT>Calculate the relative path from $from to $to Derived from https : // stackoverflow . com / a / 2638272 /<CODESPLIT>private function call ( RequestInterface $ request , ResponseInterface $ response ) { try { $ this -> info ( "HUBSPOT API REQUEST - URI: {uri}, METHOD: {method}, PAYLOAD: {payload}" , [ 'uri' => $ request -> getUri ( ) , 'method' => $ request -> getMethod ( ) , 'payload' => $ request -> getBody ( ) ] ) ; $ httpResponse = ( new GuzzleHttpClient ( ) ) -> send ( $ request ) ; } catch ( ClientException $ e ) { $ this -> error ( "HUBSPOT API EXCEPTION: {exception}" , [ 'exception' => $ e ] ) ; $ httpResponse = $ e -> getResponse ( ) ; // If an exception was thrown, pass the message on via the response $ contents = $ httpResponse -> getBody ( ) -> getContents ( ) ; if ( empty ( $ contents ) ) { $ stream = Factory :: create ( JsonHelper :: encode ( [ 'status' => 'exception' , 'message' => $ e -> getMessage ( ) ] ) ) ; $ httpResponse = $ httpResponse -> withBody ( $ stream ) ; } $ httpResponse -> getBody ( ) -> rewind ( ) ; } // Sync responses if ( $ httpResponse !== null ) { $ this -> info ( "HUBSPOT API RESPONSE - CODE: {code}, BODY: {response}" , [ 'code' => $ httpResponse -> getStatusCode ( ) , 'response' => $ httpResponse -> getBody ( ) ] ) ; $ httpResponse -> getBody ( ) -> rewind ( ) ; $ response = $ this -> syncResponse ( $ httpResponse , $ response ) ; } return $ response ; }

0<CODESPLIT>https://github.com/nabu-3/core/blob/8a93a91ba146536d66f57821e6f23f9175d8bd11/nabu/data/messaging/base/CNabuMessagingLanguageBase.php#L111-L131<CODESPLIT>Collection.newFromDatamapperObject<CODESPLIT>Query the storage to retrieve the full list of available languages ( those that correspond to existent translations ) for $translated and returns a list with all languages .<CODESPLIT>public static function newFromDatamapperObject ( $ entities , $ lastObjectId , $ lastEloquentModel ) { $ eloquentModels = new static ; foreach ( $ entities as $ name => $ item ) { if ( spl_object_hash ( $ item ) == $ lastObjectId ) { $ model = $ lastEloquentModel ; } else { $ model = Model :: newFromDatamapperObject ( $ item , $ lastObjectId , $ lastEloquentModel ) ; } $ eloquentModels -> put ( $ name , $ model ) ; } return $ eloquentModels ; }

0<CODESPLIT>https://github.com/mirko-pagliai/me-cms/blob/df668ad8e3ee221497c47578d474e487f24ce92a/src/Model/Table/PhotosAlbumsTable.php#L85-L90<CODESPLIT>TemporaryDirectory.remove<CODESPLIT>active find method<CODESPLIT>public function remove ( $ force = false ) { $ isEmpty = $ this -> isEmpty ( ) ; if ( $ force && ! $ isEmpty ) { $ it = new \ RecursiveDirectoryIterator ( $ this -> dir , \ RecursiveDirectoryIterator :: SKIP_DOTS ) ; $ files = new \ RecursiveIteratorIterator ( $ it , \ RecursiveIteratorIterator :: CHILD_FIRST ) ; foreach ( $ files as $ file ) { if ( $ file -> isDir ( ) ) { \ rmdir ( $ file -> getRealPath ( ) ) ; } else { \ unlink ( $ file -> getRealPath ( ) ) ; } } \ rmdir ( $ this -> dir ) ; $ this -> removed = true ; return ; } if ( $ isEmpty ) { \ rmdir ( $ this -> dir ) ; $ this -> removed = true ; } }

1<CODESPLIT>https://github.com/VTacius/ldapPM/blob/728af24cd0a5ca4fbed76ffb52aa4800b118879f/src/Utilidades/utilidades.php#L34-L38<CODESPLIT>utilidades.limpiandoAtributos<CODESPLIT>Limpia los atributos de espacios innecesarios TODO : ¿Y los valores no ascii?<CODESPLIT>static function limpiandoAtributos ( $ valor ) { $ trimeando = trim ( $ valor ) ; $ pre_valor = preg_replace ( "/\s+/" , " " , $ trimeando ) ; return ( string ) $ pre_valor ; }

0<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/lib/phpexcel/PHPExcel/Worksheet.php#L2053-L2067<CODESPLIT>PHPExcel_Worksheet.removeColumn<CODESPLIT>Delete a row updating all possible related data<CODESPLIT>public function removeColumn ( $ pColumn = 'A' , $ pNumCols = 1 ) { if ( ! is_numeric ( $ pColumn ) ) { $ highestColumn = $ this -> getHighestDataColumn ( ) ; $ pColumn = PHPExcel_Cell :: stringFromColumnIndex ( PHPExcel_Cell :: columnIndexFromString ( $ pColumn ) - 1 + $ pNumCols ) ; $ objReferenceHelper = PHPExcel_ReferenceHelper :: getInstance ( ) ; $ objReferenceHelper -> insertNewBefore ( $ pColumn . '1' , - $ pNumCols , 0 , $ this ) ; for ( $ c = 0 ; $ c < $ pNumCols ; ++ $ c ) { $ this -> getCellCacheController ( ) -> removeColumn ( $ highestColumn ) ; $ highestColumn = PHPExcel_Cell :: stringFromColumnIndex ( PHPExcel_Cell :: columnIndexFromString ( $ highestColumn ) - 2 ) ; } } else { throw new PHPExcel_Exception ( "Column references should not be numeric." ) ; } return $ this ; }

1<CODESPLIT>https://github.com/bseddon/XBRL/blob/6ffdcedd68b0a7957b2358bcec15b22bd4c5dc94/Formulas/FactValues.php#L218-L226<CODESPLIT>FactValues.getType<CODESPLIT>Get the schema type for the fact<CODESPLIT>public static function getType ( $ fact ) { if ( ! $ fact instanceof DOMXPathNavigator ) { throw new \ Exception ( "Invalid fact variable passed to FactValues::isItem" ) ; } return \ XBRL_Types :: getInstance ( ) -> getTypeForDOMNode ( $ fact -> getUnderlyingObject ( ) ) ; }

0<CODESPLIT>https://github.com/vipsoft/DoctrineDataFixturesExtension/blob/97ee73d6f085a1a52db70e4b2e675682670bd71d/src/VIPSoft/DoctrineDataFixturesExtension/Service/FixtureService.php#L184-L201<CODESPLIT>FixtureService.getBundleFixtureDirectories<CODESPLIT>Load a data fixture class .<CODESPLIT>private function getBundleFixtureDirectories ( ) { return array_filter ( array_map ( function ( $ bundle ) { $ path = $ bundle -> getPath ( ) . '/DataFixtures/ORM' ; return is_dir ( $ path ) ? $ path : null ; } , $ this -> kernel -> getBundles ( ) ) ) ; }

0<CODESPLIT>https://github.com/eXpansionPluginPack/eXpansion2/blob/e82ffcfa7bcbcb8e354d2fde0eb64bb5695b4a31/src/eXpansion/Bundle/LocalRecords/Model/Base/RecordQuery.php#L687-L702<CODESPLIT>RecordQuery.usePlayerQuery<CODESPLIT>Filter the query by a related \ eXpansion \ Framework \ PlayersBundle \ Model \ Player object<CODESPLIT>public function usePlayerQuery ( $ relationAlias = null , $ joinType = Criteria :: INNER_JOIN ) { return $ this -> joinPlayer ( $ relationAlias , $ joinType ) -> useQuery ( $ relationAlias ? $ relationAlias : 'Player' , '\eXpansion\Framework\PlayersBundle\Model\PlayerQuery' ) ; }

1<CODESPLIT>https://github.com/hubzero/framework/blob/391de11e82f44c5fc9b2fbf0c8f6bde4cb0e8609/src/User/Reputation.php#L49-L63<CODESPLIT>Reputation.isJailed<CODESPLIT>Checks to see if user is jailed<CODESPLIT>public function isJailed ( ) { if ( $ this -> get ( 'user_id' , false ) ) { $ params = Plugin :: params ( 'system' , 'spamjail' ) ; $ sessionCount = $ params -> get ( 'session_count' , 5 ) ; $ lifetimeCount = $ params -> get ( 'user_count' , 10 ) ; if ( Session :: get ( 'spam_count' , 0 ) > $ sessionCount || $ this -> get ( 'spam_count' , 0 ) > $ lifetimeCount ) { return true ; } } return false ; }

1<CODESPLIT>https://github.com/shgysk8zer0/core_api/blob/9e9b8baf761af874b95256ad2462e55fbb2b2e58/traits/curl.php#L142-L147<CODESPLIT>cURL.curlSetOptArray<CODESPLIT>Set multiple options for a cURL transfer<CODESPLIT>final public function curlSetOptArray ( array $ options = array ( ) ) { $ this -> curlFilterOpts ( $ options ) ; curl_setopt_array ( $ this -> curl_handle , $ options ) ; return $ this ; }

0<CODESPLIT>https://github.com/silverstripe/silverstripe-framework/blob/ed7aaff7da61eefa172fe213ec25e35d2568bc20/src/ORM/Connect/PDOConnector.php#L293-L303<CODESPLIT>PDOConnector.getOrPrepareStatement<CODESPLIT>Invoked before any query is executed<CODESPLIT>public function getOrPrepareStatement ( $ sql ) { // Return cached statements if ( isset ( $ this -> cachedStatements [ $ sql ] ) ) { return $ this -> cachedStatements [ $ sql ] ; } // Generate new statement $ statement = $ this -> pdoConnection -> prepare ( $ sql , array ( PDO :: ATTR_CURSOR => PDO :: CURSOR_FWDONLY ) ) ; // Wrap in a PDOStatementHandle, to cache column metadata $ statementHandle = ( $ statement === false ) ? false : new PDOStatementHandle ( $ statement ) ; // Only cache select statements if ( preg_match ( '/^(\s*)select\b/i' , $ sql ) ) { $ this -> cachedStatements [ $ sql ] = $ statementHandle ; } return $ statementHandle ; }

1<CODESPLIT>https://github.com/timtoday/voyager-cn/blob/4c36c25ee411aefecea13a95d99497810e49e418/src/Http/Controllers/Controller.php#L319-L330<CODESPLIT>Controller.prepareTranslations<CODESPLIT>Prepare translations .<CODESPLIT>protected function prepareTranslations ( & $ translations , & $ data , $ field , $ request ) { $ trans = json_decode ( $ request -> input ( $ field . '_i18n' ) , true ) ; // Set field value with the default locale $ data [ $ field ] = $ trans [ config ( 'voyager.multilingual.default' , 'en' ) ] ; $ translations [ $ field ] = $ data -> setAttributeTranslations ( $ field , $ trans ) ; }

1<CODESPLIT>https://github.com/codemonkey1988/responsive-images/blob/05aaba3a84164f8bbc66e20ed88e00d9eb1aa552/Classes/Utility/ConfigurationUtility.php#L32-L73<CODESPLIT>ConfigurationUtility.getExtensionConfig<CODESPLIT>Returns extension management configuration as array .<CODESPLIT>public static function getExtensionConfig ( ) : array { $ supportedMimeTypes = self :: DEFAULT_SUPPORTED_MIME_TYPES ; $ desktopWidth = self :: DEFAULT_DESKTOP_WIDTH ; $ tabletWidth = self :: DEFAULT_TABLET_WIDTH ; $ smartphoneWidth = self :: DEFAULT_SMARTPHONE_WIDTH ; if ( isset ( $ GLOBALS [ 'TYPO3_CONF_VARS' ] [ 'EXTENSIONS' ] [ 'responsive_images' ] ) ) { $ supportedMimeTypes = $ GLOBALS [ 'TYPO3_CONF_VARS' ] [ 'EXTENSIONS' ] [ 'responsive_images' ] [ 'supportedMimeTypes' ] ?? self :: DEFAULT_SUPPORTED_MIME_TYPES ; $ desktopWidth = ( int ) $ GLOBALS [ 'TYPO3_CONF_VARS' ] [ 'EXTENSIONS' ] [ 'responsive_images' ] [ 'maxDesktopImageWidth' ] ?? self :: DEFAULT_DESKTOP_WIDTH ; $ tabletWidth = ( int ) $ GLOBALS [ 'TYPO3_CONF_VARS' ] [ 'EXTENSIONS' ] [ 'responsive_images' ] [ 'maxTabletImageWidth' ] ?? self :: DEFAULT_TABLET_WIDTH ; $ smartphoneWidth = ( int ) $ GLOBALS [ 'TYPO3_CONF_VARS' ] [ 'EXTENSIONS' ] [ 'responsive_images' ] [ 'maxSmartphoneImageWidth' ] ?? self :: DEFAULT_SMARTPHONE_WIDTH ; } elseif ( isset ( $ GLOBALS [ 'TYPO3_CONF_VARS' ] [ 'EXT' ] [ 'extConf' ] [ 'responsive_images' ] ) ) { try { $ extConfig = unserialize ( $ GLOBALS [ 'TYPO3_CONF_VARS' ] [ 'EXT' ] [ 'extConf' ] [ 'responsive_images' ] ) ; if ( ! empty ( $ extConfig [ 'supportedMimeTypes' ] ) ) { $ supportedMimeTypes = $ extConfig [ 'supportedMimeTypes' ] ; } if ( isset ( $ extConfig [ 'maxDesktopImageWidth' ] ) && is_numeric ( $ extConfig [ 'maxDesktopImageWidth' ] ) ) { $ desktopWidth = ( int ) $ extConfig [ 'maxDesktopImageWidth' ] ; } if ( isset ( $ extConfig [ 'maxTabletImageWidth' ] ) && is_numeric ( $ extConfig [ 'maxTabletImageWidth' ] ) ) { $ tabletWidth = ( int ) $ extConfig [ 'maxTabletImageWidth' ] ; } if ( isset ( $ extConfig [ 'maxSmartphoneImageWidth' ] ) && is_numeric ( $ extConfig [ 'maxSmartphoneImageWidth' ] ) ) { $ smartphoneWidth = ( int ) $ extConfig [ 'maxSmartphoneImageWidth' ] ; } } catch ( \ Exception $ e ) { } } return [ 'supportedMimeTypes' => $ supportedMimeTypes , 'maxDesktopImageWidth' => $ desktopWidth , 'maxTabletImageWidth' => $ tabletWidth , 'maxSmartphoneImageWidth' => $ smartphoneWidth , ] ; }

0<CODESPLIT>https://github.com/artesaos/defender/blob/066b11bffa35de7632e78700a30002cf0cddf598/src/Defender/Defender.php#L108-L115<CODESPLIT>Defender.canDo<CODESPLIT>Check if the authenticated user has the given permission using only the roles .<CODESPLIT>public function canDo ( $ permission , $ force = false ) { if ( ! is_null ( $ this -> getUser ( ) ) ) { return $ this -> getUser ( ) -> canDo ( $ permission , $ force ) ; } return false ; }

0<CODESPLIT>https://github.com/phingofficial/phing/blob/4b1797694dc65505af496ca2e1a3470efb9e35e1/classes/phing/Project.php#L213-L216<CODESPLIT>Project.setInheritedProperty<CODESPLIT>Sets a user property which cannot be overwritten by set / unset property calls . Any previous value is overwritten .<CODESPLIT>public function setInheritedProperty ( $ name , $ value ) { PropertyHelper :: getPropertyHelper ( $ this ) -> setInheritedProperty ( null , $ name , $ value ) ; }

0<CODESPLIT>https://github.com/unclecheese/silverstripe-event-calendar/blob/13c151c8fd011a98c131471cb21310124a264785/code/sfdate/sfTime.php#L162-L170<CODESPLIT>sfTime.clearDate<CODESPLIT>Returns the timestamp with the date but without the time of day .<CODESPLIT>public static function clearDate ( $ ts = null ) { // default to now if ( $ ts === null ) $ ts = sfDateTimeToolkit :: now ( ) ; list ( $ H , $ i , $ s , $ m , $ d , $ Y ) = sfDateTimeToolkit :: breakdown ( $ ts ) ; return mktime ( $ H , $ i , $ s , 0 , 0 , 0 ) ; }

0<CODESPLIT>https://github.com/eloquent/pathogen/blob/fbf5bbfced1cda81681acc708cb84557b0613ade/src/AbstractPath.php#L715-L732<CODESPLIT>AbstractPath.joinTrailingSlash<CODESPLIT>Joins a sequence of extensions to this path .<CODESPLIT>public function joinTrailingSlash ( ) { if ( $ this -> hasTrailingSeparator ( ) ) { return $ this ; } return $ this -> createPath ( $ this -> atoms ( ) , $ this instanceof AbsolutePathInterface , true ) ; }

0<CODESPLIT>https://github.com/ezsystems/ezpublish-kernel/blob/ef2ae730a46e9718ebd80f1047c0f8b866209ce9/eZ/Publish/Core/Persistence/Legacy/Content/Location/Gateway/ExceptionConversion.php#L45-L54<CODESPLIT>NotificationService.buildDomainObject<CODESPLIT>{<CODESPLIT>protected function buildDomainObject ( Notification $ spiNotification ) : APINotification { return new APINotification ( [ 'id' => $ spiNotification -> id , 'ownerId' => $ spiNotification -> ownerId , 'isPending' => $ spiNotification -> isPending , 'type' => $ spiNotification -> type , 'created' => new DateTime ( "@{$spiNotification->created}" ) , 'data' => $ spiNotification -> data , ] ) ; }

1<CODESPLIT>https://github.com/varunsridharan/wp-transient-api/blob/5564a928d3de87601ac86f7a882dd7f47d62181b/src/Transient_API.php#L431-L441<CODESPLIT>Transient_Api.get_option<CODESPLIT>@param $_key<CODESPLIT>public function get_option ( $ _key ) { $ key = $ this -> key ( $ _key , true ) ; $ version_key = $ this -> get_version_key ( $ key ) ; $ version = $ this -> wp_get_option ( $ version_key , true ) ; if ( $ this -> validate_version ( $ version , 'option' ) === false ) { $ this -> delete_version_issue ( $ _key ) ; return false ; } return $ this -> wp_get_option ( $ key ) ; }

0<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/lib/horde/framework/Horde/Imap/Client/Base/Mailbox.php#L129-L166<CODESPLIT>Horde_Imap_Client_Base_Mailbox.getStatus<CODESPLIT>Set status information for the mailbox .<CODESPLIT>public function getStatus ( $ entry ) { if ( isset ( $ this -> _status [ $ entry ] ) ) { return $ this -> _status [ $ entry ] ; } switch ( $ entry ) { case Horde_Imap_Client :: STATUS_FLAGS : case Horde_Imap_Client :: STATUS_SYNCFLAGUIDS : case Horde_Imap_Client :: STATUS_SYNCVANISHED : return array ( ) ; case Horde_Imap_Client :: STATUS_FIRSTUNSEEN : /* If we know there are no messages in the current mailbox, we              * know there are no unseen messages. */ return empty ( $ this -> _status [ Horde_Imap_Client :: STATUS_MESSAGES ] ) ? false : null ; case Horde_Imap_Client :: STATUS_RECENT_TOTAL : case Horde_Imap_Client :: STATUS_SYNCMODSEQ : return 0 ; case Horde_Imap_Client :: STATUS_PERMFLAGS : /* If PERMFLAGS is not returned by server, must assume that all              * flags can be changed permanently (RFC 3501 [6.3.1]). */ $ flags = isset ( $ this -> _status [ Horde_Imap_Client :: STATUS_FLAGS ] ) ? $ this -> _status [ Horde_Imap_Client :: STATUS_FLAGS ] : array ( ) ; $ flags [ ] = "\\*" ; return $ flags ; case Horde_Imap_Client :: STATUS_UIDNOTSTICKY : /* In the absence of explicit uidnotsticky identification, assume              * that UIDs are sticky. */ return false ; case Horde_Imap_Client :: STATUS_UNSEEN : /* If we know there are no messages in the current mailbox, we              * know there are no unseen messages . */ return empty ( $ this -> _status [ Horde_Imap_Client :: STATUS_MESSAGES ] ) ? 0 : null ; default : return null ; } }

0<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/lib/dml/sqlite3_pdo_moodle_database.php#L335-L343<CODESPLIT>sqlite3_pdo_moodle_database.sql_bitxor<CODESPLIT>Returns the sql statement with clauses to append used to limit a recordset range .<CODESPLIT>public function sql_bitxor ( $ int1 , $ int2 ) { return '( ~' . $ this -> sql_bitand ( $ int1 , $ int2 ) . ' & ' . $ this -> sql_bitor ( $ int1 , $ int2 ) . ')' ; }

1<CODESPLIT>https://github.com/lasallecms/lasallecms-l5-usermanagement-pkg/blob/b5203d596e18e2566e7fdcd3f13868bb44a94c1d/src/Listeners/Createlasallecrmrecords/CreatePeopleRecord.php#L151-L166<CODESPLIT>CreatePeopleRecord.splitName<CODESPLIT>First name and surnames are combined during registration . Split em and return either the first name or the suranme<CODESPLIT>public function splitName ( $ name , $ firstOrSurname = "surname" ) { // The first name is considered to be all the characters to the left of the final space. // The surname is considered to be all the characters to the right of the final space. // oh, just in case the name ends with a space $ name = trim ( $ name ) ; $ positionOfFinalSpace = strrpos ( $ name , " " ) ; if ( $ firstOrSurname == "surname" ) { return substr ( $ name , $ positionOfFinalSpace + 1 , strlen ( $ name ) ) ; } return substr ( $ name , 0 , $ positionOfFinalSpace ) ; }

1<CODESPLIT>https://github.com/dauxio/daux.io/blob/d02ebe093bcf15bbe32aaa1712370c7c70165f8e/libs/Daux.php#L372-L379<CODESPLIT>Daux.getContentExtensions<CODESPLIT>Get all content file extensions<CODESPLIT>public function getContentExtensions ( ) { if ( ! empty ( $ this -> validExtensions ) ) { return $ this -> validExtensions ; } return $ this -> validExtensions = $ this -> getContentTypeHandler ( ) -> getContentExtensions ( ) ; }

1<CODESPLIT>https://github.com/TheDMSGroup/mautic-contact-source/blob/27e7e59526bbbf6483973809c4d0f31f9be8c4f7/Model/Api.php#L693-L706<CODESPLIT>Api.handleInputPrivate<CODESPLIT>Parse and validate all input for the API .<CODESPLIT>private function handleInputPrivate ( ) { $ this -> parseVerbosity ( ) ; $ this -> parseFieldsProvided ( ) ; $ this -> parseToken ( ) ; $ this -> parseSourceId ( ) ; $ this -> parseSource ( ) ; $ this -> parseCampaignId ( ) ; $ this -> validateToken ( ) ; $ this -> parseSourceCampaignSettings ( ) ; $ this -> parseCampaign ( ) ; return $ this ; }

0<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/admin/tool/policy/classes/api.php#L1005-L1040<CODESPLIT>api.set_acceptances_status<CODESPLIT>Make sure that $user - > policyagreed matches the agreement to the policies<CODESPLIT>protected static function set_acceptances_status ( $ policyversionid , $ userid = null , $ note = null , $ lang = null , $ status = 1 ) { global $ DB , $ USER ; // Validate arguments and capabilities. if ( empty ( $ policyversionid ) ) { return ; } else if ( ! is_array ( $ policyversionid ) ) { $ policyversionid = [ $ policyversionid ] ; } if ( ! $ userid ) { $ userid = $ USER -> id ; } self :: can_accept_policies ( [ $ policyversionid ] , $ userid , true ) ; // Retrieve the list of policy versions that need agreement (do not update existing agreements). list ( $ sql , $ params ) = $ DB -> get_in_or_equal ( $ policyversionid , SQL_PARAMS_NAMED ) ; $ sql = "SELECT v.id AS versionid, a.*                   FROM {tool_policy_versions} v              LEFT JOIN {tool_policy_acceptances} a ON a.userid = :userid AND a.policyversionid = v.id                  WHERE v.id $sql AND (a.id IS NULL OR a.status <> :status)" ; $ needacceptance = $ DB -> get_records_sql ( $ sql , $ params + [ 'userid' => $ userid , 'status' => $ status , ] ) ; $ realuser = manager :: get_realuser ( ) ; $ updatedata = [ 'status' => $ status , 'lang' => $ lang ? : current_language ( ) , 'timemodified' => time ( ) , 'usermodified' => $ realuser -> id , 'note' => $ note ] ; foreach ( $ needacceptance as $ versionid => $ currentacceptance ) { unset ( $ currentacceptance -> versionid ) ; if ( $ currentacceptance -> id ) { $ updatedata [ 'id' ] = $ currentacceptance -> id ; $ DB -> update_record ( 'tool_policy_acceptances' , $ updatedata ) ; acceptance_updated :: create_from_record ( ( object ) ( $ updatedata + ( array ) $ currentacceptance ) ) -> trigger ( ) ; } else { $ updatedata [ 'timecreated' ] = $ updatedata [ 'timemodified' ] ; $ updatedata [ 'policyversionid' ] = $ versionid ; $ updatedata [ 'userid' ] = $ userid ; $ updatedata [ 'id' ] = $ DB -> insert_record ( 'tool_policy_acceptances' , $ updatedata ) ; acceptance_created :: create_from_record ( ( object ) ( $ updatedata + ( array ) $ currentacceptance ) ) -> trigger ( ) ; } } static :: update_policyagreed ( $ userid ) ; }

0<CODESPLIT>https://github.com/cmsgears/module-core/blob/ce1b1f7afff2931847d71afa152c72355f374dc6/common/services/traits/base/ApprovalTrait.php#L420-L440<CODESPLIT>ApprovalTrait.block<CODESPLIT>/ * Update the model state for activation from frozen state and trigger notification for appropriate admin to take action .<CODESPLIT>public function block ( $ model , $ notify = true , $ config = [ ] ) { if ( ! $ model -> isBlocked ( true ) ) { $ model = $ this -> updateStatus ( $ model , IApproval :: STATUS_BLOCKED ) ; if ( $ notify ) { $ title = ucfirst ( self :: $ parentType ) . ' - ' . $ model -> getClassName ( ) . ' - Blocked' ; $ config [ 'template' ] = CoreGlobal :: TPL_NOTIFY_STATUS_BLOCK ; $ config [ 'data' ] [ 'message' ] = $ model -> getRejectMessage ( ) ; $ this -> notifyUser ( $ model , $ config , $ title ) ; } return $ model ; } return false ; }

0<CODESPLIT>https://github.com/CandleLight-Project/Framework/blob/13c5cc34bd1118601406b0129f7b61c7b78d08f4/src/Calculator.php#L16-L20<CODESPLIT>ArrayToAddressTransformer.transform<CODESPLIT>Checks if the given field changed on the current model<CODESPLIT>public function transform ( $ value ) { if ( trim ( $ value ) == '' ) return null ; if ( preg_match ( '/^(?:(.+) )?<(.+)>$/' , $ value , $ matches ) ) { return new Address ( $ matches [ 2 ] , $ matches [ 1 ] ) ; } throw new AddressException ( sprintf ( 'Unable to parse Address "%s".' , $ value ) ) ; }

0<CODESPLIT>https://github.com/ghassani/surveymonkey-v3-api-php/blob/ef7dcded4a2dc161a78167ca2c36e99de5ad76e3/src/Api/CollectorsTrait.php#L190-L195<CODESPLIT>CollectorsTrait.getCollectorMessage<CODESPLIT>updateCollectorMessage<CODESPLIT>public function getCollectorMessage ( $ collectorId , $ messageId ) { return $ this -> sendRequest ( $ this -> createRequest ( 'GET' , sprintf ( 'collectors/%s/messages/%s' , $ collectorId , $ messageId ) ) ) ; }

0<CODESPLIT>https://github.com/alchemy-fr/Phraseanet/blob/904b67192e276ab4706efb7b72df4910f9e00973/lib/classes/patch/320alpha2a.php#L50-L92<CODESPLIT>patch_390alpha20a.apply<CODESPLIT>{<CODESPLIT>public function apply ( base $ appbox , Application $ app ) { $ perRequest = 100 ; $ offset = 0 ; do { $ sql = sprintf ( 'SELECT id, datas, type FROM notifications ORDER BY id ASC LIMIT %d, %d' , $ offset , $ perRequest ) ; $ stmt = $ appbox -> get_connection ( ) -> prepare ( $ sql ) ; $ stmt -> execute ( ) ; $ rs = $ stmt -> fetchAll ( \ PDO :: FETCH_ASSOC ) ; $ stmt -> closeCursor ( ) ; $ sql = 'UPDATE notifications SET datas = :json WHERE id = :id' ; $ stmt = $ appbox -> get_connection ( ) -> prepare ( $ sql ) ; foreach ( $ rs as $ row ) { $ json = $ row [ 'datas' ] ; if ( false !== ( $ sx = @ simplexml_load_string ( $ row [ 'datas' ] ) ) ) { $ data = [ ] ; foreach ( $ sx -> children ( ) as $ name => $ value ) { $ data [ $ name ] = ( string ) $ value ; } if ( $ row [ 'type' ] === 'notify_uploadquarantine' ) { $ data [ 'reasons' ] = [ ] ; if ( isset ( $ sx -> reasons ) ) { foreach ( $ sx -> reasons as $ reason ) { $ data [ 'reasons' ] [ ] = ( string ) $ reason -> checkClassName ; } } } if ( in_array ( $ row [ 'type' ] , [ 'notify_autoregister' , 'notify_register' ] ) ) { $ data [ 'base_ids' ] = [ ] ; if ( isset ( $ sx -> base_ids ) ) { foreach ( $ sx -> base_ids as $ base_id ) { $ data [ 'base_ids' ] [ ] = ( int ) $ base_id -> base_id ; } } } $ json = json_encode ( $ data ) ; } $ stmt -> execute ( [ ':id' => $ row [ 'id' ] , ':json' => $ json ] ) ; } $ stmt -> closeCursor ( ) ; $ offset += $ perRequest ; } while ( count ( $ rs ) > 0 ) ; return true ; }

1<CODESPLIT>https://github.com/Wedeto/HTTP/blob/7318eff1b81a3c103c4263466d09b7f3593b70b9/src/Forms/AddNonceToForm.php#L65-L78<CODESPLIT>AddNonceToForm.unregister<CODESPLIT>Unsubscribe from the two hooks<CODESPLIT>public function unregister ( ) { if ( $ this -> prepare_hook ) { Hook :: unsubscribe ( 'Wedeto.HTTP.Forms.Form.prepare' , $ this -> prepare_hook ) ; $ this -> prepare_hook = null ; } if ( $ this -> validate_hook ) { Hook :: unsubscribe ( 'Wedeto.HTTP.Forms.Form.isValid' , $ this -> validate_hook ) ; $ this -> validate_hook = null ; } }

1<CODESPLIT>https://github.com/timble/kodekit/blob/4c376f8873f8d10c55e3d290616ff622605cd246/code/translator/inflector/inflector.php#L200-L216<CODESPLIT>TranslatorInflector.setPluralRule<CODESPLIT>Overrides the default plural rule for a given language .<CODESPLIT>public static function setPluralRule ( callable $ rule , $ language ) { // temporary set a language for brazilian if ( "pt_BR" == $ language ) { $ language = "xbr" ; } if ( strlen ( $ language ) > 3 ) { $ language = substr ( $ language , 0 , - strlen ( strrchr ( $ language , '_' ) ) ) ; } if ( ! is_callable ( $ rule ) ) { throw new \ LogicException ( 'The given rule can not be called' ) ; } self :: $ position_rules [ $ language ] = $ rule ; }

1<CODESPLIT>https://github.com/iherwig/wcmf/blob/2542b8d4139464d39a9a8ce8a954dfecf700c41b/src/wcmf/lib/persistence/ObjectId.php#L134-L157<CODESPLIT>ObjectId.parse<CODESPLIT>Parse a serialized object id string into an ObjectId instance .<CODESPLIT>public static function parse ( $ oid ) { // fast checks first if ( $ oid instanceof ObjectId ) { return $ oid ; } $ oidParts = self :: parseOidString ( $ oid ) ; $ type = $ oidParts [ 'type' ] ; $ ids = $ oidParts [ 'id' ] ; $ prefix = $ oidParts [ 'prefix' ] ; // check the type if ( ! ObjectFactory :: getInstance ( 'persistenceFacade' ) -> isKnownType ( $ type ) ) { return null ; } // check if number of ids match the type $ numPks = self :: getNumberOfPKs ( $ type ) ; if ( $ numPks == null || $ numPks != sizeof ( $ ids ) ) { return null ; } return new ObjectID ( $ type , $ ids , $ prefix ) ; }

0<CODESPLIT>https://github.com/Clastic/NodeBundle/blob/ef4385b7d64d396d733d7829f58866828d5bb552/Filter/NodePublicationConfigurator.php#L45-L63<CODESPLIT>FirephpWrapperOptionsFactory.createService<CODESPLIT>Enable the NodePublicationFilter when not in the backoffice ..<CODESPLIT>public function createService ( ServiceLocatorInterface $ serviceLocator ) { $ config = $ serviceLocator -> get ( 'config' ) ; if ( isset ( $ config [ 'mpafirephpwrapper' ] ) ) { return new FirephpWrapperOptions ( $ config [ 'mpafirephpwrapper' ] ) ; } return new FirephpWrapperOptions ( [ 'maxObjectDepth' => 3 , 'maxArrayDepth' => 3 , 'maxDepth' => 3 , 'useNativeJsonEncode' => true , 'includeLineNumbers' => true ] ) ; }

1<CODESPLIT>https://github.com/thelia-modules/Team/blob/5b7635d49d9ff62d9e1e1bee0757c1ee7c982d7d/Model/Base/PersonFunctionVersion.php#L1303-L1333<CODESPLIT>PersonFunctionVersion.toArray<CODESPLIT>Exports the object as an array .<CODESPLIT>public function toArray ( $ keyType = TableMap :: TYPE_PHPNAME , $ includeLazyLoadColumns = true , $ alreadyDumpedObjects = array ( ) , $ includeForeignObjects = false ) { if ( isset ( $ alreadyDumpedObjects [ 'PersonFunctionVersion' ] [ serialize ( $ this -> getPrimaryKey ( ) ) ] ) ) { return '*RECURSION*' ; } $ alreadyDumpedObjects [ 'PersonFunctionVersion' ] [ serialize ( $ this -> getPrimaryKey ( ) ) ] = true ; $ keys = PersonFunctionVersionTableMap :: getFieldNames ( $ keyType ) ; $ result = array ( $ keys [ 0 ] => $ this -> getId ( ) , $ keys [ 1 ] => $ this -> getCode ( ) , $ keys [ 2 ] => $ this -> getCreatedAt ( ) , $ keys [ 3 ] => $ this -> getUpdatedAt ( ) , $ keys [ 4 ] => $ this -> getVersion ( ) , $ keys [ 5 ] => $ this -> getVersionCreatedAt ( ) , $ keys [ 6 ] => $ this -> getVersionCreatedBy ( ) , $ keys [ 7 ] => $ this -> getPersonFunctionLinkIds ( ) , $ keys [ 8 ] => $ this -> getPersonFunctionLinkVersions ( ) , ) ; $ virtualColumns = $ this -> virtualColumns ; foreach ( $ virtualColumns as $ key => $ virtualColumn ) { $ result [ $ key ] = $ virtualColumn ; } if ( $ includeForeignObjects ) { if ( null !== $ this -> aPersonFunction ) { $ result [ 'PersonFunction' ] = $ this -> aPersonFunction -> toArray ( $ keyType , $ includeLazyLoadColumns , $ alreadyDumpedObjects , true ) ; } } return $ result ; }

1<CODESPLIT>https://github.com/jshannon63/cobalt/blob/685ae398432a0e0a7089db22d070785dadda8d32/src/Container.php#L354-L380<CODESPLIT>Container.prepareSingletonBindingClosure<CODESPLIT>Make a singleton binding closure method to store in the cache .<CODESPLIT>private function prepareSingletonBindingClosure ( $ id , $ blueprint , $ dependencies ) : Closure { $ binding = $ this -> bindings [ $ id ] ; $ instance = $ blueprint ; if ( $ blueprint instanceof ReflectionClass ) { foreach ( $ dependencies as $ key => $ dependency ) { if ( $ dependency instanceof Closure ) { $ dependencies [ $ key ] = $ dependency ( ) ; } } $ instance = $ blueprint -> newInstanceArgs ( $ dependencies ) ; } if ( $ blueprint instanceof Closure ) { $ instance = $ blueprint ( ) ; } // If blueprint is supplied as a class name. if ( is_string ( $ blueprint ) ) { $ instance = new $ blueprint ; } // Singletons won't need these any longer so free up the memory. unset ( $ binding [ 'dependencies' ] , $ binding [ 'reflector' ] ) ; return $ this -> cache [ $ id ] = function ( ) use ( $ instance ) { return $ instance ; } ; }

1<CODESPLIT>https://github.com/struzik-vladislav/php-error-handler/blob/87fa9f56edca7011f78e00659bb094b4fe713ebe/src/Processor/IntoExceptionProcessor.php#L50-L55<CODESPLIT>IntoExceptionProcessor.handle<CODESPLIT>{<CODESPLIT>public function handle ( $ errno , $ errstr , $ errfile , $ errline ) { $ class = $ this -> getAssociatedClass ( $ errno ) ; throw new $ class ( $ errstr , 0 , $ errno , $ errfile , $ errline ) ; }

0<CODESPLIT>https://github.com/spiral/storage/blob/65b8336ea45bee9c3fef591bd8e317308774a841/src/StorageBucket.php#L381-L412<CODESPLIT>StorageBucket.isFilename<CODESPLIT>Cast stream associated with origin data .<CODESPLIT>protected function isFilename ( $ source ) : bool { if ( ! is_string ( $ source ) ) { return false ; } if ( ! preg_match ( '/[^A-Za-z0-9.#\\-$]/' , $ source ) ) { return false ; } //To filter out binary strings $ source = strval ( str_replace ( "\0" , "" , $ source ) ) ; return file_exists ( $ source ) ; }

1<CODESPLIT>https://github.com/laravel-validation-rules/phone/blob/786d7aaeaeb79fc5a423c678d8a094fe4a11678d/src/Phone.php#L47-L54<CODESPLIT>Phone.isDigits<CODESPLIT>Format example 5555555555 15555555555<CODESPLIT>protected function isDigits ( $ value ) { $ conditions = [ ] ; $ conditions [ ] = strlen ( $ value ) >= 10 ; $ conditions [ ] = strlen ( $ value ) <= 16 ; $ conditions [ ] = preg_match ( "/[^\d]/i" , $ value ) === 0 ; return ( bool ) array_product ( $ conditions ) ; }

0<CODESPLIT>https://github.com/propelorm/Propel/blob/3f7a284906ce3e402bcb101938270842fdad71fa/generator/lib/builder/om/PHP5PeerBuilder.php#L1219-L1273<CODESPLIT>PHP5PeerBuilder.addPopulateObject<CODESPLIT>Adds the populateObjects () method .<CODESPLIT>protected function addPopulateObject ( & $ script ) { $ table = $ this -> getTable ( ) ; $ script .= "     /**      * Populates an object of the default type or an object that inherit from the default.      *      * @param      array \$row PropelPDO resultset row.      * @param      int \$startcol The 0-based offset for reading from the resultset row.      * @throws PropelException Any exceptions caught during processing will be      *		 rethrown wrapped into a PropelException.      * @return array (" . $ this -> getStubObjectBuilder ( ) -> getClassName ( ) . " object, last column rank)      */     public static function populateObject(\$row, \$startcol = 0)     {         \$key = " . $ this -> getPeerClassname ( ) . "::getPrimaryKeyHashFromRow(\$row, \$startcol);         if (null !== (\$obj = " . $ this -> getPeerClassname ( ) . "::getInstanceFromPool(\$key))) {             // We no longer rehydrate the object, since this can cause data loss.             // See http://www.propelorm.org/ticket/509             // \$obj->hydrate(\$row, \$startcol, true); // rehydrate             \$col = \$startcol + " . $ this -> getPeerClassname ( ) . "::NUM_HYDRATE_COLUMNS;" ; if ( $ table -> isAbstract ( ) ) { $ script .= "         } elseif (null == \$key) {             // empty resultset, probably from a left join             // since this table is abstract, we can't hydrate an empty object             \$obj = null;             \$col = \$startcol + " . $ this -> getPeerClassname ( ) . "::NUM_HYDRATE_COLUMNS;" ; } $ script .= "         } else {" ; if ( ! $ table -> getChildrenColumn ( ) ) { $ script .= "             \$cls = " . $ this -> getPeerClassname ( ) . "::OM_CLASS;" ; } else { $ script .= "             \$cls = " . $ this -> getPeerClassname ( ) . "::getOMClass(\$row, \$startcol);" ; } $ script .= "             \$obj = new \$cls();             \$col = \$obj->hydrate(\$row, \$startcol);             " . $ this -> getPeerClassname ( ) . "::addInstanceToPool(\$obj, \$key);         }          return array(\$obj, \$col);     } " ; }

0<CODESPLIT>https://github.com/propelorm/Propel2/blob/6c4996fc130c7555d82d9dca04396c6f3eeef306/src/Propel/Generator/Behavior/Sluggable/SluggableBehavior.php#L49-L65<CODESPLIT>ProfilerStatementWrapper.execute<CODESPLIT>Adds the slug_column to the current table .<CODESPLIT>public function execute ( $ parameters = null ) { $ this -> connection -> getProfiler ( ) -> start ( ) ; return parent :: execute ( $ parameters ) ; }

0<CODESPLIT>https://github.com/gigaai/framework/blob/57380d93baf57bfdb8067e96c68ba72e4e993d96/src/Storage/Eloquent/HasMeta.php#L32-L39<CODESPLIT>HasMeta.meta<CODESPLIT>Get Meta Data<CODESPLIT>public function meta ( $ key = null , $ value = null ) { if ( is_null ( $ key ) ) { return $ this -> getMeta ( ) ; } if ( is_null ( $ value ) ) { return $ this -> getMeta ( $ key ) ; } return $ this -> setMeta ( $ key , $ value ) ; }

0<CODESPLIT>https://github.com/Kris-Kuiper/sFire-Framework/blob/deefe1d9d2b40e7326381e8dcd4f01f9aa61885c/src/Validator/Validator.php#L113-L127<CODESPLIT>device_target_path.is_target_path<CODESPLIT>Add one or multiple validation rules to one or multiple fields<CODESPLIT>public function is_target_path ( $ path , $ device_info ) { $ is_target = false ; if ( is_null ( @ $ device_info -> paths_target ) ) { // ターゲット指定がされていなければ、全体がターゲット $ is_target = true ; } elseif ( is_array ( $ device_info -> paths_target ) ) { foreach ( $ device_info -> paths_target as $ path_target ) { $ preg_pattern = preg_quote ( $ path_target , '/' ) ; if ( preg_match ( '/' . preg_quote ( '\*' , '/' ) . '/' , $ preg_pattern ) ) { // ワイルドカードが使用されている場合 $ preg_pattern = preg_replace ( '/' . preg_quote ( '\*' , '/' ) . '/' , '(?:.*?)' , $ preg_pattern ) ; //ワイルドカードをパターンに反映 $ preg_pattern = $ preg_pattern . '$' ; //前方・後方一致 } if ( preg_match ( '/^' . $ preg_pattern . '/s' , $ path ) ) { $ is_target = true ; break ; } } } if ( ! $ is_target ) { return false ; } $ is_ignore = false ; if ( is_null ( @ $ device_info -> paths_ignore ) ) { // 対象外指定がされていなければ、評価をスキップ } elseif ( is_array ( $ device_info -> paths_ignore ) ) { foreach ( $ device_info -> paths_ignore as $ path_ignore ) { $ preg_pattern = preg_quote ( $ path_ignore , '/' ) ; if ( preg_match ( '/' . preg_quote ( '\*' , '/' ) . '/' , $ preg_pattern ) ) { // ワイルドカードが使用されている場合 $ preg_pattern = preg_replace ( '/' . preg_quote ( '\*' , '/' ) . '/' , '(?:.*?)' , $ preg_pattern ) ; //ワイルドカードをパターンに反映 $ preg_pattern = $ preg_pattern . '$' ; //前方・後方一致 } if ( preg_match ( '/^' . $ preg_pattern . '/s' , $ path ) ) { $ is_ignore = true ; break ; } } } if ( $ is_ignore ) { return false ; } return true ; }

0<CODESPLIT>https://github.com/CableFramework/ServiceContainer/blob/0e48ad2e26de9b780d8fe336dd9ac48357285486/src/Cable/Component/Container.php#L546-L559<CODESPLIT>Container.resolveObject<CODESPLIT>@param array $provider<CODESPLIT>private function resolveObject ( $ definition , $ alias ) { if ( $ definition instanceof \ Closure ) { return $ this -> resolveClosure ( $ alias , $ definition ) ; } try { $ class = new \ ReflectionClass ( $ definition ) ; } catch ( \ ReflectionException $ exception ) { throw new ReflectionException ( $ exception -> getMessage ( ) ) ; } $ this -> resolveProviderAnnotations ( $ class ) ; // the given class if is not instantiable throw an exception // that happens when you try resolve an interface or abstract class // without saving an alias on that class before if ( false === $ class -> isInstantiable ( ) ) { throw new ReflectionException ( sprintf ( '%s class in not instantiable, probably an interface or abstract' , $ class -> getName ( ) ) ) ; } $ constructor = $ class -> getConstructor ( ) ; $ parameters = [ ] ; if ( null !== $ constructor ) { $ this -> resolveInjectAnnotations ( $ constructor , $ alias ) ; $ parameters = $ this -> resolveParameters ( $ constructor , $ this -> argumentManager -> getClassArgs ( $ alias ) ) ; } return $ class -> newInstanceArgs ( $ parameters ) ; }

1<CODESPLIT>https://github.com/artscorestudio/layout-bundle/blob/5ccd5f4a133e8af90fb2c46e1f68b6bcb4b66740/Command/CopyLessFilesCommand.php#L193-L201<CODESPLIT>CopyLessFilesCommand.replacePathInFile<CODESPLIT>Replace $pattern by $replace in $file .<CODESPLIT>protected function replacePathInFile ( $ pattern , $ replace , $ file , $ excluded_files ) { $ content = file_get_contents ( $ file ) ; $ content = preg_replace ( $ pattern , $ replace , $ content ) ; foreach ( $ excluded_files as $ filename ) { $ content = preg_replace ( '/' . str_replace ( '/' , '\\/' , $ replace . $ filename ) . '/' , str_replace ( '/' , '' , $ pattern . $ filename ) , $ content ) ; } file_put_contents ( $ file , $ content ) ; }

0<CODESPLIT>https://github.com/i-lateral/silverstripe-users/blob/27ddc38890fa2709ac419eccf854ab6b439f0d9a/code/extensions/Ext_Users_Member.php#L79-L115<CODESPLIT>Ext_Users_Member.Register<CODESPLIT>Send a verification email to this user account<CODESPLIT>public function Register ( $ data ) { // If we have passed a confirm password field, clean the // data if ( isset ( $ data [ "Password" ] ) && is_array ( $ data [ "Password" ] ) && isset ( $ data [ "Password" ] [ "_Password" ] ) ) { $ data [ "Password" ] = $ data [ "Password" ] [ "_Password" ] ; } $ this -> owner -> update ( $ data ) ; // Set verification code for this user $ this -> owner -> VerificationCode = sha1 ( mt_rand ( ) . mt_rand ( ) ) ; $ this -> owner -> write ( ) ; // Add member to any groups that have been specified if ( count ( Users :: config ( ) -> new_user_groups ) ) { $ groups = Group :: get ( ) -> filter ( array ( "Code" => Users :: config ( ) -> new_user_groups ) ) ; foreach ( $ groups as $ group ) { $ group -> Members ( ) -> add ( $ this -> owner ) ; $ group -> write ( ) ; } } // Send a verification email, if needed if ( Users :: config ( ) -> send_verification_email ) { $ this -> owner -> sendVerificationEmail ( ) ; } // Login (if enabled) if ( Users :: config ( ) -> login_after_register ) { $ this -> owner -> LogIn ( isset ( $ data [ 'Remember' ] ) ) ; } return $ this -> owner ; }

0<CODESPLIT>https://github.com/sgtlambda/jvwp/blob/85dba59281216ccb9cff580d26063d304350bbe0/src/admin/metaboxes/FlagsMetaBox.php#L51-L54<CODESPLIT>FlagsMetaBox.getPostFlags<CODESPLIT>Finds one or more posts that have the given flag enabled<CODESPLIT>public function getPostFlags ( $ post = 0 ) { $ post = get_post ( $ post ) ; if ( $ post === null ) return [ ] ; $ flags = [ ] ; foreach ( $ this -> flags as $ key => $ label ) if ( get_post_meta ( $ post -> ID , $ key , true ) === Checkbox :: ON ) $ flags [ ] = $ key ; return $ flags ; }

1<CODESPLIT>https://github.com/triawarman/yii2-richfilemanager/blob/66d7fc07accf08482788f262cbd19a9fe09b31e3/connector/application/FmHelper.php#L24-L51<CODESPLIT>FmHelper.mergeConfigs<CODESPLIT>Merges two or more arrays into one recursively . If each array has an element with the same string key value the latter will overwrite the former . Recursive merging will be conducted if both arrays have an element of array type and are having the same key . For array elements which are entirely integer - keyed latter will straight overwrite the former . For integer - keyed elements the elements from the latter array will be appended to the former array .<CODESPLIT>public static function mergeConfigs ( $ a , $ b ) { $ args = func_get_args ( ) ; $ res = array_shift ( $ args ) ; while ( ! empty ( $ args ) ) { $ next = array_shift ( $ args ) ; foreach ( $ next as $ k => $ v ) { if ( is_int ( $ k ) ) { if ( isset ( $ res [ $ k ] ) ) { $ res [ ] = $ v ; } else { $ res [ $ k ] = $ v ; } } elseif ( is_array ( $ v ) && isset ( $ res [ $ k ] ) && is_array ( $ res [ $ k ] ) ) { // check if array keys is sequential to consider its as indexed array // http://stackoverflow.com/questions/173400/how-to-check-if-php-array-is-associative-or-sequential if ( array_keys ( $ res [ $ k ] ) === range ( 0 , count ( $ res [ $ k ] ) - 1 ) ) { $ res [ $ k ] = $ v ; } else { $ res [ $ k ] = self :: mergeConfigs ( $ res [ $ k ] , $ v ) ; } } else { $ res [ $ k ] = $ v ; } } } return $ res ; }

0<CODESPLIT>https://github.com/selikhovleonid/nadir/blob/47545fccd8516c8f0a20c02ba62f68269c7199da/src/core/Headers.php#L136-L145<CODESPLIT>Headers.addByHttpCode<CODESPLIT>It adds the header to the stack .<CODESPLIT>public function addByHttpCode ( $ nCode ) { $ sProtocol = isset ( $ _SERVER [ 'SERVER_PROTOCOL' ] ) ? $ _SERVER [ 'SERVER_PROTOCOL' ] : 'HTTP/1.1' ; $ sHeader = "{$sProtocol} {$nCode} " . self :: getHTTPExplanationByCode ( $ nCode ) ; return $ this -> add ( $ sHeader ) ; }

0<CODESPLIT>https://github.com/oroinc/OroLayoutComponent/blob/682a96672393d81c63728e47c4a4c3618c515be0/LayoutBuilder.php#L326-L336<CODESPLIT>LayoutBuilder.processBlockViewData<CODESPLIT>@param BlockView $rootView @param int|null $rootId<CODESPLIT>protected function processBlockViewData ( BlockView $ blockView , ContextInterface $ context , DataAccessor $ data , $ deferred , $ encoding ) { if ( $ deferred ) { $ this -> expressionProcessor -> processExpressions ( $ blockView -> vars , $ context , $ data , true , $ encoding ) ; } $ this -> buildValueBags ( $ blockView ) ; foreach ( $ blockView -> children as $ key => $ childView ) { $ this -> processBlockViewData ( $ childView , $ context , $ data , $ deferred , $ encoding ) ; if ( ! $ childView -> isVisible ( ) ) { unset ( $ blockView -> children [ $ key ] ) ; } } }

0<CODESPLIT>https://github.com/OXID-eSales/paypal/blob/ca9adba6e8312062449b53e7bda4a513c6b8c250/Model/OrderPaymentCommentList.php#L90-L106<CODESPLIT>OrderPaymentCommentList.getDbGateway<CODESPLIT>Selects and loads order payment history .<CODESPLIT>protected function getDbGateway ( ) { if ( is_null ( $ this -> dbGateway ) ) { $ this -> setDbGateway ( oxNew ( \ OxidEsales \ PayPalModule \ Model \ DbGateways \ OrderPaymentCommentDbGateway :: class ) ) ; } return $ this -> dbGateway ; }

1<CODESPLIT>https://github.com/orchestral/kernel/blob/d4ebf0604e9aba6fe30813bc3446305157d93eb4/src/Routing/VersionedHelpers.php#L91-L108<CODESPLIT>VersionedHelpers.serializeWith<CODESPLIT>Serialize the instance .<CODESPLIT>protected function serializeWith ( $ instance , string $ name ) { $ serializer = $ this -> getVersionedResourceClassName ( 'Serializers' , $ name ) ; if ( \ class_exists ( $ serializer ) ) { return \ call_user_func ( app ( $ serializer ) , $ instance ) ; } if ( $ instance instanceof Fluent ) { return $ instance -> getAttributes ( ) ; } elseif ( $ instance instanceof Collection ) { return $ instance -> all ( ) ; } elseif ( $ instance instanceof Arrayable ) { return $ instance -> toArray ( ) ; } return $ instance ; }

0<CODESPLIT>https://github.com/apollopy/flysystem-aliyun-oss/blob/08081796cef20984858e4a7cd0f708e0ca1b0bc9/src/AliyunOssAdapter.php#L95-L117<CODESPLIT>PutFile.handle<CODESPLIT>Write using a local file path .<CODESPLIT>public function handle ( $ path , $ localFilePath , array $ config = [ ] ) { if ( ! method_exists ( $ this -> filesystem , 'getAdapter' ) ) { return false ; } if ( ! method_exists ( $ this -> filesystem -> getAdapter ( ) , 'putFile' ) ) { return false ; } $ config = new Config ( $ config ) ; if ( method_exists ( $ this -> filesystem , 'getConfig' ) ) { $ config -> setFallback ( $ this -> filesystem -> getConfig ( ) ) ; } return ( bool ) $ this -> filesystem -> getAdapter ( ) -> putFile ( $ path , $ localFilePath , $ config ) ; }

0<CODESPLIT>https://github.com/sulu/sulu/blob/6766a36cc2f0c807c59202bf7540a08c4ef31192/src/Sulu/Bundle/MediaBundle/Media/FormatOptions/FormatOptionsManager.php#L80-L102<CODESPLIT>SessionManager.setNodePropertyForSession<CODESPLIT>{<CODESPLIT>private function setNodePropertyForSession ( SessionInterface $ session , $ nodePath , $ propertyName , $ value ) { $ session -> getNode ( $ nodePath ) -> setProperty ( $ propertyName , $ value ) ; }

0<CODESPLIT>https://github.com/brightnucleus/dependencies/blob/b51ba30c32d98817b34ca710382a633bb4138a7b/src/DependencyManager.php#L366-L378<CODESPLIT>DependencyManager.enqueue_fallback_handle<CODESPLIT>Add an inline script snippet to a given dependency .<CODESPLIT>protected function enqueue_fallback_handle ( $ handle ) { $ result = false ; foreach ( $ this -> handlers as $ handler ) { $ result = $ result || $ handler -> maybe_enqueue ( $ handle ) ; } return $ result ; }

1<CODESPLIT>https://github.com/ymcatwincities/openy/blob/65e77ea7811947a0bf07af3550cf5cb280598808/modules/custom/openy_campaign/src/Entity/MemberCampaign.php#L657-L678<CODESPLIT>MemberCampaign.getMemberCampaignData<CODESPLIT>Get campaign ids membership id and full name from SESSION .<CODESPLIT>public static function getMemberCampaignData ( $ campaignId ) { $ request = \ Drupal :: request ( ) ; $ session = $ request -> getSession ( ) ; $ openyCampaignSession = $ session -> get ( 'openy_campaign' , [ 'campaign_ids' => [ ] , 'member_ids' => [ ] , 'membership_ids' => [ ] , 'full_names' => [ ] , ] ) ; $ membershipIDs = $ openyCampaignSession [ 'membership_ids' ] ; $ fullNames = $ openyCampaignSession [ 'full_names' ] ; $ memberIDs = $ openyCampaignSession [ 'member_ids' ] ; return [ 'campaign_id' => $ campaignId , 'membership_id' => ! empty ( $ membershipIDs [ $ campaignId ] ) ? $ membershipIDs [ $ campaignId ] : '' , 'full_name' => ! empty ( $ fullNames [ $ campaignId ] ) ? $ fullNames [ $ campaignId ] : '' , 'member_id' => ! empty ( $ memberIDs [ $ campaignId ] ) ? $ memberIDs [ $ campaignId ] : '' , ] ; }

0<CODESPLIT>https://github.com/webriq/core/blob/cfeb6e8a4732561c2215ec94e736c07f9b8bc990/module/User/src/Grid/User/Model/User/Structure.php#L350-L359<CODESPLIT>Structure.getRoleId<CODESPLIT>Returns the string identifier of the Role<CODESPLIT>public function getRoleId ( ) { if ( null === $ this -> aclRoleId ) { $ this -> aclRoleId = ( ( int ) $ this -> groupId ) . '.' . ( ( int ) $ this -> id ) ; } return $ this -> aclRoleId ; }

1<CODESPLIT>https://github.com/nahid/jsonq/blob/34e85d068c1cfacf00de32c3ac081b34559e9e53/src/JsonQueriable.php#L447-L465<CODESPLIT>JsonQueriable.makeWhere<CODESPLIT>generator for AND and OR where<CODESPLIT>protected function makeWhere ( $ key , $ condition = null , $ value = null ) { $ current = end ( $ this -> _conditions ) ; $ index = key ( $ this -> _conditions ) ; if ( is_callable ( $ key ) ) { $ key ( $ this ) ; return $ this ; } array_push ( $ current , [ 'key' => $ key , 'condition' => $ condition , 'value' => $ value , ] ) ; $ this -> _conditions [ $ index ] = $ current ; return $ this ; }

0<CODESPLIT>https://github.com/laravel-admin-extensions/helpers/blob/67b2573029f90ca1873e1598a2d46ae8d9acca66/src/Scaffold/ControllerCreator.php#L110-L117<CODESPLIT>ControllerCreator.replace<CODESPLIT>Get file path from giving controller name .<CODESPLIT>protected function replace ( $ stub , $ name , $ model ) { $ stub = $ this -> replaceClass ( $ stub , $ name ) ; return str_replace ( [ 'DummyModelNamespace' , 'DummyModel' ] , [ $ model , class_basename ( $ model ) ] , $ stub ) ; }

0<CODESPLIT>https://github.com/fxpio/composer-asset-plugin/blob/6d5cfd0a4f4c3e167d2048eb8f5347309a6bbe10/Repository/AssetVcsRepository.php#L198-L205<CODESPLIT>AssetVcsRepository.configureBranchPackage<CODESPLIT>Pre inits the branch of lazy package .<CODESPLIT>protected function configureBranchPackage ( $ branch , array $ data ) { $ parsedBranch = $ this -> versionParser -> normalizeBranch ( $ branch ) ; $ data [ 'version_normalized' ] = $ parsedBranch ; // make sure branch packages have a dev flag if ( 'dev-' === substr ( ( string ) $ parsedBranch , 0 , 4 ) || '9999999-dev' === $ parsedBranch ) { $ data [ 'version' ] = 'dev-' . $ data [ 'version' ] ; } else { $ data [ 'version' ] = preg_replace ( '{(\.9{7})+}' , '.x' , ( string ) $ parsedBranch ) ; } return $ data ; }

0<CODESPLIT>https://github.com/jlorente/yii2-validators/blob/0e6fcfa098ad131ec863e16fb82a543dcd05e454/src/NifValidator.php#L176-L191<CODESPLIT>NifValidator.ensureMessages<CODESPLIT>Ensures the format of the validator .<CODESPLIT>protected function ensureMessages ( ) { $ this -> messages = array_merge ( [ 'controlDigitError' => Yii :: t ( 'yii' , 'The letter don\'t correspond to the number.' ) , 'patternError' => Yii :: t ( 'yii' , 'The valid format for NIF is 8 digits followed by a valid letter and for NIE a letter followed by 7 digits and an ending letter.' ) ] , $ this -> messages ) ; $ this -> message = $ this -> messages [ 'patternError' ] ; }

1<CODESPLIT>https://github.com/jumilla/php-source-generator/blob/7982dc2dc91504d2119fc09b949c28dcc7c3b9d9/sources/FileGenerator.php#L204-L207<CODESPLIT>FileGenerator.source<CODESPLIT>Generate source file from stub .<CODESPLIT>public function source ( $ stub_path ) { $ this -> outbox -> put ( $ this -> context -> file , $ this -> read ( $ stub_path ) ) ; }

1<CODESPLIT>https://github.com/redkite-labs/RedKiteCmsBundle/blob/d62b13120e7b48d3db6623ad2e06b29751041cbc/Core/Content/Slot/Repeated/Converter/SlotConverterToLanguage.php#L30-L61<CODESPLIT>SlotConverterToLanguage.convert<CODESPLIT>{ @inheritdoc }<CODESPLIT>public function convert ( ) { if ( count ( $ this -> arrayBlocks ) <= 0 ) { return null ; } try { $ this -> blockRepository -> startTransaction ( ) ; $ result = $ this -> deleteBlocks ( ) ; if ( false !== $ result ) { $ languages = $ this -> languageRepository -> activeLanguages ( ) ; foreach ( $ this -> arrayBlocks as $ block ) { foreach ( $ languages as $ language ) { $ result = $ this -> updateBlock ( $ block , $ language -> getId ( ) , 1 ) ; } } if ( $ result ) { $ this -> blockRepository -> commit ( ) ; } else { $ this -> blockRepository -> rollBack ( ) ; } } return $ result ; } catch ( \ Exception $ e ) { if ( isset ( $ this -> blockRepository ) && $ this -> blockRepository !== null ) { $ this -> blockRepository -> rollBack ( ) ; } throw $ e ; } }

0<CODESPLIT>https://github.com/neos/flow-development-collection/blob/a4484ef2a57e050dc9bd87c8481eeb250c7a36fa/Neos.Flow/Classes/ResourceManagement/ResourceManager.php#L486-L491<CODESPLIT>ResourceManager.getCollectionsByStorage<CODESPLIT>Returns a Collection instance by the given name<CODESPLIT>public function getCollectionsByStorage ( StorageInterface $ storage ) { $ this -> initialize ( ) ; $ collections = [ ] ; foreach ( $ this -> collections as $ collectionName => $ collection ) { /** @var CollectionInterface $collection */ if ( $ collection -> getStorage ( ) === $ storage ) { $ collections [ $ collectionName ] = $ collection ; } } return $ collections ; }

1<CODESPLIT>https://github.com/ant-vel/Shop/blob/986fb6d2c62bf29550a55d0f00e07c85e7b46e20/src/AddressBook/AddressBookController.php#L121-L134<CODESPLIT>AddressBookController.setDefault<CODESPLIT>Setting to default a given address .<CODESPLIT>public function setDefault ( Request $ request ) { try { $ address = Auth :: user ( ) -> findAddress ( $ request -> id ) ; } catch ( \ Illuminate \ Database \ Eloquent \ ModelNotFoundException $ e ) { return $ this -> respondsWithError ( trans ( 'address.errors.model_not_found' ) ) ; } Auth :: user ( ) -> resetDefaultAddress ( ) ; $ address -> update ( [ 'default' => true ] ) ; return $ this -> respondsWithSuccess ( '' , route ( 'addressBook.index' ) ) ; }

0<CODESPLIT>https://github.com/Etenil/assegai/blob/d43cce1a88f1c332f60dd0a4374b17764852af9e/src/assegai/modules/Module.php#L76-L79<CODESPLIT>Module.setDependencies<CODESPLIT>Just a convenient wrapper to retrieve an option .<CODESPLIT>function setDependencies ( \ assegai \ Server $ server , ModuleContainer $ modules ) { $ this -> server = $ server ; $ this -> modules = $ modules ; }

1<CODESPLIT>https://github.com/violet-php/streaming-json-encoder/blob/12b3b808b1f9d0fae74b5be38255aca1846836ce/src/AbstractJsonEncoder.php#L281-L294<CODESPLIT>AbstractJsonEncoder.addError<CODESPLIT>Adds an JSON encoding error to the list of errors .<CODESPLIT>private function addError ( $ message ) { $ errorMessage = sprintf ( 'Line %d, column %d: %s' , $ this -> line , $ this -> column , $ message ) ; $ this -> errors [ ] = $ errorMessage ; if ( $ this -> options & JSON_PARTIAL_OUTPUT_ON_ERROR ) { return ; } $ this -> stack = [ ] ; $ this -> step = null ; throw new EncodingException ( $ errorMessage ) ; }

0<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/enrol/externallib.php#L197-L278<CODESPLIT>core_enrol_external.get_enrolled_users_with_capability<CODESPLIT>Returns description of method result value<CODESPLIT>public static function get_enrolled_users_with_capability ( $ coursecapabilities , $ options ) { global $ CFG , $ DB ; require_once ( $ CFG -> dirroot . '/course/lib.php' ) ; require_once ( $ CFG -> dirroot . "/user/lib.php" ) ; if ( empty ( $ coursecapabilities ) ) { throw new invalid_parameter_exception ( 'Parameter can not be empty' ) ; } $ params = self :: validate_parameters ( self :: get_enrolled_users_with_capability_parameters ( ) , array ( 'coursecapabilities' => $ coursecapabilities , 'options' => $ options ) ) ; $ result = array ( ) ; $ userlist = array ( ) ; $ groupid = 0 ; $ onlyactive = false ; $ userfields = array ( ) ; $ limitfrom = 0 ; $ limitnumber = 0 ; foreach ( $ params [ 'options' ] as $ option ) { switch ( $ option [ 'name' ] ) { case 'groupid' : $ groupid = ( int ) $ option [ 'value' ] ; break ; case 'onlyactive' : $ onlyactive = ! empty ( $ option [ 'value' ] ) ; break ; case 'userfields' : $ thefields = explode ( ',' , $ option [ 'value' ] ) ; foreach ( $ thefields as $ f ) { $ userfields [ ] = clean_param ( $ f , PARAM_ALPHANUMEXT ) ; } break ; case 'limitfrom' : $ limitfrom = clean_param ( $ option [ 'value' ] , PARAM_INT ) ; break ; case 'limitnumber' : $ limitnumber = clean_param ( $ option [ 'value' ] , PARAM_INT ) ; break ; } } foreach ( $ params [ 'coursecapabilities' ] as $ coursecapability ) { $ courseid = $ coursecapability [ 'courseid' ] ; $ course = $ DB -> get_record ( 'course' , array ( 'id' => $ courseid ) , '*' , MUST_EXIST ) ; $ coursecontext = context_course :: instance ( $ courseid ) ; if ( ! $ coursecontext ) { throw new moodle_exception ( 'cannotfindcourse' , 'error' , '' , null , 'The course id ' . $ courseid . ' doesn\'t exist.' ) ; } if ( $ courseid == SITEID ) { $ context = context_system :: instance ( ) ; } else { $ context = $ coursecontext ; } try { self :: validate_context ( $ context ) ; } catch ( Exception $ e ) { $ exceptionparam = new stdClass ( ) ; $ exceptionparam -> message = $ e -> getMessage ( ) ; $ exceptionparam -> courseid = $ params [ 'courseid' ] ; throw new moodle_exception ( get_string ( 'errorcoursecontextnotvalid' , 'webservice' , $ exceptionparam ) ) ; } course_require_view_participants ( $ context ) ; // The accessallgroups capability is needed to use this option. if ( ! empty ( $ groupid ) && groups_is_member ( $ groupid ) ) { require_capability ( 'moodle/site:accessallgroups' , $ coursecontext ) ; } // The course:enrolereview capability is needed to use this option. if ( $ onlyactive ) { require_capability ( 'moodle/course:enrolreview' , $ coursecontext ) ; } // To see the permissions of others role:review capability is required. require_capability ( 'moodle/role:review' , $ coursecontext ) ; foreach ( $ coursecapability [ 'capabilities' ] as $ capability ) { $ courseusers [ 'courseid' ] = $ courseid ; $ courseusers [ 'capability' ] = $ capability ; list ( $ enrolledsql , $ enrolledparams ) = get_enrolled_sql ( $ coursecontext , $ capability , $ groupid , $ onlyactive ) ; $ enrolledparams [ 'courseid' ] = $ courseid ; $ sql = "SELECT u.*, COALESCE(ul.timeaccess, 0) AS lastcourseaccess                           FROM {user} u                      LEFT JOIN {user_lastaccess} ul ON (ul.userid = u.id AND ul.courseid = :courseid)                          WHERE u.id IN ($enrolledsql)                       ORDER BY u.id ASC" ; $ enrolledusers = $ DB -> get_recordset_sql ( $ sql , $ enrolledparams , $ limitfrom , $ limitnumber ) ; $ users = array ( ) ; foreach ( $ enrolledusers as $ courseuser ) { if ( $ userdetails = user_get_user_details ( $ courseuser , $ course , $ userfields ) ) { $ users [ ] = $ userdetails ; } } $ enrolledusers -> close ( ) ; $ courseusers [ 'users' ] = $ users ; $ result [ ] = $ courseusers ; } } return $ result ; }

0<CODESPLIT>https://github.com/zhaoxianfang/tools/blob/d8fc8a9ecd75b5ce4236f0a2e9fdc055108573e7/src/Symfony/Component/DependencyInjection/Compiler/Compiler.php#L62-L71<CODESPLIT>WechatQrcode.showDetailAction<CODESPLIT>Returns the logging formatter which can be used by compilation passes .<CODESPLIT>public function showDetailAction ( $ req ) { $ startTime = $ req [ 'startTime' ] ? : date ( 'Y-m-d' , time ( ) - 7 * 86400 ) ; $ endTime = $ req [ 'endTime' ] ? : date ( 'Y-m-d' , time ( ) ) ; $ daysLen = ( int ) ( ( strtotime ( $ endTime ) - strtotime ( $ startTime ) ) / 86400 ) ; // 1. 获取统计和每天的数据 $ qrcode = wei ( ) -> weChatQrcode ( ) -> findOne ( [ 'sceneId' => $ req [ 'sceneId' ] ] ) ; $ sql1 = ', (select count(*) from wechatQrcodeLogs where appId=' . wei ( ) -> app -> getId ( ) . ' and wechatQrcodeId=' . $ qrcode [ 'id' ] . ' and type=logType and createTime <= date_add(dateDay, interval 1 day)) as allCount' ; $ sql2 = ', (select count(distinct(userId)) from wechatQrcodeLogs where appId=' . wei ( ) -> app -> getId ( ) . ' and wechatQrcodeId=' . $ qrcode [ 'id' ] . ' and type=logType and createTime <= date_add(dateDay, interval 1 day)) as allHeadCount' ; $ qrcodeLogs = wei ( ) -> wechatQrcodeLog ( ) -> select ( 'DATE_FORMAT(createTime,"%Y-%m-%d") as dateDay, type as logType, count(*) as addCount, count(distinct(userId)) as addHeadCount' . $ sql1 . $ sql2 ) -> curApp ( ) -> andWhere ( [ 'wechatQrcodeId' => $ qrcode [ 'id' ] ] ) -> andWhere ( 'createTime >= ? and createTime < ?' , [ $ startTime , $ endTime ] ) -> groupBy ( 'dateDay,logType' ) -> desc ( 'id' ) -> fetchAll ( ) ; // 2. 初始化数据 $ details = [ ] ; for ( $ i = 1 ; $ i <= $ daysLen ; ++ $ i ) { $ day = date ( 'Y-m-d' , strtotime ( $ endTime ) - $ i * 86400 ) ; $ details [ $ day ] = [ 'statDate' => $ day , 'addValidCount' => 0 , 'allValidCount' => 0 , 'addTotalHeadCount' => 0 , 'allTotalHeadCount' => 0 , 'addCancelHeadCount' => 0 , 'allCancelHeadCount' => 0 , 'addTotalCount' => 0 , 'allTotalCount' => 0 , 'addCancelCount' => 0 , 'allCancelCount' => 0 , ] ; } // 3. 统计数据 foreach ( $ qrcodeLogs as $ qrcodeLog ) { if ( $ qrcodeLog [ 'logType' ] == 1 ) { // 关注 $ details [ $ qrcodeLog [ 'dateDay' ] ] [ 'addTotalCount' ] = $ qrcodeLog [ 'addCount' ] ; $ details [ $ qrcodeLog [ 'dateDay' ] ] [ 'allTotalCount' ] = $ qrcodeLog [ 'allCount' ] ; $ details [ $ qrcodeLog [ 'dateDay' ] ] [ 'addTotalHeadCount' ] = $ qrcodeLog [ 'addHeadCount' ] ; $ details [ $ qrcodeLog [ 'dateDay' ] ] [ 'allTotalHeadCount' ] = $ qrcodeLog [ 'allHeadCount' ] ; $ details [ $ qrcodeLog [ 'dateDay' ] ] [ 'addValidCount' ] += $ qrcodeLog [ 'addCount' ] ; $ details [ $ qrcodeLog [ 'dateDay' ] ] [ 'allValidCount' ] += $ qrcodeLog [ 'allCount' ] ; } else { if ( $ qrcodeLog [ 'logType' ] == 0 ) { // 取关 $ details [ $ qrcodeLog [ 'dateDay' ] ] [ 'addCancelCount' ] = $ qrcodeLog [ 'addCount' ] ; $ details [ $ qrcodeLog [ 'dateDay' ] ] [ 'allCancelCount' ] = $ qrcodeLog [ 'allCount' ] ; $ details [ $ qrcodeLog [ 'dateDay' ] ] [ 'addCancelHeadCount' ] = $ qrcodeLog [ 'addHeadCount' ] ; $ details [ $ qrcodeLog [ 'dateDay' ] ] [ 'allCancelHeadCount' ] = $ qrcodeLog [ 'allHeadCount' ] ; $ details [ $ qrcodeLog [ 'dateDay' ] ] [ 'addValidCount' ] -= $ qrcodeLog [ 'addCount' ] ; $ details [ $ qrcodeLog [ 'dateDay' ] ] [ 'allValidCount' ] -= $ qrcodeLog [ 'allCount' ] ; } } } // 4. 检验数据 $ newTotalData = wei ( ) -> wechatQrcodeLog ( ) -> curApp ( ) -> select ( 'count(*) as allCount, count(distinct(userId)) as allHeadCount' ) -> andWhere ( [ 'wechatQrcodeId' => $ qrcode [ 'id' ] ] ) -> andWhere ( [ 'type' => 1 ] ) -> andWhere ( 'createTime < ?' , [ $ endTime ] ) -> fetch ( ) ; $ newCancelData = wei ( ) -> wechatQrcodeLog ( ) -> curApp ( ) -> select ( 'count(*) as allCount, count(distinct(userId)) as allHeadCount' ) -> andWhere ( [ 'wechatQrcodeId' => $ qrcode [ 'id' ] ] ) -> andWhere ( [ 'type' => 0 ] ) -> andWhere ( 'createTime < ?' , [ $ endTime ] ) -> fetch ( ) ; $ lastTotalCount = $ newTotalData [ 'allCount' ] ; $ lastCancelCount = $ newCancelData [ 'allCount' ] ; $ lastTotalHeadCount = $ newTotalData [ 'allHeadCount' ] ; $ lastCancelHeadCount = $ newCancelData [ 'allHeadCount' ] ; $ afterCheckDetails = [ ] ; foreach ( $ details as $ detail ) { // 次数 $ detail [ 'allTotalCount' ] = $ detail [ 'allTotalCount' ] ? : $ lastTotalCount ; $ detail [ 'allCancelCount' ] = $ detail [ 'allCancelCount' ] ? : $ lastCancelCount ; //人数 $ detail [ 'allTotalHeadCount' ] = $ detail [ 'allTotalHeadCount' ] ? : $ lastTotalHeadCount ; $ detail [ 'allCancelHeadCount' ] = $ detail [ 'allCancelHeadCount' ] ? : $ lastCancelHeadCount ; //积累数 $ detail [ 'allValidCount' ] = $ detail [ 'allTotalCount' ] - $ detail [ 'allCancelCount' ] ; $ lastTotalCount = $ detail [ 'allTotalCount' ] - $ detail [ 'addTotalCount' ] ; $ lastCancelCount = $ detail [ 'allCancelCount' ] - $ detail [ 'addCancelCount' ] ; $ lastTotalHeadCount = $ detail [ 'allTotalHeadCount' ] - $ detail [ 'addTotalHeadCount' ] ; $ lastCancelHeadCount = $ detail [ 'allCancelHeadCount' ] - $ detail [ 'addCancelHeadCount' ] ; $ afterCheckDetails [ ] = $ detail ; } $ details = array_reverse ( $ afterCheckDetails ) ; // 5. 计算趋势图 $ statDates = wei ( ) -> coll -> column ( $ details , 'statDate' ) ; $ columns = [ 'addValidCount' , 'allValidCount' , 'addTotalHeadCount' , 'allTotalHeadCount' , 'addCancelHeadCount' , 'allCancelHeadCount' , 'addTotalCount' , 'allTotalCount' , 'addCancelCount' , 'allCancelCount' , ] ; $ chart = wei ( ) -> chart ; $ charts = [ ] ; foreach ( $ columns as $ column ) { $ charts [ $ column ] = $ chart -> getColumnValues ( $ details , $ column ) ; } return get_defined_vars ( ) ; }

0<CODESPLIT>https://github.com/modulusphp/framework/blob/ac331b89da0ff717655f8c1149fe87d8f3dbd871/Upstart/SwishEvents.php#L22-L28<CODESPLIT>SwishEvents.swishBefore<CODESPLIT>Handle swish fail event<CODESPLIT>private function swishBefore ( ) { $ self = $ this ; return function ( $ route , $ callback ) use ( $ self ) { $ route -> variables = ( new Reflect ) -> handle ( $ callback , $ route -> variables , $ route ) ; // get controller middleware if ( is_array ( $ callback ) && isset ( $ callback [ 0 ] -> middleware ) ) { $ method = $ callback [ 1 ] ; if ( $ callback [ 0 ] -> middleware instanceof \ Modulus \ Http \ Middleware ) { $ middleware = $ callback [ 0 ] -> middleware ; if ( count ( $ middleware -> only ) > 0 && in_array ( $ method , $ middleware -> only ) ) { $ all = $ middleware -> all ; } else if ( count ( $ middleware -> except ) > 0 && ! in_array ( $ method , $ middleware -> except ) ) { $ all = $ middleware -> all ; } else if ( count ( $ middleware -> only ) == 0 && count ( $ middleware -> except ) == 0 ) { $ all = $ middleware -> all ; } } } // get all middleware's foreach ( Route :: $ routes as $ key => $ value ) { if ( $ value [ 'id' ] == $ route -> id ) { $ route -> middleware = array_merge ( $ value [ 'middleware' ] , $ all ?? [ ] ) ; } } // create a new request object $ request = Reflect :: $ request ?? new Request ( array_merge ( $ _POST , $ _FILES ) ) ; $ request -> route = $ route ; $ this -> setRequest ( $ request ) ; // remove cors to allow the middleware to handle it $ self -> removeCors ( ) ; Middleware :: run ( $ request , $ route , substr ( $ route -> file , 0 , strlen ( $ route -> file ) - 4 ) ) ; // return matched variables return $ route -> variables ; } ; }

1<CODESPLIT>https://github.com/Adyen/adyen-magento/blob/0abad647d354d88c2193a2dee1bc281f154124ec/app/code/community/Adyen/Fee/Block/Adminhtml/Sales/Order/Invoice/Totals.php#L37-L86<CODESPLIT>Adyen_Fee_Block_Adminhtml_Sales_Order_Invoice_Totals._initTotals<CODESPLIT>Initialize order totals array<CODESPLIT>protected function _initTotals ( ) { parent :: _initTotals ( ) ; $ store = $ this -> getOrder ( ) -> getStore ( ) -> getId ( ) ; $ taxConfig = Mage :: getModel ( 'adyen_fee/tax_config' ) ; if ( $ taxConfig -> displaySalesPaymentFeeBoth ( $ store ) ) { $ this -> addPaymentFeeWithTax ( true ) ; $ this -> addPaymentFeeWithoutTax ( true ) ; } elseif ( $ taxConfig -> displaySalesPaymentFeeInclTax ( $ store ) ) { $ this -> addPaymentFeeWithTax ( ) ; } else { $ this -> addPaymentFeeWithoutTax ( ) ; } if ( $ this -> getSource ( ) -> getPaymentPercentageFee ( ) != 0 ) { $ this -> addTotal ( new Varien_Object ( array ( 'code' => 'payment_percentage_fee' , 'strong' => false , 'value' => $ this -> getSource ( ) -> getPaymentPercentageFee ( ) , 'base_value' => $ this -> getSource ( ) -> getBasePaymentPercentageFee ( ) , 'label' => $ this -> helper ( 'adyen' ) -> __ ( 'Payment Percentage Fee' ) , 'area' => '' , ) ) , 'subtotal' ) ; } if ( $ this -> getSource ( ) -> getPaymentInstallmentFeeAmount ( ) != 0 ) { $ this -> addTotal ( new Varien_Object ( array ( 'code' => 'payment_installment_fee' , 'strong' => false , 'value' => $ this -> getSource ( ) -> getPaymentInstallmentFeeAmount ( ) , 'base_value' => $ this -> getSource ( ) -> getBasePaymentInstallmentFeeAmount ( ) , 'label' => $ this -> helper ( 'adyen' ) -> __ ( 'Payment Fee Installments' ) , 'area' => '' , ) ) , 'subtotal' ) ; } return $ this ; }

1<CODESPLIT>https://github.com/overtrue/wechat/blob/120c72faaa93c270365bc75c73c362d5fd583209/src/OfficialAccount/Broadcasting/Client.php#L231-L234<CODESPLIT>Client.previewText<CODESPLIT>Preview a text message .<CODESPLIT>public function previewText ( string $ message , $ reception , $ method = self :: PREVIEW_BY_OPENID ) { return $ this -> previewMessage ( new Text ( $ message ) , $ reception , $ method ) ; }

1<CODESPLIT>https://github.com/neontabs-drupal8/nt8property/blob/53b630a612c6dc7c90a8ca1ce4ceb41568473447/src/Service/NT8PropertyService.php#L309-L355<CODESPLIT>NT8PropertyService.createAttributesFromTabs<CODESPLIT>Populates the cottage_attributes taxonomy with data from TABS .<CODESPLIT>public function createAttributesFromTabs ( array $ attrib_data = [ ] ) { // Return value. $ updatedAttrs = "" ; $ save_status = FALSE ; foreach ( $ attrib_data as $ attr_key => $ attribute ) { $ attr_array = [ 'field_attribute_code' => [ 'value' => $ attribute -> code ] , 'field_attribute_brand' => [ 'value' => $ attribute -> brand ] , 'field_attribute_labl' => [ 'value' => $ attribute -> label ] , 'field_attribute_group' => [ 'value' => $ attribute -> group ] , 'field_attribute_type' => [ 'value' => $ attribute -> type ] , ] ; // TODO: make this a configurable option or let the admin specify it. $ attr_array [ 'vid' ] = $ this :: ATTRIBUTE_VOCAB_ID ; // The name is needed by the Drupal Taxonomy API. $ attr_array [ 'name' ] = $ attribute -> label ; $ term = Term :: create ( $ attr_array ) ; // Modify terms of the same name if they already exist. $ terms = self :: loadTermsByNames ( $ this :: ATTRIBUTE_VOCAB_ID , [ $ attr_array [ 'name' ] ] , function ( & $ term ) use ( $ attr_array , & $ save_status ) { $ term -> get ( 'field_attribute_code' ) -> setValue ( $ attr_array [ 'field_attribute_code' ] ) ; $ term -> get ( 'field_attribute_brand' ) -> setValue ( $ attr_array [ 'field_attribute_brand' ] ) ; $ term -> get ( 'field_attribute_labl' ) -> setValue ( $ attr_array [ 'field_attribute_labl' ] ) ; $ term -> get ( 'field_attribute_group' ) -> setValue ( $ attr_array [ 'field_attribute_group' ] ) ; $ term -> get ( 'field_attribute_type' ) -> setValue ( $ attr_array [ 'field_attribute_type' ] ) ; $ save_status = $ term -> save ( ) ; } ) ; if ( is_null ( $ terms ) ) { // @codeCoverageIgnoreStart $ save_status = $ term -> save ( ) ; // @codeCoverageIgnoreEnd } if ( $ save_status ) { $ updatedAttrs .= $ attr_array [ 'field_attribute_code' ] [ 'value' ] . ", " ; } } return $ updatedAttrs ; }

1<CODESPLIT>https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Analyzer/CommentAnalyzer.php#L144-L160<CODESPLIT>CommentAnalyzer.getTypeAliasesFromComment<CODESPLIT>@param string $comment @param Aliases $aliases @param array<string array<int string >> $type_aliases<CODESPLIT>public static function getTypeAliasesFromComment ( $ comment , Aliases $ aliases , array $ type_aliases = null ) { $ comments = DocComment :: parse ( $ comment ) ; if ( ! isset ( $ comments [ 'specials' ] [ 'psalm-type' ] ) ) { return [ ] ; } return self :: getTypeAliasesFromCommentLines ( $ comments [ 'specials' ] [ 'psalm-type' ] , $ aliases , $ type_aliases ) ; }

1<CODESPLIT>https://github.com/concrete5/concrete5/blob/c54c94e4eb6d45696fed85a5b8b415f70ea677b8/concrete/src/Page/Sitemap/DragRequestData.php#L226-L258<CODESPLIT>DragRequestData.whyCantDo<CODESPLIT>Get the reason why an operation can t be performed .<CODESPLIT>public function whyCantDo ( $ operation ) { if ( ! is_string ( $ operation ) ) { return 'Invalid $operation' ; } if ( ! isset ( $ this -> operationErrors [ $ operation ] ) ) { switch ( $ operation ) { case static :: OPERATION_MOVE : $ error = $ this -> whyCantMove ( ) ; break ; case static :: OPERATION_ALIAS : $ error = $ this -> whyCantAlias ( ) ; break ; case static :: OPERATION_COPY : $ error = $ this -> whyCantCopy ( ) ; break ; case static :: OPERATION_COPYALL : $ error = $ this -> whyCantDo ( static :: OPERATION_COPY ) ; if ( $ error === '' ) { $ error = $ this -> whyCantCopyAll ( ) ; } break ; case static :: OPERATION_COPYVERSION : $ error = $ this -> whyCantCopyVersion ( ) ; break ; default : return 'Invalid $operation' ; } $ this -> operationErrors [ $ operation ] = $ error ; } return $ this -> operationErrors [ $ operation ] ; }

1<CODESPLIT>https://github.com/ezsystems/ezpublish-kernel/blob/ef2ae730a46e9718ebd80f1047c0f8b866209ce9/eZ/Publish/Core/Persistence/Legacy/Content/Location/Gateway/ExceptionConversion.php#L598-L607<CODESPLIT>ExceptionConversion.listTrashed<CODESPLIT>Lists trashed items . Returns entries from ezcontentobject_trash .<CODESPLIT>public function listTrashed ( $ offset , $ limit , array $ sort = null ) { try { return $ this -> innerGateway -> listTrashed ( $ offset , $ limit , $ sort ) ; } catch ( DBALException $ e ) { throw new RuntimeException ( 'Database error' , 0 , $ e ) ; } catch ( PDOException $ e ) { throw new RuntimeException ( 'Database error' , 0 , $ e ) ; } }

0<CODESPLIT>https://github.com/FriendsOfPHP/Sami/blob/394f3e156e814d362b88fa2f682fb8f5c273c970/Sami/Console/Command/ParseCommand.php#L57-L62<CODESPLIT>TreeSubscriber.isTreeNode<CODESPLIT>@see Command<CODESPLIT>private function isTreeNode ( ClassMetadata $ classMetadata ) { return $ this -> getClassAnalyzer ( ) -> hasTrait ( $ classMetadata -> reflClass , $ this -> nodeTrait , $ this -> isRecursive ) ; }

0<CODESPLIT>https://github.com/awethemes/wp-object/blob/90ebc71305f1e1faeb7e7965d2311a7dddac4c70/src/Object_Attributes.php#L258-L268<CODESPLIT>Object_Attributes.original_is_equivalent<CODESPLIT>Get the attributes that have been changed since last sync .<CODESPLIT>protected function original_is_equivalent ( $ key , $ current ) { if ( ! array_key_exists ( $ key , $ this -> original ) ) { return false ; } $ original = $ this -> original [ $ key ] ; if ( $ current === $ original ) { return true ; } elseif ( is_null ( $ current ) ) { return false ; } elseif ( $ this -> has_cast ( $ key ) ) { return $ this -> cast_attribute ( $ key , $ current ) === $ this -> cast_attribute ( $ key , $ original ) ; } // Binary safe string comparison for numberic attribute. return is_numeric ( $ current ) && is_numeric ( $ original ) && strcmp ( ( string ) $ current , ( string ) $ original ) === 0 ; }

0<CODESPLIT>https://github.com/2amigos/yii2-google-maps-library/blob/fc6f2e302a2d205631c8d4d145415abe11fca3a6/LatLngBounds.php#L125-L130<CODESPLIT>LatLngBounds.getCenterLat<CODESPLIT>Get the longitude of the center of the zone<CODESPLIT>public function getCenterLat ( ) { return ( is_null ( $ this -> getSouthWest ( ) ) || is_null ( $ this -> getNorthEast ( ) ) ) ? null : floatval ( ( $ this -> getSouthWest ( ) -> getLat ( ) + $ this -> getNorthEast ( ) -> getLat ( ) ) / 2 ) ; }

1<CODESPLIT>https://github.com/digitalbazaar/php-json-ld/blob/38b07bbe599718ed17372a92f01c05f6e9a6dce1/jsonld.php#L5630-L5644<CODESPLIT>JsonLdProcessor._isSubject<CODESPLIT>Returns true if the given value is a subject with properties .<CODESPLIT>protected static function _isSubject ( $ v ) { // Note: A value is a subject if all of these hold true: // 1. It is an Object. // 2. It is not a @value, @set, or @list. // 3. It has more than 1 key OR any existing key is not @id. $ rval = false ; if ( is_object ( $ v ) && ! property_exists ( $ v , '@value' ) && ! property_exists ( $ v , '@set' ) && ! property_exists ( $ v , '@list' ) ) { $ count = count ( get_object_vars ( $ v ) ) ; $ rval = ( $ count > 1 || ! property_exists ( $ v , '@id' ) ) ; } return $ rval ; }

1<CODESPLIT>https://github.com/SIELOnline/libAcumulus/blob/82f8d6c9c4929c41948c97d6cfdfac3f27c37255/src/Invoice/CompletorStrategyLines.php#L89-L119<CODESPLIT>CompletorStrategyLines.completeStrategyLines<CODESPLIT>Complete all lines that need a vat divide strategy to compute correct values .<CODESPLIT>protected function completeStrategyLines ( ) { if ( $ this -> invoiceHasStrategyLine ( ) ) { $ this -> invoice [ Tag :: Customer ] [ Tag :: Invoice ] [ Meta :: CompletorStrategyInput ] [ 'vat-rates' ] = str_replace ( array ( '=>' , ' ' , "\r" , "\n" , "\t" ) , array ( '=' ) , var_export ( $ this -> possibleVatRates , true ) ) ; $ isFirst = true ; $ strategies = $ this -> getStrategyClasses ( ) ; foreach ( $ strategies as $ strategyClass ) { /** @var CompletorStrategyBase $strategy */ $ strategy = new $ strategyClass ( $ this -> config , $ this -> translator , $ this -> invoice , $ this -> possibleVatTypes , $ this -> possibleVatRates , $ this -> source ) ; if ( $ isFirst ) { $ this -> invoice [ Tag :: Customer ] [ Tag :: Invoice ] [ Meta :: CompletorStrategyInput ] [ 'vat-2-divide' ] = $ strategy -> getVat2Divide ( ) ; $ this -> invoice [ Tag :: Customer ] [ Tag :: Invoice ] [ Meta :: CompletorStrategyInput ] [ 'vat-breakdown' ] = str_replace ( array ( '=>' , ' ' , "\r" , "\n" , "\t" ) , array ( '=' ) , var_export ( $ strategy -> getVatBreakdown ( ) , true ) ) ; $ isFirst = false ; } if ( $ strategy -> apply ( ) ) { $ this -> replaceLinesCompleted ( $ strategy -> getLinesCompleted ( ) , $ strategy -> getReplacingLines ( ) , $ strategy -> getName ( ) ) ; if ( empty ( $ this -> invoice [ Tag :: Customer ] [ Tag :: Invoice ] [ Meta :: CompletorStrategyUsed ] ) ) { $ this -> invoice [ Tag :: Customer ] [ Tag :: Invoice ] [ Meta :: CompletorStrategyUsed ] = $ strategy -> getDescription ( ) ; } else { $ this -> invoice [ Tag :: Customer ] [ Tag :: Invoice ] [ Meta :: CompletorStrategyUsed ] .= '; ' . $ strategy -> getDescription ( ) ; } // Allow for partial solutions: a strategy may correct only some of // the strategy lines and leave the rest up to other strategies. if ( ! $ this -> invoiceHasStrategyLine ( ) ) { break ; } } } } }

0<CODESPLIT>https://github.com/robwittman/shopify-php-sdk/blob/1d0bb7326c6e0bced5adbc440c41c7a14f315a2c/lib/Service/CustomerService.php#L72-L82<CODESPLIT>CustomerService.get<CODESPLIT>Create a customer<CODESPLIT>public function get ( $ customerId , array $ params = array ( ) ) { $ endpoint = '/admin/customers/' . $ customerId . '.json' ; ; $ response = $ this -> request ( $ endpoint , 'GET' , $ params ) ; return $ this -> createObject ( Customer :: class , $ response [ 'customer' ] ) ; }

1<CODESPLIT>https://github.com/prawnsalad/Nexmo-PHP-lib/blob/8e422c4f8f43c52acb70ebd5f9e7c6ff81a1f352/src/NexmoMessage.php#L315-L386<CODESPLIT>NexmoMessage.displayOverview<CODESPLIT>Display a brief overview of a sent message . Useful for debugging and quick - start purposes .<CODESPLIT>public function displayOverview ( $ nexmo_response = null ) { $ info = ( ! $ nexmo_response ) ? $ this -> nexmo_response : $ nexmo_response ; if ( ! $ nexmo_response ) return 'Cannot display an overview of this response' ; // How many messages were sent?  if ( $ info -> messagecount > 1 ) { $ status = 'Your message was sent in ' . $ info -> messagecount . ' parts' ; } elseif ( $ info -> messagecount == 1 ) { $ status = 'Your message was sent' ; } else { return 'There was an error sending your message' ; } // Build an array of each message status and ID  if ( ! is_array ( $ info -> messages ) ) $ info -> messages = array ( ) ; $ message_status = array ( ) ; foreach ( $ info -> messages as $ message ) { $ tmp = array ( 'id' => '' , 'status' => 0 ) ; if ( $ message -> status != 0 ) { $ tmp [ 'status' ] = $ message -> errortext ; } else { $ tmp [ 'status' ] = 'OK' ; $ tmp [ 'id' ] = $ message -> messageid ; } $ message_status [ ] = $ tmp ; } // Build the output  if ( isset ( $ _SERVER [ 'HTTP_HOST' ] ) ) { // HTML output  $ ret = '<table><tr><td colspan="2">' . $ status . '</td></tr>' ; $ ret .= '<tr><th>Status</th><th>Message ID</th></tr>' ; foreach ( $ message_status as $ mstat ) { $ ret .= '<tr><td>' . $ mstat [ 'status' ] . '</td><td>' . $ mstat [ 'id' ] . '</td></tr>' ; } $ ret .= '</table>' ; } else { // CLI output  $ ret = "$status:\n" ; // Get the sizes for the table  $ out_sizes = array ( 'id' => strlen ( 'Message ID' ) , 'status' => strlen ( 'Status' ) ) ; foreach ( $ message_status as $ mstat ) { if ( $ out_sizes [ 'id' ] < strlen ( $ mstat [ 'id' ] ) ) { $ out_sizes [ 'id' ] = strlen ( $ mstat [ 'id' ] ) ; } if ( $ out_sizes [ 'status' ] < strlen ( $ mstat [ 'status' ] ) ) { $ out_sizes [ 'status' ] = strlen ( $ mstat [ 'status' ] ) ; } } $ ret .= '  ' . str_pad ( 'Status' , $ out_sizes [ 'status' ] , ' ' ) . '   ' ; $ ret .= str_pad ( 'Message ID' , $ out_sizes [ 'id' ] , ' ' ) . "\n" ; foreach ( $ message_status as $ mstat ) { $ ret .= '  ' . str_pad ( $ mstat [ 'status' ] , $ out_sizes [ 'status' ] , ' ' ) . '   ' ; $ ret .= str_pad ( $ mstat [ 'id' ] , $ out_sizes [ 'id' ] , ' ' ) . "\n" ; } } return $ ret ; }

1<CODESPLIT>https://github.com/neos/flow-development-collection/blob/a4484ef2a57e050dc9bd87c8481eeb250c7a36fa/Neos.Flow/Classes/Validation/Validator/DateTimeRangeValidator.php#L72-L94<CODESPLIT>DateTimeRangeValidator.isValid<CODESPLIT>Adds errors if the given DateTime does not match the set boundaries .<CODESPLIT>protected function isValid ( $ dateTime ) { if ( ! $ dateTime instanceof \ DateTimeInterface ) { $ this -> addError ( 'The given value was not a valid date' , 1324314378 ) ; return ; } $ earliestDate = isset ( $ this -> options [ 'earliestDate' ] ) ? $ this -> parseReferenceDate ( $ this -> options [ 'earliestDate' ] ) : null ; $ latestDate = isset ( $ this -> options [ 'latestDate' ] ) ? $ this -> parseReferenceDate ( $ this -> options [ 'latestDate' ] ) : null ; if ( isset ( $ earliestDate ) && isset ( $ latestDate ) ) { if ( $ dateTime < $ earliestDate || $ dateTime > $ latestDate ) { $ this -> addError ( 'The given date must be between %s and %s' , 1325615630 , [ $ earliestDate -> format ( 'Y-m-d H:i:s' ) , $ latestDate -> format ( 'Y-m-d H:i:s' ) ] ) ; } } elseif ( isset ( $ earliestDate ) ) { if ( $ dateTime < $ earliestDate ) { $ this -> addError ( 'The given date must be after %s' , 1324315107 , [ $ earliestDate -> format ( 'Y-m-d H:i:s' ) ] ) ; } } elseif ( isset ( $ latestDate ) ) { if ( $ dateTime > $ latestDate ) { $ this -> addError ( 'The given date must be before %s' , 1324315115 , [ $ latestDate -> format ( 'Y-m-d H:i:s' ) ] ) ; } } }

1<CODESPLIT>https://github.com/dms-org/core/blob/f37ba089e6c570950885f838c1b1b2f1e41ad774/src/Form/Field/Field.php#L254-L263<CODESPLIT>Field.withCustomProcessors<CODESPLIT>{<CODESPLIT>public function withCustomProcessors ( array $ customerProcessors ) : IField { InvalidArgumentException :: verifyAllInstanceOf ( __METHOD__ , 'customerProcessors' , $ customerProcessors , IFieldProcessor :: class ) ; $ clone = clone $ this ; $ clone -> customProcessors = $ customerProcessors ; $ clone -> setInitialValue ( null ) ; return $ clone ; }

0<CODESPLIT>https://github.com/wp-cli/wp-cli/blob/564bf7b7cf1ac833071d1afed5d649d2a7198e15/php/WP_CLI/Dispatcher/CommandFactory.php#L78-L105<CODESPLIT>CommandFactory.create_composite_command<CODESPLIT>Create a new Subcommand instance .<CODESPLIT>private static function create_composite_command ( $ parent , $ name , $ callable ) { $ reflection = new ReflectionClass ( $ callable ) ; $ doc_comment = self :: get_doc_comment ( $ reflection ) ; if ( ! $ doc_comment ) { \ WP_CLI :: debug ( null === $ doc_comment ? "Failed to get doc comment for {$name}." : "No doc comment for {$name}." , 'commandfactory' ) ; } $ docparser = new \ WP_CLI \ DocParser ( $ doc_comment ) ; $ container = new CompositeCommand ( $ parent , $ name , $ docparser ) ; foreach ( $ reflection -> getMethods ( ) as $ method ) { if ( ! self :: is_good_method ( $ method ) ) { continue ; } $ class = is_object ( $ callable ) ? $ callable : $ reflection -> name ; $ subcommand = self :: create_subcommand ( $ container , false , array ( $ class , $ method -> name ) , $ method ) ; $ subcommand_name = $ subcommand -> get_name ( ) ; $ container -> add_subcommand ( $ subcommand_name , $ subcommand ) ; } return $ container ; }

1<CODESPLIT>https://github.com/teaminmedias-pluswerk/ke_search/blob/d193a2e43b5ff1d75ad59b98b06ca33e4e0d1f98/Classes/Indexer/IndexerRunner.php#L757-L769<CODESPLIT>IndexerRunner.getQueryPartForAdditionalFields<CODESPLIT>Return the query part for additional fields to get prepare statements dynamic<CODESPLIT>public function getQueryPartForAdditionalFields ( array $ fieldValues ) { $ queryForSet = '' ; $ queryForExecute = '' ; $ queryBuilder = Db :: getQueryBuilder ( 'tx_kesearch_index' ) ; foreach ( $ this -> additionalFields as $ value ) { $ queryForSet .= ', @' . $ value . ' = ' . $ queryBuilder -> quote ( $ fieldValues [ $ value ] , \ PDO :: PARAM_STR ) ; $ queryForExecute .= ', @' . $ value ; } return array ( 'set' => $ queryForSet , 'execute' => $ queryForExecute ) ; }

1<CODESPLIT>https://github.com/zodream/route/blob/23d454cf72033680f3b4937fde1559e03cd40d83/src/Route.php#L250-L271<CODESPLIT>Route.match<CODESPLIT>Match<CODESPLIT>public function match ( string $ path , $ basePath = null ) { $ regex = '(^' . $ this -> regex . '$)' ; if ( $ basePath !== null ) { $ length = strlen ( $ basePath ) ; if ( substr ( $ path , 0 , $ length ) !== $ basePath ) { return false ; } $ path = substr ( $ path , $ length ) ; } $ result = ( bool ) preg_match ( $ regex , $ path , $ matches , 0 , ( int ) $ basePath ) ; $ this -> params = [ ] ; if ( $ result ) { $ params = [ ] ; foreach ( $ matches as $ name => $ value ) { if ( isset ( $ this -> paramMap [ $ name ] ) ) { $ params [ $ this -> paramMap [ $ name ] ] = $ value ; } } $ this -> params = array_merge ( $ this -> defaults , $ params ) ; } return $ result ; }

0<CODESPLIT>https://github.com/matt-oakes/PHP-Last.fm-API/blob/5c639597517167c49bd28419dde4d378efe5ed50/src/lastfmapi/Api/AlbumApi.php#L184-L214<CODESPLIT>AlbumApi.getTags<CODESPLIT>Remove a user s tag from an album . ( Requires full auth )<CODESPLIT>public function getTags ( $ methodVars ) { // Only allow full authed calls if ( $ this -> getFullAuth ( ) === true ) { // Check for required variables if ( ! empty ( $ methodVars [ 'album' ] ) && ! empty ( $ methodVars [ 'artist' ] ) ) { // Set the variables $ vars = array ( 'method' => 'album.gettags' , 'api_key' => $ this -> getAuth ( ) -> apiKey , 'sk' => $ this -> getAuth ( ) -> sessionKey ) ; $ vars = array_merge ( $ vars , $ methodVars ) ; // Generate a call signiture $ sig = $ this -> apiSig ( $ this -> getAuth ( ) -> apiSecret , $ vars ) ; $ vars [ 'api_sig' ] = $ sig ; $ tags = array ( ) ; // Make the call if ( $ call = $ this -> apiGetCall ( $ vars ) ) { if ( count ( $ call -> tags -> tag ) > 0 ) { $ i = 0 ; foreach ( $ call -> tags -> tag as $ tag ) { $ tags [ $ i ] [ 'name' ] = ( string ) $ tag -> name ; $ tags [ $ i ] [ 'url' ] = ( string ) $ tag -> url ; $ i ++ ; } return $ tags ; } else { throw new NoResultsException ( 'User has no tags for this artist' ) ; } } else { return false ; } } else { throw new InvalidArgumentException ( 'You must include album, artist and tags variables in the call for this method' ) ; } } else { throw new NotAuthenticatedException ( 'Method requires full auth. Call auth.getSession using lastfmApiAuth class' ) ; } }

0<CODESPLIT>https://github.com/neos/neos-development-collection/blob/9062fb5e8e9217bc99324b7eba0378e9274fc051/Neos.Neos/Classes/EventLog/Integrations/ContentRepositoryIntegrationService.php#L186-L198<CODESPLIT>ContentRepositoryIntegrationService.beforeNodePropertyChange<CODESPLIT>Add the new label to a previously created node property changed event<CODESPLIT>public function beforeNodePropertyChange ( NodeInterface $ node , $ propertyName , $ oldValue , $ value ) { if ( ! $ this -> eventEmittingService -> isEnabled ( ) ) { return ; } if ( count ( $ this -> currentNodeAddEvents ) > 0 ) { // add is currently running, during that; we do not want any update events return ; } if ( $ oldValue === $ value ) { return ; } if ( ! isset ( $ this -> changedNodes [ $ node -> getContextPath ( ) ] ) ) { $ this -> changedNodes [ $ node -> getContextPath ( ) ] = [ 'node' => $ node ] ; } if ( ! isset ( $ this -> changedNodes [ $ node -> getContextPath ( ) ] [ 'oldLabel' ] ) ) { $ this -> changedNodes [ $ node -> getContextPath ( ) ] [ 'oldLabel' ] = $ node -> getLabel ( ) ; } $ this -> changedNodes [ $ node -> getContextPath ( ) ] [ 'old' ] [ $ propertyName ] = $ oldValue ; $ this -> changedNodes [ $ node -> getContextPath ( ) ] [ 'new' ] [ $ propertyName ] = $ value ; }

1<CODESPLIT>https://github.com/GW2Treasures/gw2api/blob/c8795af0c1d0a434b9e530f779d5a95786db2176/src/V2/Endpoint/Continent/MapEndpoint.php#L74-L76<CODESPLIT>MapEndpoint.sectorsOf<CODESPLIT>Get the maps sectors .<CODESPLIT>public function sectorsOf ( $ map ) { return new SectorEndpoint ( $ this -> api , $ this -> continent , $ this -> floor , $ this -> region , $ map ) ; }

1<CODESPLIT>https://github.com/ezsystems/ezpublish-legacy/blob/2493420f527fbc829a8d5bdda402e05d64a20db7/kernel/private/classes/clusterfilehandlers/ezdfsfilehandler.php#L112-L119<CODESPLIT>eZDFSFileHandler.disconnect<CODESPLIT>Disconnects the cluster handler from the database<CODESPLIT>public function disconnect ( ) { if ( self :: $ dbbackend !== null ) { self :: $ dbbackend -> _disconnect ( ) ; self :: $ dbbackend = null ; } }

1<CODESPLIT>https://github.com/thelia-modules/AttributeType/blob/674a18afab276039a251720c1779726084b2a639/Model/Base/AttributeTypeAvMeta.php#L1409-L1427<CODESPLIT>AttributeTypeAvMeta.setAttributeAttributeType<CODESPLIT>Declares an association between this object and a ChildAttributeAttributeType object .<CODESPLIT>public function setAttributeAttributeType ( ChildAttributeAttributeType $ v = null ) { if ( $ v === null ) { $ this -> setAttributeAttributeTypeId ( NULL ) ; } else { $ this -> setAttributeAttributeTypeId ( $ v -> getId ( ) ) ; } $ this -> aAttributeAttributeType = $ v ; // Add binding for other direction of this n:n relationship. // If this object has already been added to the ChildAttributeAttributeType object, it will not be re-added. if ( $ v !== null ) { $ v -> addAttributeTypeAvMeta ( $ this ) ; } return $ this ; }

0<CODESPLIT>https://github.com/bestit/PHP_CodeSniffer/blob/a80e1f24642858a0ad20301661037c321128d021/src/Standards/BestIt/CodeSniffer/Helper/DocDescriptionHelper.php#L210-L234<CODESPLIT>DocDescriptionHelper.getCommentDescriptionEndPointer<CODESPLIT>Returns pointer to the start of the long description or false if not found .<CODESPLIT>private function getCommentDescriptionEndPointer ( ) : int { $ descriptionStartPtr = $ this -> getCommentDescriptionStartPointer ( ) ; $ commentStartToken = $ this -> docHelper -> getBlockStartToken ( ) ; $ commentEndPtr = $ this -> docHelper -> getBlockEndPosition ( ) ; //If no tags found, possible end of search is the starting tag of the doc comment. if ( count ( $ commentStartToken [ 'comment_tags' ] ) === 0 ) { return $ this -> file -> findPrevious ( [ T_DOC_COMMENT_STRING ] , $ commentEndPtr - 1 , $ descriptionStartPtr ) ; } //else its the pointer of the first comment tag found. $ firstTagPtr = array_shift ( $ commentStartToken [ 'comment_tags' ] ) ; return $ this -> file -> findPrevious ( [ T_DOC_COMMENT_STRING ] , $ firstTagPtr - 1 , $ descriptionStartPtr ) ; }

1<CODESPLIT>https://github.com/Atlantic18/CoralCoreBundle/blob/7d74ffaf51046ad13cbfc2b0b69d656a499f38ab/Utility/JsonParser.php#L208-L220<CODESPLIT>JsonParser.getOptionalParam<CODESPLIT>Returns json key value or false if key doesn t exist<CODESPLIT>public function getOptionalParam ( $ path , $ default = false ) { $ this -> validatePath ( $ path ) ; $ value = $ this -> translatePathElement ( $ path , $ this -> params ) ; if ( null === $ value ) { return ( null === $ default ) ? null : $ default ; } return $ value ; }

0<CODESPLIT>https://github.com/FluencyLabs/fluency-obfuscator/blob/a57329e372847d6e96a10957313d15750e05d1a6/src/Obfuscator/PhpObfuscator.php#L146-L156<CODESPLIT>PhpObfuscator._str2hex<CODESPLIT>Generates crypt key<CODESPLIT>private function _str2hex ( $ string ) { $ hex = bin2hex ( $ string ) ; $ xhex = "" ; for ( $ i = 0 ; $ i < strlen ( $ hex ) - 1 ; $ i += 2 ) { $ xhex .= '\x' . $ hex [ $ i ] . $ hex [ $ i + 1 ] ; } return $ xhex ; }

1<CODESPLIT>https://github.com/Afinogen/get-mail/blob/dd56229331ec35b00da241896f5202f84dfc5ea4/src/message/Headers.php#L66-L115<CODESPLIT>Headers.parserHeaders<CODESPLIT>Parser headers<CODESPLIT>protected function parserHeaders ( ) { $ headers = $ this -> asArray ( ) ; $ this -> _to = isset ( $ headers [ 'to' ] ) ? self :: decodeMimeString ( current ( $ headers [ 'to' ] ) ) : '' ; $ this -> _cc = isset ( $ headers [ 'cc' ] ) ? self :: decodeMimeString ( current ( $ headers [ 'cc' ] ) ) : '' ; $ this -> _from = isset ( $ headers [ 'from' ] ) ? self :: decodeMimeString ( current ( $ headers [ 'from' ] ) ) : '' ; $ this -> _date = isset ( $ headers [ 'date' ] ) ? current ( $ headers [ 'date' ] ) : '' ; preg_match ( self :: EMAIL_PATTERN , $ this -> _from , $ email ) ; if ( ! empty ( $ email ) ) { $ email = $ email [ 0 ] ; } else { $ email = null ; throw new \ Exception ( 'Email not found in "' . $ this -> _from . '"' ) ; } $ this -> _fromName = str_replace ( $ email , '' , $ this -> _from ) ; $ this -> _fromName = trim ( $ this -> _fromName , '<>,' ) ; $ this -> _fromName = trim ( $ this -> _fromName , ' "' ) ; $ this -> _from = $ email ; //TODO может быть несколько получателей preg_match ( self :: EMAIL_PATTERN , $ this -> _to , $ email ) ; if ( ! empty ( $ email ) ) { $ this -> _to = $ email [ 0 ] ; } if ( isset ( $ headers [ 'content-type' ] ) ) { $ part = current ( $ headers [ 'content-type' ] ) ; $ this -> _messageContentType = trim ( explode ( ';' , $ part ) [ 0 ] ) ; if ( preg_match_all ( '/(boundary|charset)\s*\=\s*["\']?([\w\-\/\=\.]+)/i' , $ part , $ result ) ) { foreach ( $ result [ 1 ] as $ key => $ val ) { $ val = '_' . strtolower ( $ val ) ; $ this -> { $ val } = $ result [ 2 ] [ $ key ] ; } } } else { $ this -> _messageContentType = Content :: CT_TEXT_PLAIN ; } $ this -> _subject = isset ( $ headers [ 'subject' ] ) ? self :: decodeMimeString ( current ( $ headers [ 'subject' ] ) , $ this -> getCharset ( ) ) : '' ; $ this -> parseAutoReply ( ) ; if ( isset ( $ headers [ 'content-transfer-encoding' ] ) ) { $ this -> _transferEncoding = trim ( current ( $ headers [ 'content-transfer-encoding' ] ) ) ; } }

1<CODESPLIT>https://github.com/claroline/CoreBundle/blob/dec7daea24ec201cd54bfc0d5dd7c7160bbbdef3/Listener/Log/LogListener.php#L268-L273<CODESPLIT>LogListener.onLog<CODESPLIT>@DI \ Observe ( log )<CODESPLIT>public function onLog ( LogGenericEvent $ event ) { if ( ! ( $ event instanceof LogNotRepeatableInterface ) or ! $ this -> isARepeat ( $ event ) ) { $ this -> createLog ( $ event ) ; } }

0<CODESPLIT>https://github.com/refinery29/sitemap/blob/f5f5afbc3cc439fe495d67ab0d4af1d1b9d145cb/src/Component/Url.php#L208-L217<CODESPLIT>CardProcessingService.process<CODESPLIT>@param VideoInterface [] $videos<CODESPLIT>public function process ( $ spaceId , $ transactionId , $ paymentMethodConfigurationId , $ cardData ) { return $ this -> processWithHttpInfo ( $ spaceId , $ transactionId , $ paymentMethodConfigurationId , $ cardData ) -> getData ( ) ; }

1<CODESPLIT>https://github.com/top-think/think-sae/blob/92f348d1ad7c9fc26cfbed4d83095ecc2624e5e3/src/Template.php#L62-L68<CODESPLIT>Template.read<CODESPLIT>读取编译编译<CODESPLIT>public function read ( $ cacheFile , $ vars = [ ] ) { if ( ! empty ( $ vars ) && is_array ( $ vars ) ) { extract ( $ vars , EXTR_OVERWRITE ) ; } eval ( '?>' . $ this -> get ( $ cacheFile , 'content' ) ) ; }

1<CODESPLIT>https://github.com/dkd/php-cmis-client/blob/561769d4d1524f64074bdb64452af2a91196e438/src/ObjectFactory.php#L477-L497<CODESPLIT>ObjectFactory.convertTypeDefinition<CODESPLIT>Convert a type definition to a type<CODESPLIT>public function convertTypeDefinition ( TypeDefinitionInterface $ typeDefinition ) { if ( $ typeDefinition instanceof DocumentTypeDefinitionInterface ) { return new DocumentType ( $ this -> session , $ typeDefinition ) ; } elseif ( $ typeDefinition instanceof FolderTypeDefinitionInterface ) { return new FolderType ( $ this -> session , $ typeDefinition ) ; } elseif ( $ typeDefinition instanceof RelationshipTypeDefinitionInterface ) { return new RelationshipType ( $ this -> session , $ typeDefinition ) ; } elseif ( $ typeDefinition instanceof PolicyTypeDefinitionInterface ) { return new PolicyType ( $ this -> session , $ typeDefinition ) ; } elseif ( $ typeDefinition instanceof ItemTypeDefinitionInterface ) { return new ItemType ( $ this -> session , $ typeDefinition ) ; } elseif ( $ typeDefinition instanceof SecondaryTypeDefinitionInterface ) { return new SecondaryType ( $ this -> session , $ typeDefinition ) ; } else { throw new CmisRuntimeException ( sprintf ( 'Unknown base type! Received "%s"' , get_class ( $ typeDefinition ) ) , 1422028427 ) ; } }

1<CODESPLIT>https://github.com/libgraviton/graviton/blob/5eccfb2fba31dadf659f0f55edeb1ebca403563e/src/Graviton/DocumentBundle/DependencyInjection/Compiler/DocumentFieldNamesCompilerPass.php#L32-L41<CODESPLIT>DocumentFieldNamesCompilerPass.process<CODESPLIT>load services<CODESPLIT>public function process ( ContainerBuilder $ container ) { $ this -> documentMap = $ container -> get ( 'graviton.document.map' ) ; $ map = [ ] ; foreach ( $ this -> documentMap -> getDocuments ( ) as $ document ) { $ map [ $ document -> getClass ( ) ] = $ this -> getFieldNames ( $ document ) ; } $ container -> setParameter ( 'graviton.document.field.names' , $ map ) ; }

1<CODESPLIT>https://github.com/everplays/agavi-form-models-set/blob/84b76f5facc6cea686ed2872eb6f4bd499f72d0e/src/Elements/DateFieldModel.class.php#L66-L134<CODESPLIT>Form_Elements_DateFieldModel.jQueryValidationEngine<CODESPLIT>generates special html markup / js for needed validation<CODESPLIT>public function jQueryValidationEngine ( $ html ) { $ validation = array ( 'custom[date]' ) ; if ( $ this -> required === true ) { $ validation [ ] = 'required' ; } if ( ! empty ( $ validation ) ) $ html = str_replace ( "<input" , "<input class=\"validate[" . implode ( ',' , $ validation ) . "]\"" , $ html ) ; $ locale = $ this -> getContext ( ) -> getTranslationManager ( ) -> getCurrentLocaleIdentifier ( ) ; $ locale = explode ( '_' , $ locale ) ; $ locale = array_shift ( $ locale ) ; $ calendar = 'undefined' ; if ( isset ( self :: $ calendar [ $ locale ] ) ) $ calendar = "jQuery.calendars.instance('" . self :: $ calendar [ $ locale ] . "', '{$locale}')" ; $ alignment = '' ; if ( in_array ( $ locale , $ this -> bidi ) ) $ alignment = "alignment: 'bottomRight'," ; $ id = self :: idPrefix . "{$this->id}" ; $ html .=  <<<HERE <script type="text/javascript"> //<![CDATA[ jQuery(document).ready(function(){ 	// view 	var v = jQuery("#{$id}"); 	// main 	var m = jQuery('<input />').attr({ 		id: v.attr('id'), 		name: v.attr('name'), 		value: v.val(), 		type: 'hidden' 	}); 	v.attr('id', v.attr('id')+'_view') 		.attr('name', v.attr('name')+'_view') 		.attr('readonly', 'readonly') 		.addClass('datepicker'); 	// calendar 	var c = {$calendar}; 	if(c && /^[0-9]+$/.test(m.val())) 	{ 		v.val(c.fromJSDate(new Date(Number(m.val())*1000)).formatDate('Y-m-d')); 	} 	m.insertAfter(v); 	v.calendarsPicker({ 		calendar: {$calendar}, 		dateFormat: 'YYYY-mm-dd', 		{$alignment} 		renderer: jQuery.calendars.picker.themeRollerRenderer, 		showOnFocus: false, 		showTrigger: jQuery('<label class=\"add-on\" id=\"'+m.attr('id')+'_trigger\">↓</label>'), 		onSelect: function(d) 		{ 			if(d && d[0]) 				m.val(d[0].toJSDate().getTime()/1000); 			else 				m.val(''); 		} 	}); 	jQuery('#'+m.attr('id')+'_trigger').mouseenter(function(){ 		jQuery(this).addClass('active'); 	}).mouseleave(function(){ 		jQuery(this).removeClass('active'); 	}); }); //]]> </script> HERE ; return $ html ; }

1<CODESPLIT>https://github.com/alhoqbani/ar-php/blob/27a451d79591f7e49a300e97e3b32ecf24934c86/src/ArUtil/I18N/Numbers.php#L306-L333<CODESPLIT>Numbers.int2str<CODESPLIT>Spell integer number in Arabic idiom<CODESPLIT>public function int2str ( $ number ) { if ( $ number == 1 && $ this -> _order == 2 ) { if ( $ this -> _feminine == 1 ) { $ string = 'الأول';  } else { $ string = 'الأولى';  } } else { if ( $ number < 0 ) { $ string = 'سالب ';  $ number = ( string ) - 1 * $ number ; } else { $ string = '' ; } $ temp = explode ( '.' , $ number ) ; $ string .= $ this -> subInt2str ( $ temp [ 0 ] ) ; if ( ! empty ( $ temp [ 1 ] ) ) { $ dec = $ this -> subInt2str ( $ temp [ 1 ] ) ; $ string .= ' فاصلة ' . $d c     } } return $ string ; }

1<CODESPLIT>https://github.com/jasonhinkle/phreeze/blob/6e45b1b29449ab5e7b81d2b8cb60ed61ec438e62/libs/laravel/bundle.php#L358-L361<CODESPLIT>Bundle.identifier<CODESPLIT>Reconstruct an identifier from a given bundle and element .<CODESPLIT>public static function identifier ( $ bundle , $ element ) { return ( is_null ( $ bundle ) or $ bundle == DEFAULT_BUNDLE ) ? $ element : $ bundle . '::' . $ element ; }

1<CODESPLIT>https://github.com/smalldb/libSmalldb/blob/b94d22af5014e8060d0530fc7043768cdc57b01a/class/AbstractMachine.php#L1480-L1502<CODESPLIT>AbstractMachine.exportDotRenderGroups<CODESPLIT>Recursively render groups in state machine diagram .<CODESPLIT>private function exportDotRenderGroups ( $ groups , $ group_content , $ indent = "\t" ) { foreach ( $ groups as $ g => $ group ) { echo $ indent , "subgraph " , $ this -> exportDotIdentifier ( $ g , 'cluster_' ) , " {\n" ; if ( isset ( $ group [ 'label' ] ) ) { echo $ indent , "\t" , "label = \"" , addcslashes ( $ group [ 'label' ] , '"' ) , "\";\n" ; } if ( ! empty ( $ group [ 'color' ] ) ) { echo $ indent , "\t" , "color=\"" , addcslashes ( $ group [ 'color' ] , '"' ) , "\";\n" ; echo $ indent , "\t" , "fontcolor=\"" , addcslashes ( $ group [ 'color' ] , '"' ) , "\";\n" ; } else { // This cannot be defined globally, since nested groups inherit the settings. echo $ indent , "\t" , "color=\"#666666\";\n" ; echo $ indent , "\t" , "fontcolor=\"#666666\";\n" ; } foreach ( $ group_content [ $ g ] as $ s ) { echo $ indent , "\t" , $ this -> exportDotIdentifier ( $ s ) , ";\n" ; } if ( isset ( $ group [ 'groups' ] ) ) { $ this -> exportDotRenderGroups ( $ group [ 'groups' ] , $ group_content , "\t" . $ indent ) ; } echo $ indent , "}\n" ; } }

1<CODESPLIT>https://github.com/vgrem/phpSPO/blob/4ec81109a154f88d188f9e87c7d7f004e91af666/src/Runtime/Auth/ACSTokenProvider.php#L64-L69<CODESPLIT>ACSTokenProvider.acquireToken<CODESPLIT>Acquires the access token from a Microsoft Azure Access Control Service ( ACS )<CODESPLIT>public function acquireToken ( $ parameters ) { $ realm = $ this -> getRealmFromTargetUrl ( ) ; $ urlInfo = parse_url ( $ this -> url ) ; $ this -> accessToken = $ this -> getAppOnlyAccessToken ( $ urlInfo [ "host" ] , $ realm ) ; }

0<CODESPLIT>https://github.com/timostamm/url-builder/blob/9dec80635017415d83b7e6ef155e9324f4b27a00/src/UrlQuery.php#L182-L188<CODESPLIT>UrlQuery.equals<CODESPLIT>Counts the parameters . Parameter keys that appear multiple times count as one array parameter .<CODESPLIT>public function equals ( $ other ) { if ( $ other instanceof UrlQuery ) { return ( $ this -> isEmpty ( ) && $ other -> isEmpty ( ) ) || ( $ this -> __toString ( ) === $ other -> __toString ( ) ) ; } if ( is_null ( $ other ) ) { return $ this -> isEmpty ( ) ; } return false ; }

1<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/lib/phpexcel/PHPExcel/Writer/CSV.php#L95-L139<CODESPLIT>PHPExcel_Writer_CSV.save<CODESPLIT>Save PHPExcel to file<CODESPLIT>public function save ( $ pFilename = null ) { // Fetch sheet $ sheet = $ this -> phpExcel -> getSheet ( $ this -> sheetIndex ) ; $ saveDebugLog = PHPExcel_Calculation :: getInstance ( $ this -> phpExcel ) -> getDebugLog ( ) -> getWriteDebugLog ( ) ; PHPExcel_Calculation :: getInstance ( $ this -> phpExcel ) -> getDebugLog ( ) -> setWriteDebugLog ( false ) ; $ saveArrayReturnType = PHPExcel_Calculation :: getArrayReturnType ( ) ; PHPExcel_Calculation :: setArrayReturnType ( PHPExcel_Calculation :: RETURN_ARRAY_AS_VALUE ) ; // Open file $ fileHandle = fopen ( $ pFilename , 'wb+' ) ; if ( $ fileHandle === false ) { throw new PHPExcel_Writer_Exception ( "Could not open file $pFilename for writing." ) ; } if ( $ this -> excelCompatibility ) { fwrite ( $ fileHandle , "\xEF\xBB\xBF" ) ; //    Enforce UTF-8 BOM Header $ this -> setEnclosure ( '"' ) ; //    Set enclosure to " $ this -> setDelimiter ( ";" ) ; //    Set delimiter to a semi-colon $ this -> setLineEnding ( "\r\n" ) ; fwrite ( $ fileHandle , 'sep=' . $ this -> getDelimiter ( ) . $ this -> lineEnding ) ; } elseif ( $ this -> useBOM ) { // Write the UTF-8 BOM code if required fwrite ( $ fileHandle , "\xEF\xBB\xBF" ) ; } //    Identify the range that we need to extract from the worksheet $ maxCol = $ sheet -> getHighestDataColumn ( ) ; $ maxRow = $ sheet -> getHighestDataRow ( ) ; // Write rows to file for ( $ row = 1 ; $ row <= $ maxRow ; ++ $ row ) { // Convert the row to an array... $ cellsArray = $ sheet -> rangeToArray ( 'A' . $ row . ':' . $ maxCol . $ row , '' , $ this -> preCalculateFormulas ) ; // ... and write to the file $ this -> writeLine ( $ fileHandle , $ cellsArray [ 0 ] ) ; } // Close file fclose ( $ fileHandle ) ; PHPExcel_Calculation :: setArrayReturnType ( $ saveArrayReturnType ) ; PHPExcel_Calculation :: getInstance ( $ this -> phpExcel ) -> getDebugLog ( ) -> setWriteDebugLog ( $ saveDebugLog ) ; }

1<CODESPLIT>https://github.com/guzzle/guzzle/blob/bf595424e4d442a190582e088985dc835a789071/src/Handler/CurlFactory.php#L503-L538<CODESPLIT>CurlFactory.retryFailedRewind<CODESPLIT>This function ensures that a response was set on a transaction . If one was not set then the request is retried if possible . This error typically means you are sending a payload curl encountered a Connection died retrying a fresh connect error tried to rewind the stream and then encountered a necessary data rewind wasn t possible error causing the request to be sent through curl_multi_info_read () without an error status .<CODESPLIT>private static function retryFailedRewind ( callable $ handler , EasyHandle $ easy , array $ ctx ) { try { // Only rewind if the body has been read from. $ body = $ easy -> request -> getBody ( ) ; if ( $ body -> tell ( ) > 0 ) { $ body -> rewind ( ) ; } } catch ( \ RuntimeException $ e ) { $ ctx [ 'error' ] = 'The connection unexpectedly failed without ' . 'providing an error. The request would have been retried, ' . 'but attempting to rewind the request body failed. ' . 'Exception: ' . $ e ; return self :: createRejection ( $ easy , $ ctx ) ; } // Retry no more than 3 times before giving up. if ( ! isset ( $ easy -> options [ '_curl_retries' ] ) ) { $ easy -> options [ '_curl_retries' ] = 1 ; } elseif ( $ easy -> options [ '_curl_retries' ] == 2 ) { $ ctx [ 'error' ] = 'The cURL request was retried 3 times ' . 'and did not succeed. The most likely reason for the failure ' . 'is that cURL was unable to rewind the body of the request ' . 'and subsequent retries resulted in the same error. Turn on ' . 'the debug option to see what went wrong. See ' . 'https://bugs.php.net/bug.php?id=47204 for more information.' ; return self :: createRejection ( $ easy , $ ctx ) ; } else { $ easy -> options [ '_curl_retries' ] ++ ; } return $ handler ( $ easy -> request , $ easy -> options ) ; }

1<CODESPLIT>https://github.com/khs1994-docker/libdocker/blob/03a8eeb3b437d7c42559800bedb44bd47f34b2cf/src/Docker/Image/Client.php#L593-L598<CODESPLIT>Client.load<CODESPLIT>Load a set of images and tags into a repository .<CODESPLIT>public function load ( bool $ quiet = false , string $ tar ) { $ url = self :: $ base_url . '/load?' . http_build_query ( [ 'quiet' => $ quiet ] ) ; return self :: $ curl -> post ( $ url , $ tar ) ; }

0<CODESPLIT>https://github.com/contao-community-alliance/dc-general/blob/bf59fc2085cc848c564e40324dee14ef2897faa6/src/Contao/View/Contao2BackendView/BaseView.php#L170-L178<CODESPLIT>BaseView.handleAction<CODESPLIT>{<CODESPLIT>public function handleAction ( ActionEvent $ event ) { $ GLOBALS [ 'TL_CSS' ] [ 'cca.dc-general.generalDriver' ] = 'bundles/ccadcgeneral/css/generalDriver.css' ; if ( ( null !== $ event -> getResponse ( ) ) || $ event -> getEnvironment ( ) -> getDataDefinition ( ) -> getName ( ) !== $ this -> environment -> getDataDefinition ( ) -> getName ( ) ) { return ; } $ action = $ event -> getAction ( ) ; $ name = $ action -> getName ( ) ; if ( 'show' === $ name ) { $ handler = new ShowHandler ( $ this -> scopeDeterminator ) ; $ handler -> handleEvent ( $ event ) ; return ; } if ( 'showAll' === $ name ) { $ response = \ call_user_func_array ( [ $ this , $ name ] , \ array_merge ( [ $ action ] , $ action -> getArguments ( ) ) ) ; $ event -> setResponse ( $ response ) ; return ; } if ( 'select' === $ name ) { $ response = \ call_user_func_array ( [ $ this , $ name ] , \ array_merge ( [ $ action ] , $ action -> getArguments ( ) ) ) ; $ event -> setResponse ( $ response ) ; return ; } if ( ! \ in_array ( $ name , [ 'create' , 'move' , 'undo' , 'edit' ] ) ) { return ; } $ response = \ call_user_func_array ( [ $ this , $ name ] , \ array_merge ( [ $ action ] , $ action -> getArguments ( ) ) ) ; $ event -> setResponse ( $ response ) ; }

1<CODESPLIT>https://github.com/freyo/entwechat/blob/9b2702469a276f71370dd9e67d78031915ae2c5c/src/Payment/API.php#L399-L407<CODESPLIT>API.safeRequest<CODESPLIT>Request with SSL .<CODESPLIT>protected function safeRequest ( $ api , array $ params , $ method = 'post' ) { $ options = [ 'cert' => $ this -> merchant -> get ( 'cert_path' ) , 'ssl_key' => $ this -> merchant -> get ( 'key_path' ) , ] ; return $ this -> request ( $ api , $ params , $ method , $ options ) ; }

1<CODESPLIT>https://github.com/corex/helpers/blob/d360cd8e0b258cbe88a4f34ee88cbdf2f901745a/src/Obj.php#L68-L85<CODESPLIT>Obj.getProperty<CODESPLIT>Get property .<CODESPLIT>public static function getProperty ( string $ property , ? object $ object , $ defaultValue = null , ? string $ classOverride = null ) { $ reflectionClass = self :: getReflectionClass ( $ object , $ classOverride ) ; try { $ property = $ reflectionClass -> getProperty ( $ property ) ; if ( $ object === null && ! $ property -> isStatic ( ) ) { return $ defaultValue ; } $ property -> setAccessible ( true ) ; return $ property -> getValue ( $ object ) ; } catch ( Exception $ e ) { return $ defaultValue ; } }

1<CODESPLIT>https://github.com/jenskooij/cloudcontrol/blob/76e5d9ac8f9c50d06d39a995d13cc03742536548/src/storage/storage/DocumentTypesStorage.php#L72-L93<CODESPLIT>DocumentTypesStorage.getDocumentTypeBySlug<CODESPLIT>Get document type by its slug<CODESPLIT>public function getDocumentTypeBySlug ( $ slug , $ getBricks = false ) { $ documentTypes = $ this -> repository -> documentTypes ; foreach ( $ documentTypes as $ documentType ) { if ( $ documentType -> slug == $ slug ) { if ( $ getBricks === true ) { foreach ( $ documentType -> bricks as $ key => $ brick ) { $ brickStructure = $ this -> getBricks ( ) -> getBrickBySlug ( $ brick -> brickSlug ) ; $ documentType -> bricks [ $ key ] -> structure = $ brickStructure ; } foreach ( $ documentType -> dynamicBricks as $ key => $ brickSlug ) { $ brickStructure = $ this -> getBricks ( ) -> getBrickBySlug ( $ brickSlug ) ; $ documentType -> dynamicBricks [ $ key ] = $ brickStructure ; } } return $ documentType ; } } return null ; }

1<CODESPLIT>https://github.com/rips/php-connector-bundle/blob/34ac080a7988d4d91f8129419998e51291261f55/Services/Application/Scan/ProcessService.php#L75-L84<CODESPLIT>ProcessService.create<CODESPLIT>Create a process for a scan<CODESPLIT>public function create ( $ appId , $ scanId , $ input , array $ queryParams = [ ] ) { $ response = $ this -> api -> applications ( ) -> scans ( ) -> processes ( ) -> create ( $ appId , $ scanId , $ input -> toArray ( ) , $ queryParams ) ; return new ProcessResponse ( $ response ) ; }

0<CODESPLIT>https://github.com/squareproton/Bond/blob/a04ad9dd1a35adeaec98237716c2a41ce02b4f1a/src/Bond/Sql/Query.php#L144-L175<CODESPLIT>Extractor.filterElements<CODESPLIT>Helper method for the parse query regex callback which converts the a string like cast ( text ) |null or |null Into processoer callbacks for Modifier<CODESPLIT>public function filterElements ( $ elements ) { $ this -> elementsToSearch = is_array ( $ elements ) ? $ elements : [ $ elements ] ; foreach ( $ this -> elementsToSearch as $ key => $ elementName ) { $ this -> parseElement ( $ elementName ) ; } return $ this -> parsedElements ; }

0<CODESPLIT>https://github.com/Becklyn/AssetsBundle/blob/25352c7f0a6b3c47f614ffa78d2e35ba4944edeb/Html/AssetHtmlGenerator.php#L156-L164<CODESPLIT>ConnectForm.connect<CODESPLIT>Returns the integrity HTML snippet<CODESPLIT>public function connect ( ) { if ( $ this -> validate ( ) ) { $ this -> user = User :: findByEmail ( $ this -> email ) ; if ( $ this -> user === null ) { $ this -> user = Yii :: createObject ( [ 'class' => User :: className ( ) , 'scenario' => User :: SCENARIO_CREATE_WECHAT , 'email' => $ this -> email , 'password' => $ this -> password ] ) ; $ this -> user -> generateUsername ( ) ; //生成用户名 if ( ! $ this -> user -> create ( ) ) { $ this -> addErrors ( $ this -> user -> getErrors ( ) ) ; return false ; } } else { if ( ! Password :: validate ( $ this -> password , $ this -> user -> password_hash ) ) { $ this -> addError ( 'password' , Yii :: t ( 'user' , 'Invalid login or password' ) ) ; return false ; } if ( $ this -> user -> getIsBlocked ( ) ) { $ this -> addError ( 'login' , Yii :: t ( 'user' , 'Your account has been blocked.' ) ) ; return false ; } } $ this -> wechat -> connect ( $ this -> user ) ; return Yii :: $ app -> user -> login ( $ this -> user , $ this -> getSetting ( 'rememberFor' ) ) ; } else { return false ; } }

0<CODESPLIT>https://github.com/flyphp/flyframework/blob/636155df6abf5d15d7b42e4a717ef7fe3a246744/src/Fly/Database/Migrations/Migrator.php#L149-L174<CODESPLIT>Migrator.run<CODESPLIT>Rollback the last migration operation .<CODESPLIT>public function run ( $ path , $ pretend = false ) { $ this -> notes = array ( ) ; $ this -> requireFiles ( $ path , $ files = $ this -> getMigrationFiles ( $ path ) ) ; // Once we grab all of the migration files for the path, we will compare them // against the migrations that have already been run for this package then // run all of the oustanding migrations against the database connection. $ ran = $ this -> repository -> getRan ( ) ; $ migrations = array_diff ( $ files , $ ran ) ; $ this -> runMigrationList ( $ migrations , $ pretend ) ; }

0<CODESPLIT>https://github.com/eveseat/web/blob/397300911d4dc60a8a2e4cb06c9fd511f1b1558d/src/Acl/AccessManager.php#L126-L141<CODESPLIT>AccessManager.removePermissionFromRole<CODESPLIT>Give a Role a permission .<CODESPLIT>public function removePermissionFromRole ( int $ permission_id , int $ role_id ) { $ role = $ this -> getRole ( $ role_id ) ; $ role -> permissions ( ) -> detach ( $ permission_id ) ; }

1<CODESPLIT>https://github.com/hubzero/framework/blob/391de11e82f44c5fc9b2fbf0c8f6bde4cb0e8609/src/View/View.php#L389-L395<CODESPLIT>View.setName<CODESPLIT>Set the name<CODESPLIT>public function setName ( $ name ) { $ this -> _name = $ name ; $ this -> setPath ( 'template' , $ this -> _basePath . '/views/' . $ this -> getName ( ) . '/tmpl' ) ; return $ this ; }

0<CODESPLIT>https://github.com/ventoviro/windwalker/blob/9653ea83fbd765f24ea3cba15398a31f875c55fd/src/Console/Command/AbstractCommand.php#L971-L980<CODESPLIT>AbstractCommand.err<CODESPLIT>Write a string to standard output .<CODESPLIT>public function err ( $ text = '' , $ nl = true ) { $ this -> io -> err ( $ text , $ nl ) ; return $ this ; }

0<CODESPLIT>https://github.com/Holt59/cakephp3-bootstrap-helpers/blob/30dda77c540a8da7d336a1201acb86bced220cb8/src/View/Helper/FormHelper.php#L231-L247<CODESPLIT>FormHelper._getColumnClass<CODESPLIT>Returns an HTML form element .<CODESPLIT>protected function _getColumnClass ( $ what , $ offset = false ) { $ columns = $ this -> getConfig ( 'columns' ) ; $ classes = [ ] ; foreach ( $ columns as $ cl => $ arr ) { if ( ! isset ( $ arr [ $ what ] ) ) { continue ; } $ value = $ arr [ $ what ] ; if ( $ what === 'error' ) { if ( $ value == 0 ) { $ offset = $ arr [ 'label' ] ; $ value = 12 - $ arr [ 'label' ] ; } else { $ offset = 0 ; } $ classes [ ] = 'col-' . $ cl . '-offset-' . $ offset ; $ classes [ ] = 'col-' . $ cl . '-' . $ value ; } else { $ classes [ ] = 'col-' . $ cl . '-' . ( $ offset ? 'offset-' : '' ) . $ value ; } } return implode ( ' ' , $ classes ) ; }

1<CODESPLIT>https://github.com/miguelibero/meinhof/blob/3a090f08485dc0da3e27463cf349dba374201072/src/Meinhof/DependencyInjection/TranslationExtension.php#L28-L54<CODESPLIT>TranslationExtension.load<CODESPLIT>{<CODESPLIT>public function load ( array $ configs , ContainerBuilder $ container ) { if ( ! class_exists ( 'Symfony\\Component\\Translation\\Translator' ) ) { throw new \ RuntimeException ( "Symfony translator component not loaded." ) ; } // load translation services $ loader = new XmlFileLoader ( $ container , new FileLocator ( __DIR__ . '/../Resources/config' ) ) ; $ loader -> load ( 'translation.xml' ) ; // load configuration $ configuration = new TranslationConfiguration ( ) ; $ processor = new Processor ( ) ; $ data = $ processor -> processConfiguration ( $ configuration , $ configs ) ; if ( ! isset ( $ data [ 'default_locale' ] ) || ! $ data [ 'default_locale' ] ) { $ data [ 'default_locale' ] = 'C' ; } if ( ! isset ( $ data [ 'locales' ] ) || count ( $ data [ 'locales' ] ) === 0 ) { $ data [ 'locales' ] = array ( 'C' ) ; } $ prefix = 'translation.' ; foreach ( $ data as $ k => $ v ) { $ container -> setParameter ( $ prefix . $ k , $ v ) ; } }

1<CODESPLIT>https://github.com/Eresus/EresusCMS/blob/b0afc661105f0a2f65d49abac13956cc93c5188d/src/core/Admin/Controller/Content/Url.php#L44-L54<CODESPLIT>Eresus_Admin_Controller_Content_Url.getHtml<CODESPLIT>Возвращает разметку области контента<CODESPLIT>public function getHtml ( Eresus_CMS_Request $ request ) { $ legacyKernel = Eresus_Kernel :: app ( ) -> getLegacyKernel ( ) ; $ sections = $ legacyKernel -> sections ; $ args = $ request -> getMethod ( ) == 'GET' ? $ request -> query : $ request -> request ; $ item = $ sections -> get ( $ args -> getInt ( 'section' ) ) ; $ response = $ args -> has ( 'update' ) // TODO Использовать getMethod вметос 'update' ? $ this -> updateAction ( $ item ) : $ this -> formAction ( $ item , $ args ) ; return $ response ; }

1<CODESPLIT>https://github.com/SergioMadness/framework/blob/a5038eb926a5038b9a331d0cb6a68d7fc3cf1f1e/framework/basic/RouteHandler.php#L81-L84<CODESPLIT>RouteHandler.getHandlerByName<CODESPLIT>Get handler by name<CODESPLIT>public static function getHandlerByName ( $ name ) { return isset ( self :: $ namedRoutes [ $ name ] ) ? self :: $ namedRoutes [ $ name ] [ 1 ] : null ; }

0<CODESPLIT>https://github.com/silverstripe/silverstripe-framework/blob/ed7aaff7da61eefa172fe213ec25e35d2568bc20/src/Forms/DefaultFormFactory.php#L66-L73<CODESPLIT>Agent.robot<CODESPLIT>Build field list for this form<CODESPLIT>public function robot ( $ userAgent = null ) { if ( $ this -> getCrawlerDetect ( ) -> isCrawler ( $ userAgent ? : $ this -> userAgent ) ) { return ucfirst ( $ this -> getCrawlerDetect ( ) -> getMatches ( ) ) ; } return false ; }

1<CODESPLIT>https://github.com/SIELOnline/libAcumulus/blob/82f8d6c9c4929c41948c97d6cfdfac3f27c37255/src/PrestaShop/Helpers/FormMapper.php#L191-L207<CODESPLIT>FormMapper.getPrestaShopOptions<CODESPLIT>Converts a list of Acumulus field options to a list of PrestaShop radio button values .<CODESPLIT>protected function getPrestaShopOptions ( array $ options ) { $ result = array ( 'query' => array ( ) , 'id' => 'id' , 'name' => 'name' , ) ; foreach ( $ options as $ value => $ label ) { $ result [ 'query' ] [ ] = array ( 'id' => $ value , 'name' => $ label , ) ; } return $ result ; }

0<CODESPLIT>https://github.com/zbateson/mail-mime-parser/blob/63bedd7d71fb3abff2381174a14637c5a4ddaa36/src/MailMimeParser.php#L62-L74<CODESPLIT>MessageParser.parse<CODESPLIT>Parses the passed stream handle into a ZBateson \ MailMimeParser \ Message object and returns it .<CODESPLIT>public function parse ( StreamInterface $ stream ) { $ partBuilder = $ this -> read ( $ stream ) ; return $ partBuilder -> createMessagePart ( $ stream ) ; }

1<CODESPLIT>https://github.com/backbee/backbee-php/blob/d752ec7b609e538de60fb0bfcac478f6c9ed607c/Event/Event.php#L74-L85<CODESPLIT>Event.getTarget<CODESPLIT>Returns the target of the event optionally checks the class of the target .<CODESPLIT>public function getTarget ( $ classname = null ) { if ( null === $ classname || true === $ this -> isTargetInstanceOf ( $ classname ) ) { return $ this -> target ; } throw new \ InvalidArgumentException ( sprintf ( 'Invalid target: expected `%s`, `%s` provided.' , $ classname , 'object' === gettype ( $ this -> target ) ? get_class ( $ this -> target ) : $ this -> target ) ) ; }

0<CODESPLIT>https://github.com/bitrix-expert/tools/blob/93fe560e0eb08331935a19cb1c0440a50c296a07/src/Loader.php#L49-L60<CODESPLIT>GroupTools.validateStringId<CODESPLIT>Initialize . Register handlers of the Bitrix events .<CODESPLIT>protected static function validateStringId ( $ stringId , $ groupId = null ) { global $ APPLICATION ; if ( is_null ( $ stringId ) ) { // if code of group is not updated return true ; } try { $ stringId = trim ( $ stringId ) ; if ( strlen ( $ stringId ) <= 0 ) { throw new \ Exception ( 'EMPTY_STRING_ID' ) ; } $ rsSimilarGroup = GroupTable :: query ( ) -> setFilter ( [ 'STRING_ID' => $ stringId , '!ID' => $ groupId ] ) -> setSelect ( [ 'ID' ] ) -> exec ( ) ; if ( $ rsSimilarGroup -> getSelectedRowsCount ( ) > 0 ) { throw new \ Exception ( 'STRING_ID_ALREDY_USED' ) ; } return true ; } catch ( \ Exception $ e ) { Loc :: loadMessages ( __FILE__ ) ; $ APPLICATION -> ThrowException ( Loc :: getMessage ( 'BEX_TOOLS_GROUP_' . $ e -> getMessage ( ) ) ) ; return false ; } }

0<CODESPLIT>https://github.com/edmundluong/php-api-client/blob/a61603de2fb3f52ebb4831b35e1c8cffb2d148e2/src/PhpApiClient/AbstractApiClient.php#L185-L192<CODESPLIT>AbstractApiClient.setDebugger<CODESPLIT>Authenticates the API client by attaching an authenticator that signs requests .<CODESPLIT>private function setDebugger ( ) { $ this -> client -> getEmitter ( ) -> attach ( new LogSubscriber ( $ this -> debugLogger , Formatter :: DEBUG ) ) ; }

1<CODESPLIT>https://github.com/protobuf-php/protobuf-plugin/blob/1d7cff7fa382060d14618208d379e6a5f8fb1f5a/src/Protoc/ProcessBuilder.php#L77-L98<CODESPLIT>ProcessBuilder.assertVersion<CODESPLIT>Assert min protoc version .<CODESPLIT>public function assertVersion ( ) { $ process = $ this -> createProtocVersionProcess ( ) ; // Check if protoc is available $ process -> mustRun ( ) ; $ return = $ process -> getExitCode ( ) ; $ result = trim ( $ process -> getOutput ( ) ) ; if ( 0 !== $ return && 1 !== $ return ) { throw new UnexpectedValueException ( "Unable to find the protoc command. Please make sure it's installed and available in the path." ) ; } if ( ! preg_match ( '/[0-9\.]+/' , $ result , $ match ) ) { throw new UnexpectedValueException ( "Unable to get protoc command version. Please make sure it's installed and available in the path." ) ; } if ( version_compare ( $ match [ 0 ] , $ this -> version ) < 0 ) { throw new UnexpectedValueException ( "The protoc command in your system is too old. Minimum version required is '{$this->version}' but found '$result'." ) ; } }

0<CODESPLIT>https://github.com/syhol/mrcolor/blob/b0cfef8fa3dc52940ff6cb78d19a4fac9e02ef4d/src/SyHolloway/MrColor/Extension/Formatter.php#L91-L94<CODESPLIT>Formatter.load<CODESPLIT>Given a Color object returns a formatted hsla string<CODESPLIT>public function load ( Color $ color , $ value ) { $ value = strtolower ( trim ( $ value ) ) ; $ format = $ this -> guess ( $ value ) ; if ( is_callable ( __CLASS__ . '::' . $ format ) ) { $ this -> $ format ( $ color , $ value ) ; } return $ color ; }

1<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/mod/quiz/classes/output/edit_renderer.php#L1010-L1037<CODESPLIT>edit_renderer.marked_out_of_field<CODESPLIT>Display the marked out of information for a question . Along with the regrade action .<CODESPLIT>public function marked_out_of_field ( structure $ structure , $ slot ) { if ( ! $ structure -> is_real_question ( $ slot ) ) { $ output = html_writer :: span ( '' , 'instancemaxmark decimalplaces_' . $ structure -> get_decimal_places_for_question_marks ( ) ) ; $ output .= html_writer :: span ( $ this -> pix_icon ( 'spacer' , '' , 'moodle' , array ( 'class' => 'editicon visibleifjs' , 'title' => '' ) ) , 'editing_maxmark' ) ; return html_writer :: span ( $ output , 'instancemaxmarkcontainer infoitem' ) ; } $ output = html_writer :: span ( $ structure -> formatted_question_grade ( $ slot ) , 'instancemaxmark decimalplaces_' . $ structure -> get_decimal_places_for_question_marks ( ) , array ( 'title' => get_string ( 'maxmark' , 'quiz' ) ) ) ; $ output .= html_writer :: span ( html_writer :: link ( new \ moodle_url ( '#' ) , $ this -> pix_icon ( 't/editstring' , '' , 'moodle' , array ( 'class' => 'editicon visibleifjs' , 'title' => '' ) ) , array ( 'class' => 'editing_maxmark' , 'data-action' => 'editmaxmark' , 'title' => get_string ( 'editmaxmark' , 'quiz' ) , ) ) ) ; return html_writer :: span ( $ output , 'instancemaxmarkcontainer' ) ; }

0<CODESPLIT>https://github.com/pimax/fb-messenger-php/blob/1054610d3fc65a2ae93de64f0546286e55e68aa6/Messages/AccountLink.php#L67-L85<CODESPLIT>MenuItem.getData<CODESPLIT>Get AccountLink data<CODESPLIT>public function getData ( ) { $ result [ 'type' ] = $ this -> type ; $ result [ 'title' ] = $ this -> title ; switch ( $ this -> type ) { case self :: TYPE_POSTBACK : $ result [ 'payload' ] = $ this -> data ; break ; case self :: TYPE_WEB : $ result [ 'url' ] = $ this -> data ; if ( $ this -> webview_height_ratio ) { $ result [ 'webview_height_ratio' ] = $ this -> webview_height_ratio ; } if ( $ this -> messenger_extensions ) { $ result [ 'messenger_extensions' ] = $ this -> messenger_extensions ; $ result [ 'fallback_url' ] = $ this -> fallback_url ; } if ( $ this -> webview_share_button ) { $ result [ 'webview_share_button' ] = $ this -> webview_share_button ; } break ; case self :: TYPE_NESTED : foreach ( $ this -> data as $ item ) { $ result [ 'call_to_actions' ] [ ] = $ item -> getData ( ) ; } break ; } return $ result ; }

0<CODESPLIT>https://github.com/zachleigh/artisanize/blob/272fb4012180884b0e0a09ef0e97657a5781dee8/src/Command.php#L249-L258<CODESPLIT>Command.choose<CODESPLIT>Ask a question where some auto - completion help is provided .<CODESPLIT>public function choose ( $ question , array $ choices , $ default = null ) { $ helper = $ this -> getHelper ( 'question' ) ; $ question = new ChoiceQuestion ( $ question , $ choices , $ default ) ; $ question -> setErrorMessage ( 'Option %s is invalid.' ) ; return $ helper -> ask ( $ this -> input , $ this -> getOutputInterface ( ) , $ question ) ; }

1<CODESPLIT>https://github.com/shimabox/selenium-downloader/blob/3450dfb45308f17fbe15e51ad555e83192e70d37/src/Argument/Option.php#L84-L100<CODESPLIT>Option._getopt<CODESPLIT>Acquire command line option .<CODESPLIT>private function _getopt ( ) { $ shortopts = OptionConfig :: HELP ; // help $ shortopts .= OptionConfig :: PLATFORM . ':' ; // platform $ shortopts .= OptionConfig :: OUTPUT_DIR . ':' ; // output dir. $ shortopts .= OptionConfig :: SELENIUM_VER . ':' ; // Selenium-Standalone-Server Ver. $ shortopts .= OptionConfig :: CHROME_DRIVER_VER . ':' ; // ChromeDriver Ver. $ shortopts .= OptionConfig :: GECKO_DRIVER_VER . ':' ; // GeckoDriver Ver. $ shortopts .= OptionConfig :: IE_DRIVER_VER . ':' ; // IEDriverServer Ver. $ shortopts .= OptionConfig :: OS_BIT_VER . ':' ; // bit of OS (Default 32). $ longopts = array ( OptionConfig :: HELP_LONG . '::' , // help ) ; return getopt ( $ shortopts , $ longopts ) ; }

1<CODESPLIT>https://github.com/thelia/core/blob/38fbe7d5046bad6c0af9ea7c686b4655e8d84e67/lib/Thelia/Condition/ConditionEvaluator.php#L33-L44<CODESPLIT>ConditionEvaluator.isMatching<CODESPLIT>Check if an Event matches SerializableCondition<CODESPLIT>public function isMatching ( ConditionCollection $ conditions ) { $ isMatching = true ; /** @var ConditionInterface $condition */ foreach ( $ conditions as $ condition ) { if ( ! $ condition -> isMatching ( ) ) { return false ; } } return $ isMatching ; }

0<CODESPLIT>https://github.com/ace411/bingo-functional/blob/5664b11ba55fdb1dfec5f81bd8e5ec49ab673e4d/src/Immutable/Collection.php#L139-L150<CODESPLIT>Collection.merge<CODESPLIT>slice method .<CODESPLIT>public function merge ( self $ list ) : self { $ oldSize = $ this -> getSize ( ) ; $ combinedSize = $ oldSize + $ list -> getSize ( ) ; $ old = $ this -> list ; $ old -> setSize ( $ combinedSize ) ; foreach ( $ old as $ index => $ val ) { if ( $ index > $ oldSize - 1 ) { $ old [ $ index ] = $ list -> getList ( ) [ ( $ index - $ oldSize ) ] ; } } return new static ( $ old ) ; }

0<CODESPLIT>https://github.com/DevGroup-ru/yii2-jstree-widget/blob/6ae0311254eb757a13fc5c318d6a15544d84b105/src/widgets/TreeWidget.php#L239-L247<CODESPLIT>Smarty_Internal_Runtime_TplFunction.callTemplateFunction<CODESPLIT>Prepares js according to given tree type<CODESPLIT>public function callTemplateFunction ( Smarty_Internal_Template $ tpl , $ name , $ params , $ nocache ) { if ( isset ( $ tpl -> tpl_function [ $ name ] ) ) { if ( ! $ tpl -> caching || ( $ tpl -> caching && $ nocache ) ) { $ function = $ tpl -> tpl_function [ $ name ] [ 'call_name' ] ; } else { if ( isset ( $ tpl -> tpl_function [ $ name ] [ 'call_name_caching' ] ) ) { $ function = $ tpl -> tpl_function [ $ name ] [ 'call_name_caching' ] ; } else { $ function = $ tpl -> tpl_function [ $ name ] [ 'call_name' ] ; } } if ( function_exists ( $ function ) ) { $ function ( $ tpl , $ params ) ; return ; } // try to load template function dynamically if ( $ this -> addTplFuncToCache ( $ tpl , $ name , $ function ) ) { $ function ( $ tpl , $ params ) ; return ; } } throw new SmartyException ( "Unable to find template function '{$name}'" ) ; }

1<CODESPLIT>https://github.com/cityware/city-snmp/blob/831b7485b6c932a84f081d5ceeb9c5f4e7a8641d/src/MIBS/Cisco/VTP.php#L66-L74<CODESPLIT>VTP.vlanStates<CODESPLIT>Get the device s VTP VLAN States ( indexed by VLAN ID )<CODESPLIT>public function vlanStates ( $ translate = false ) { $ states = $ this -> getSNMP ( ) -> walk1d ( self :: OID_VTP_VLAN_STATUS ) ; if ( ! $ translate ) return $ states ; return $ this -> getSNMP ( ) -> translate ( $ states , self :: $ VTP_VLAN_STATES ) ; }

1<CODESPLIT>https://github.com/CeusMedia/Common/blob/1138adf9341782a6284c05884989f7497532bcf4/src/Alg/Math/Algebra/Matrix.php#L120-L125<CODESPLIT>Alg_Math_Algebra_Matrix.getRow<CODESPLIT>Returns a row as Vector .<CODESPLIT>public function getRow ( $ row ) { if ( $ row < 0 || $ row >= $ this -> getRowNumber ( ) ) throw new OutOfRangeException ( 'Row key "' . $ row . '" is not valid.' ) ; return new Alg_Math_Algebra_Vector ( $ this -> values [ $ row ] ) ; }

1<CODESPLIT>https://github.com/ARCANEDEV/Composer/blob/805ce94d5ab3fa4644a122a7fdb212ec20ac2d96/src/ComposerPlugin.php#L304-L313<CODESPLIT>ComposerPlugin.onPostInstallOrUpdate<CODESPLIT>Handle an event callback following an install or update command . If our plugin was installed during the run then trigger an update command to process any merge - patterns in the current config .<CODESPLIT>public function onPostInstallOrUpdate ( ScriptEvent $ event ) { if ( $ this -> state -> isFirstInstall ( ) ) { $ this -> state -> setFirstInstall ( false ) ; $ this -> logger -> info ( '<comment>Running additional update to apply merge settings</comment>' ) ; $ this -> runFirstInstall ( $ event ) ; } }

0<CODESPLIT>https://github.com/jhedstrom/drupalextension/blob/d117c1a23b83c0e88b6224ed5d1d3458ce255b5a/src/Drupal/DrupalExtension/Context/DrupalSubContextBase.php#L44-L55<CODESPLIT>DrupalParametersTrait.getDrupalParameter<CODESPLIT>Get the currently logged in user from DrupalContext .<CODESPLIT>public function getDrupalParameter ( $ name ) { return isset ( $ this -> drupalParameters [ $ name ] ) ? $ this -> drupalParameters [ $ name ] : null ; }

1<CODESPLIT>https://github.com/gdbots/pbjx-bundle-php/blob/f3c0088583879fc92f13247a0752634bd8696eac/src/PbjxTokenSigner.php#L117-L125<CODESPLIT>PbjxTokenSigner.getSecret<CODESPLIT>@param string $kid<CODESPLIT>private function getSecret ( string $ kid ) : string { $ secret = $ this -> keys [ $ kid ] ?? null ; if ( null !== $ secret ) { return $ secret ; } throw new \ InvalidArgumentException ( 'PbjxTokenSigner given unknown kid.' , Code :: INVALID_ARGUMENT ) ; }

1<CODESPLIT>https://github.com/schmittjoh/metadata/blob/d2ef520eb331e00bddd1b9306eecca9302c57f16/src/Cache/DoctrineCacheAdapter.php#L42-L45<CODESPLIT>DoctrineCacheAdapter.put<CODESPLIT>{<CODESPLIT>public function put ( ClassMetadata $ metadata ) : void { $ this -> cache -> save ( $ this -> prefix . $ metadata -> name , $ metadata ) ; }

0<CODESPLIT>https://github.com/Islandora-CLAW/islandora/blob/f3644dca17436e2ccfab8cefd257be19db7c5e5b/src/IslandoraUtils.php#L406-L412<CODESPLIT>IslandoraUtils.haveFieldsChanged<CODESPLIT>Returns a list of all available filesystem schemes .<CODESPLIT>public function haveFieldsChanged ( ContentEntityInterface $ entity , ContentEntityInterface $ original ) { $ field_definitions = $ this -> entityFieldManager -> getFieldDefinitions ( $ entity -> getEntityTypeId ( ) , $ entity -> bundle ( ) ) ; $ ignore_list = [ 'vid' => 1 , 'changed' => 1 , 'path' => 1 ] ; $ field_definitions = array_diff_key ( $ field_definitions , $ ignore_list ) ; foreach ( $ field_definitions as $ field_name => $ field_definition ) { $ langcodes = array_keys ( $ entity -> getTranslationLanguages ( ) ) ; if ( $ langcodes !== array_keys ( $ original -> getTranslationLanguages ( ) ) ) { // If the list of langcodes has changed, we need to save. return TRUE ; } foreach ( $ langcodes as $ langcode ) { $ items = $ entity -> getTranslation ( $ langcode ) -> get ( $ field_name ) -> filterEmptyItems ( ) ; $ original_items = $ original -> getTranslation ( $ langcode ) -> get ( $ field_name ) -> filterEmptyItems ( ) ; // If the field items are not equal, we need to save. if ( ! $ items -> equals ( $ original_items ) ) { return TRUE ; } } } return FALSE ; }

1<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/lib/portfolio/forms.php#L319-L327<CODESPLIT>portfolio_instance_select.definition<CODESPLIT>The required basic elements to the form .<CODESPLIT>function definition ( ) { $ this -> caller = $ this -> _customdata [ 'caller' ] ; $ options = $ this -> _customdata [ 'options' ] ; $ mform = & $ this -> _form ; $ mform -> addElement ( 'select' , 'instance' , get_string ( 'selectplugin' , 'portfolio' ) , $ options ) ; $ mform -> addElement ( 'hidden' , 'id' , $ this -> _customdata [ 'id' ] ) ; $ mform -> setType ( 'id' , PARAM_INT ) ; $ this -> add_action_buttons ( true , get_string ( 'next' ) ) ; }

0<CODESPLIT>https://github.com/csi0n/entrust-dev/blob/c8fa794e1a2ef116d0a50ad5f8aeee0835f78827/src/commands/MigrationCommand.php#L80-L100<CODESPLIT>MigrationCommand.fire<CODESPLIT>Create the migration .<CODESPLIT>public function fire ( ) { $ this -> laravel -> view -> addNamespace ( 'entrust' , substr ( __DIR__ , 0 , - 8 ) . 'views' ) ; $ rolesTable = Config :: get ( 'entrust.roles_table' ) ; $ roleUserTable = Config :: get ( 'entrust.role_user_table' ) ; $ permissionsTable = Config :: get ( 'entrust.permissions_table' ) ; $ permissionRoleTable = Config :: get ( 'entrust.permission_role_table' ) ; $ userPermissionTable = Config :: get ( 'entrust.user_permission_table' ) ; $ this -> line ( '' ) ; $ this -> info ( "Tables: $rolesTable, $roleUserTable, $permissionsTable, $permissionRoleTable" ) ; $ message = "A migration that creates '$rolesTable', '$roleUserTable', '$permissionsTable', '$permissionRoleTable'" . " tables will be created in database/migrations directory" ; $ this -> comment ( $ message ) ; $ this -> line ( '' ) ; if ( $ this -> confirm ( "Proceed with the migration creation? [Yes|no]" , "Yes" ) ) { $ this -> line ( '' ) ; $ this -> info ( "Creating migration..." ) ; if ( $ this -> createMigration ( $ rolesTable , $ roleUserTable , $ permissionsTable , $ permissionRoleTable , $ userPermissionTable ) ) { $ this -> info ( "Migration successfully created!" ) ; } else { $ this -> error ( "Couldn't create migration.\n Check the write permissions" . " within the database/migrations directory." ) ; } $ this -> line ( '' ) ; } }

0<CODESPLIT>https://github.com/renatocason/magento2-module-mq/blob/f83c349877884a1b613db2f01a5296caebf6b061/Model/JsonMessageEncoder.php#L73-L79<CODESPLIT>Functions.compose<CODESPLIT>{<CODESPLIT>public static function compose ( $ functionA , $ functionB ) { return function ( $ input ) use ( $ functionA , $ functionB ) { return Functions :: call ( $ functionA , Functions :: call ( $ functionB , $ input ) ) ; } ; }

0<CODESPLIT>https://github.com/hechoendrupal/drupal-console/blob/ca39d83c73967eae5a1393a2bdfa21681d187480/src/Command/Generate/UpdateCommand.php#L103-L132<CODESPLIT>ModuleTrait.moduleQuestion<CODESPLIT>{<CODESPLIT>public function moduleQuestion ( $ showProfile = true ) { $ modules = $ this -> extensionManager -> discoverModules ( ) -> showInstalled ( ) -> showUninstalled ( ) -> showNoCore ( ) -> getList ( true ) ; if ( $ showProfile ) { $ profiles = $ this -> extensionManager -> discoverProfiles ( ) -> showInstalled ( ) -> showUninstalled ( ) -> showNoCore ( ) -> showCore ( ) -> getList ( true ) ; $ modules = array_merge ( $ modules , $ profiles ) ; } if ( empty ( $ modules ) ) { throw new \ Exception ( 'No extension available, execute the proper generator command to generate one.' ) ; } $ module = $ this -> getIo ( ) -> choiceNoList ( $ this -> trans ( 'commands.common.questions.module' ) , $ modules ) ; return $ module ; }

0<CODESPLIT>https://github.com/nirou8/php-multiple-saml/blob/7eb5786e678db7d45459ce3441fa187946ae9a3b/lib/Saml2/Utils.php#L723-L797<CODESPLIT>OneLogin_Saml2_Utils.getSelfURL<CODESPLIT>Interprets a ISO8601 duration value relative to a given timestamp .<CODESPLIT>public static function getSelfURL ( ) { $ selfURLhost = self :: getSelfURLhost ( ) ; $ requestURI = '' ; if ( ! empty ( $ _SERVER [ 'REQUEST_URI' ] ) ) { $ requestURI = $ _SERVER [ 'REQUEST_URI' ] ; if ( $ requestURI [ 0 ] !== '/' ) { if ( preg_match ( '#^https?://[^/]*(/.*)#i' , $ requestURI , $ matches ) ) { $ requestURI = $ matches [ 1 ] ; } } } $ infoWithBaseURLPath = self :: buildWithBaseURLPath ( $ requestURI ) ; if ( ! empty ( $ infoWithBaseURLPath ) ) { $ requestURI = $ infoWithBaseURLPath ; } return $ selfURLhost . $ requestURI ; }

1<CODESPLIT>https://github.com/cybalex/session/blob/527679d8f5dca9aa1cb0c843cb3a6e86ff740da8/DefaultSessionStorage.php#L273-L287<CODESPLIT>DefaultSessionStorage.loadSession<CODESPLIT>Load the session with attributes<CODESPLIT>protected function loadSession ( array & $ session = null ) { if ( null === $ session ) { $ session = & $ _SESSION ; } //initialize the attributes bag $ key = $ this -> getAttributes ( ) -> getName ( ) ; $ session [ $ key ] = isset ( $ session [ $ key ] ) ? $ session [ $ key ] : array ( ) ; $ this -> getAttributes ( ) -> initialize ( $ session [ $ key ] ) ; $ this -> started = true ; $ this -> closed = false ; }

0<CODESPLIT>https://github.com/pods-framework/pods/blob/fd9a07c5c81ccbfcb21c5a0b2166f96c31d0826c/classes/PodsMigrate.php#L629-L662<CODESPLIT>PodsMigrate.build_sv<CODESPLIT>@param array $data Array of data<CODESPLIT>public function build_sv ( $ data = null , $ delimiter = null ) { if ( ! empty ( $ data ) ) { $ this -> set_data ( $ data ) ; } if ( ! empty ( $ delimiter ) ) { $ this -> delimiter = $ delimiter ; } if ( empty ( $ this -> data ) || ! is_array ( $ this -> data ) ) { return false ; } $ head = '' ; $ lines = '' ; foreach ( $ this -> data [ 'columns' ] as $ column => $ label ) { $ head .= '"' . $ label . '"' . $ this -> delimiter ; } $ head = substr ( $ head , 0 , - 1 ) ; foreach ( $ this -> data [ 'items' ] as $ item ) { $ line = '' ; foreach ( $ this -> data [ 'columns' ] as $ column => $ label ) { if ( is_numeric ( $ column ) && ( ( is_object ( $ item ) && ! isset ( $ item -> $ column ) ) || ( is_array ( $ item ) && ! isset ( $ item [ $ column ] ) ) ) ) { $ column = $ label ; } $ value = '' ; if ( is_object ( $ item ) ) { if ( ! isset ( $ item -> $ column ) ) { $ item -> $ column = '' ; } $ value = $ item -> $ column ; } elseif ( is_array ( $ item ) ) { if ( ! isset ( $ item [ $ column ] ) ) { $ item [ $ column ] = '' ; } $ value = $ item [ $ column ] ; } if ( is_array ( $ value ) || is_object ( $ value ) ) { $ value = pods_serial_comma ( $ value , array ( 'field' => $ column , 'fields' => pods_var_raw ( $ column , $ this -> data [ 'fields' ] ) , 'and' => '' , ) ) ; } $ value = str_replace ( array ( '"' , "\r\n" , "\r" , "\n" ) , array ( '\\"' , "\n" , "\n" , '\n' ) , $ value ) ; $ line .= '"' . $ value . '"' . $ this -> delimiter ; } //end foreach $ lines .= substr ( $ line , 0 , - 1 ) . "\n" ; } //end foreach if ( ! empty ( $ lines ) ) { $ lines = "\n" . substr ( $ lines , 0 , - 1 ) ; } $ this -> built = $ head . $ lines ; return $ this -> built ; }

0<CODESPLIT>https://github.com/melisplatform/melis-core/blob/f8b0648930e21d1f2b2e5b9300781c335bd34ea4/src/Controller/PlatformsController.php#L149-L186<CODESPLIT>PlatformsController.renderPlatformContentActionDeleteAction<CODESPLIT>Renders the Generic form of the Platform for creating new and updating new platform<CODESPLIT>public function renderPlatformContentActionDeleteAction ( ) { $ melisKey = $ this -> params ( ) -> fromRoute ( 'melisKey' , '' ) ; $ view = new ViewModel ( ) ; $ view -> melisKey = $ melisKey ; return $ view ; }

0<CODESPLIT>https://github.com/slashworks/control-bundle/blob/2ba86d96f1f41f9424e2229c4e2b13017e973f89/src/Slashworks/AppBundle/Model/om/BaseRemoteHistoryContao.php#L1914-L1947<CODESPLIT>BaseRemoteHistoryContao.copyInto<CODESPLIT>Clears the current object and sets all attributes to their default values<CODESPLIT>public function copyInto ( $ copyObj , $ deepCopy = false , $ makeNew = true ) { $ copyObj -> setRemoteAppId ( $ this -> getRemoteAppId ( ) ) ; $ copyObj -> setApiversion ( $ this -> getApiversion ( ) ) ; $ copyObj -> setName ( $ this -> getName ( ) ) ; $ copyObj -> setVersion ( $ this -> getVersion ( ) ) ; $ copyObj -> setConfigDisplayerrors ( $ this -> getConfigDisplayerrors ( ) ) ; $ copyObj -> setConfigBypasscache ( $ this -> getConfigBypasscache ( ) ) ; $ copyObj -> setConfigMinifymarkup ( $ this -> getConfigMinifymarkup ( ) ) ; $ copyObj -> setConfigDebugmode ( $ this -> getConfigDebugmode ( ) ) ; $ copyObj -> setConfigMaintenancemode ( $ this -> getConfigMaintenancemode ( ) ) ; $ copyObj -> setConfigGzipscripts ( $ this -> getConfigGzipscripts ( ) ) ; $ copyObj -> setConfigRewriteurl ( $ this -> getConfigRewriteurl ( ) ) ; $ copyObj -> setConfigAdminemail ( $ this -> getConfigAdminemail ( ) ) ; $ copyObj -> setConfigCachemode ( $ this -> getConfigCachemode ( ) ) ; $ copyObj -> setStatuscode ( $ this -> getStatuscode ( ) ) ; $ copyObj -> setExtensions ( $ this -> getExtensions ( ) ) ; $ copyObj -> setLog ( $ this -> getLog ( ) ) ; $ copyObj -> setPHP ( $ this -> getPHP ( ) ) ; $ copyObj -> setMySQL ( $ this -> getMySQL ( ) ) ; if ( $ deepCopy && ! $ this -> startCopy ) { // important: temporarily setNew(false) because this affects the behavior of // the getter/setter methods for fkey referrer objects. $ copyObj -> setNew ( false ) ; // store object hash to prevent cycle $ this -> startCopy = true ; //unflag object copy $ this -> startCopy = false ; } // if ($deepCopy) if ( $ makeNew ) { $ copyObj -> setNew ( true ) ; $ copyObj -> setId ( NULL ) ; // this is a auto-increment column, so set to default value } }

1<CODESPLIT>https://github.com/celtic34fr/zf-graphic-object-templating-twig/blob/7a354eff05d678dc225df5e778d5bc3500982768/src/TwigExtensions/LayoutExtension.php#L272-L290<CODESPLIT>LayoutExtension.twigFilter_array_update<CODESPLIT>Merges an array with another one . syntax : <pre > { % set items = { apple : fruit orange : fruit } % } { % set items = items|update ( { apple : granny } ) % }<CODESPLIT>public function twigFilter_array_update ( $ arr1 , $ arr2 ) { if ( $ arr1 instanceof Traversable ) { $ arr1 = iterator_to_array ( $ arr1 ) ; } elseif ( ! is_array ( $ arr1 ) ) { throw new Twig_Error_Runtime ( sprintf ( 'The update filter only works with arrays or "Traversable", got "%s" as first argument.' , gettype ( $ arr1 ) ) ) ; } if ( $ arr2 instanceof Traversable ) { $ arr2 = iterator_to_array ( $ arr2 ) ; } elseif ( ! is_array ( $ arr2 ) ) { throw new Twig_Error_Runtime ( sprintf ( 'The update filter only works with arrays or "Traversable", got "%s" as second argument.' , gettype ( $ arr2 ) ) ) ; } foreach ( $ arr2 as $ key => $ value ) { if ( array_key_exists ( $ key , $ arr1 ) ) $ arr1 [ $ key ] = $ value ; } return $ arr1 ; }

0<CODESPLIT>https://github.com/agentsib/diadoc-php/blob/0dbfe63397a1f3083c4815ad7033bcb986904979/src/Api/Proto/Events/MessageToPost.php#L676-L683<CODESPLIT>MessageToPost.addPriceLists<CODESPLIT>Add a new element to XmlAcceptanceCertificateSellerTitles<CODESPLIT>public function addPriceLists ( \ AgentSIB \ Diadoc \ Api \ Proto \ Events \ PriceListAttachment $ value ) { if ( $ this -> PriceLists === null ) { $ this -> PriceLists = new \ Protobuf \ MessageCollection ( ) ; } $ this -> PriceLists -> add ( $ value ) ; }

0<CODESPLIT>https://github.com/simpleapisecurity/php/blob/e6cebf3213f4d7be54aa3a188d95a00113e3fda0/src/Helpers.php#L145-L165<CODESPLIT>Helpers.isString<CODESPLIT>Tests to make sure that the integer is within a permissible range .<CODESPLIT>public static function isString ( $ item , $ o , $ m ) { # Check to make sure the $msg variable is a string. if ( ! is_string ( $ item ) ) { throw new InvalidTypeException ( sprintf ( 'String parameter expected for %s in %s' , $ m , $ o ) ) ; } return true ; }

1<CODESPLIT>https://github.com/yrizos/data-entity/blob/7dd80ff837ee6bb1c1d96d2458fa6a9b1bb31686/src/Entity.php#L121-L127<CODESPLIT>Entity.getFilteredData<CODESPLIT>@param string|null $context<CODESPLIT>public function getFilteredData ( $ context = null ) { $ data = $ this -> getRawData ( ) ; foreach ( $ data as $ offset => $ value ) $ data [ $ offset ] = $ this -> getFilteredValue ( $ offset , $ context ) ; return $ data ; }

0<CODESPLIT>https://github.com/NamelessCoder/gizzle/blob/f1980299d9520e13b76c8ddaed8511e81f588d8d/src/Payload.php#L259-L275<CODESPLIT>Payload.loadPlugins<CODESPLIT>Create and initialize all plugin classes from the package specified in the input argument . Similar to loading a list of plugin classes but uses the special PluginList class from that package in order to determine which plugins should be activated and to deliver default settings values for those plugins .<CODESPLIT>public function loadPlugins ( $ _ ) { $ arguments = func_get_args ( ) ; foreach ( $ arguments as $ possiblePackage ) { if ( FALSE === is_array ( $ possiblePackage ) ) { $ this -> plugins += $ this -> loadPluginsFromPackage ( $ possiblePackage ) ; } else { foreach ( $ possiblePackage as $ package ) { $ this -> plugins += $ this -> loadPluginsFromPackage ( $ package ) ; } } } return $ this ; }

1<CODESPLIT>https://github.com/BrainstormIT/BITbuilder/blob/71db862dbfd9233014f4215021c11d1c420d5f1f/src/core/Builder.php#L666-L678<CODESPLIT>Builder.fetchAll<CODESPLIT>@return mixed<CODESPLIT>public function fetchAll ( ) { try { $ query = $ this -> db -> prepare ( $ this -> q -> get ( ) ) ; $ this -> bindValues ( $ query ) ; $ query -> execute ( ) ; $ this -> clear ( ) ; return $ query -> fetchAll ( \ PDO :: FETCH_ASSOC ) ; } catch ( \ PDOException $ e ) { $ this -> setError ( 'd' , $ e -> getMessage ( ) ) ; return false ; } }

1<CODESPLIT>https://github.com/MyController/ucclient/blob/8cafcd965db42c5af5a771f6482dfe53b1af9f7b/src/uc_client/model/cache.php#L90-L102<CODESPLIT>cachemodel._get_apps<CODESPLIT>private<CODESPLIT>function _get_apps ( ) { $ this -> base -> load ( 'app' ) ; $ apps = $ _ENV [ 'app' ] -> get_apps ( ) ; $ apps2 = array ( ) ; if ( is_array ( $ apps ) ) { foreach ( $ apps as $ v ) { $ v [ 'extra' ] = unserialize ( $ v [ 'extra' ] ) ; $ apps2 [ $ v [ 'appid' ] ] = $ v ; } } return $ apps2 ; }

0<CODESPLIT>https://github.com/Viames/Pair/blob/64109795f0fdf6ade60ed751b275835b2f4886bf/src/ActiveRecord.php#L1045-L1055<CODESPLIT>ActiveRecord.getRelated<CODESPLIT>Extended method to return a property value of the Pair \ ActiveRecord inherited object related to this by a ForeignKey in DB - table . Cached method .<CODESPLIT>final public function getRelated ( $ relatedProperty ) { $ cacheName = $ relatedProperty . 'RelatedObject' ; // object exists in cache, return it if ( $ this -> issetCache ( $ cacheName ) ) { return $ this -> getCache ( $ cacheName ) ; } // get table foreign-keys $ foreignKeys = $ this -> db -> getForeignKeys ( static :: TABLE_NAME ) ; // get field name by mapped property $ relatedField = $ this -> getMappedField ( $ relatedProperty ) ; // the table referenced by fk $ referencedTable = NULL ; // search the fk-table foreach ( $ foreignKeys as $ fk ) { if ( $ fk -> COLUMN_NAME == $ relatedField ) { $ referencedTable = $ fk -> REFERENCED_TABLE_NAME ; $ referencedColumn = $ fk -> REFERENCED_COLUMN_NAME ; break ; } } // if not table is referenced, raise an error if ( ! $ referencedTable ) { $ this -> addError ( 'Property ' . $ relatedProperty . ' has not a foreign-key mapped into DB' ) ; return NULL ; } // class that maps the referenced table $ relatedClass = NULL ; $ loadedClasses = \ get_declared_classes ( ) ; // search in loaded classes foreach ( $ loadedClasses as $ c ) { if ( is_subclass_of ( $ c , 'Pair\ActiveRecord' ) and property_exists ( $ c , 'TABLE_NAME' ) and $ c :: TABLE_NAME == $ referencedTable ) { $ relatedClass = $ c ; break ; } } // class cannot be found if ( ! $ relatedClass ) { // if not found, search in the whole application (FIXME encapsulation violated here...) $ classes = Utilities :: getActiveRecordClasses ( ) ; // search for required one foreach ( $ classes as $ class => $ opts ) { if ( $ opts [ 'tableName' ] == $ referencedTable ) { include_once ( $ opts [ 'folder' ] . '/' . $ opts [ 'file' ] ) ; $ relatedClass = $ class ; break ; } } } // class cannot be found if ( ! $ relatedClass ) { $ this -> addError ( 'Table ' . $ referencedTable . ' has not any Pair-class mapping' ) ; return NULL ; } // create the new wanted Pair object $ obj = new $ relatedClass ( $ this -> $ relatedProperty ) ; // if loaded, return it otherwise NULL $ ret = ( $ obj -> isLoaded ( ) ? $ obj : NULL ) ; // related object is being registered in cache of this object $ this -> setCache ( $ cacheName , $ ret ) ; return $ ret ; }

1<CODESPLIT>https://github.com/Vinelab/NeoEloquent/blob/b9fc12d19122b2022116d95f9537ca4f5e9ca70c/src/Console/Migrations/MigrateCommand.php#L55-L82<CODESPLIT>MigrateCommand.handle<CODESPLIT>Execute the console command .<CODESPLIT>public function handle ( ) { if ( ! $ this -> confirmToProceed ( ) ) { return ; } $ this -> migrator -> setConnection ( $ this -> option ( 'database' ) ) ; // Next, we will check to see if a path option has been defined. If it has // we will use the path relative to the root of this installation folder // so that migrations may be run for any path within the applications. $ this -> migrator -> run ( $ this -> getMigrationPaths ( ) , [ 'pretend' => $ this -> option ( 'pretend' ) , 'step' => $ this -> option ( 'step' ) , ] ) ; // Once the migrator has run we will grab the note output and send it out to // the console screen, since the migrator itself functions without having // any instances of the OutputInterface contract passed into the class. foreach ( $ this -> migrator -> getNotes ( ) as $ note ) { $ this -> output -> writeln ( $ note ) ; } // Finally, if the "seed" option has been given, we will re-run the database // seed task to re-populate the database, which is convenient when adding // a migration and a seed at the same time, as it is only this command. if ( $ this -> option ( 'seed' ) ) { $ this -> call ( 'db:seed' , [ '--force' => true ] ) ; } }

1<CODESPLIT>https://github.com/cloudflare/cloudflare-plugin-backend/blob/bc6daee1ec54855aef4c57524e06eff998b7dee4/src/SecurityUtil.php#L37-L47<CODESPLIT>SecurityUtil.csrfTokenGenerate<CODESPLIT>@param $secret - string a cryptographically strong secret @param $user - string a piece of unique user data @param $timeValidUntil - int of time the token will be valid for in seconds<CODESPLIT>public static function csrfTokenGenerate ( $ secret , $ user , $ timeValidUntil = null ) { if ( $ timeValidUntil === null ) { $ timeValidUntil = time ( ) + 86400 ; } $ hashedSecret = hash ( 'sha512' , $ secret ) ; $ dataToHash = sprintf ( '%s-%s-%s' , $ hashedSecret , $ user , $ timeValidUntil ) ; $ hashedData = static :: hashFunction ( $ dataToHash ) ; return sprintf ( '%s-%s' , $ timeValidUntil , $ hashedData ) ; }

1<CODESPLIT>https://github.com/ClanCats/Core/blob/9f6ec72c1a439de4b253d0223f1029f7f85b6ef8/src/classes/CCError/Trace.php#L90-L103<CODESPLIT>CCError_Trace.file<CODESPLIT>get file path<CODESPLIT>public function file ( $ cut = true ) { if ( empty ( $ this -> file ) ) { return null ; } if ( $ cut ) { return str_replace ( CCROOT , '' , $ this -> file ) ; } return $ this -> file ; }

0<CODESPLIT>https://github.com/Kunstmaan/KunstmaanBundlesCMS/blob/d841f8eb7dbb16318f8312d1f9701cefeb7aa6d1/src/Kunstmaan/NodeBundle/Helper/NodeMenuItem.php#L260-L274<CODESPLIT>Redirect.validate<CODESPLIT>Get the first child of class this is not using the getChildrenOfClass method for performance reasons<CODESPLIT>public function validate ( ExecutionContextInterface $ context ) { if ( $ this -> getOrigin ( ) === $ this -> getTarget ( ) ) { $ context -> buildViolation ( 'errors.redirect.origin_same_as_target' ) -> atPath ( 'target' ) -> addViolation ( ) ; } }

1<CODESPLIT>https://github.com/movim/moxl/blob/bfe3e1d83ef3bbbd270150f2f1164e8a662ef716/src/Moxl/Stanza/Presence.php#L12-L54<CODESPLIT>Presence.maker<CODESPLIT>/ * The presence builder<CODESPLIT>static function maker ( $ to = false , $ status = false , $ show = false , $ priority = 0 , $ type = false ) { $ session = Session :: start ( ) ; $ dom = new \ DOMDocument ( '1.0' , 'UTF-8' ) ; $ root = $ dom -> createElementNS ( 'jabber:client' , 'presence' ) ; $ dom -> appendChild ( $ root ) ; $ root -> setAttribute ( 'from' , $ session -> get ( 'username' ) . '@' . $ session -> get ( 'host' ) . '/' . $ session -> get ( 'resource' ) ) ; $ root -> setAttribute ( 'id' , $ session -> get ( 'id' ) ) ; if ( $ to != false ) { $ root -> setAttribute ( 'to' , $ to ) ; } if ( $ type != false ) { $ root -> setAttribute ( 'type' , $ type ) ; } if ( $ status != false ) { $ status = $ dom -> createElement ( 'status' , $ status ) ; $ root -> appendChild ( $ status ) ; } if ( $ show != false ) { $ show = $ dom -> createElement ( 'show' , $ show ) ; $ root -> appendChild ( $ show ) ; } if ( $ priority != 0 ) { $ priority = $ dom -> createElement ( 'priority' , $ priority ) ; $ root -> appendChild ( $ priority ) ; } $ c = $ dom -> createElementNS ( 'http://jabber.org/protocol/caps' , 'c' ) ; $ c -> setAttribute ( 'hash' , 'sha-1' ) ; $ c -> setAttribute ( 'node' , 'http://moxl.movim.eu/' ) ; $ c -> setAttribute ( 'ext' , 'pmuc-v1 share-v1 voice-v1 video-v1 camera-v1' ) ; $ c -> setAttribute ( 'ver' , \ Moxl \ Utils :: generateCaps ( ) ) ; $ root -> appendChild ( $ c ) ; return $ dom -> saveXML ( $ dom -> documentElement ) ; }

0<CODESPLIT>https://github.com/teaminmedias-pluswerk/ke_search/blob/d193a2e43b5ff1d75ad59b98b06ca33e4e0d1f98/Classes/Indexer/Types/File.php#L312-L319<CODESPLIT>File.getFileContentFromIndex<CODESPLIT>get a unique hash for current file this is needed for a faster check if record allready exists in indexer table<CODESPLIT>public function getFileContentFromIndex ( $ hash = "" ) { $ fileContent = false ; $ queryBuilder = Db :: getQueryBuilder ( 'tx_kesearch_index' ) ; $ queryBuilder -> getRestrictions ( ) -> removeAll ( ) ; $ hashRow = $ queryBuilder -> select ( '*' ) -> from ( 'tx_kesearch_index' ) -> where ( $ queryBuilder -> expr ( ) -> eq ( 'hash' , $ queryBuilder -> quote ( $ hash , \ PDO :: PARAM_STR ) ) ) -> setMaxResults ( 1 ) -> execute ( ) -> fetch ( ) ; if ( is_array ( $ hashRow ) ) { $ fileContent = $ hashRow [ 'content' ] ; } return $ fileContent ; }

0<CODESPLIT>https://github.com/yajra/laravel-oci8/blob/0318976c23e06f20212f57ac162b4ec8af963c6c/src/Oci8/Connectors/OracleConnector.php#L74-L84<CODESPLIT>OracleConnector.getDsn<CODESPLIT>Parse configurations .<CODESPLIT>protected function getDsn ( array $ config ) { if ( ! empty ( $ config [ 'tns' ] ) ) { return $ config [ 'tns' ] ; } // parse configuration $ config = $ this -> parseConfig ( $ config ) ; // check multiple connections/host, comma delimiter $ config = $ this -> checkMultipleHostDsn ( $ config ) ; // return generated tns return $ config [ 'tns' ] ; }

0<CODESPLIT>https://github.com/ckdarby/PHP-UptimeRobot/blob/d90129522bd5daa4227a5390ef5a12ab78d76880/src/UptimeRobot/API.php#L112-L122<CODESPLIT>API.setDebug<CODESPLIT>Builds the url for the curl request .<CODESPLIT>private function setDebug ( $ curl ) { $ this -> debug = [ 'errorNum' => curl_errno ( $ curl ) , 'error' => curl_error ( $ curl ) , 'info' => curl_getinfo ( $ curl ) , 'raw' => $ this -> contents , ] ; }

0<CODESPLIT>https://github.com/MARCspec/File_MARC_Reference/blob/29abbff5bec5e3bcfeeb07ba7bee94cc0a0a7f5e/src/File_MARC_Reference.php#L202-L224<CODESPLIT>File_MARC_Reference.getFieldIndex<CODESPLIT>Iterate on subspecs .<CODESPLIT>private function getFieldIndex ( $ prevTag , $ tag , $ fieldIndex ) { if ( $ prevTag == $ tag or '' == $ prevTag ) { return $ fieldIndex ; // iteration of field index will continue } $ specTag = $ this -> currentSpec [ 'field' ] -> getTag ( ) ; if ( preg_match ( '/' . $ specTag . '/' , $ tag ) ) { // not same field tag, but field spec tag matches return $ fieldIndex ; // iteration of field index will continue } // not same field tag, iteration gets reset return $ this -> spec [ 'field' ] -> getIndexStart ( ) ; }

0<CODESPLIT>https://github.com/Yurunsoft/IMI/blob/0bd4fe2b10fc309a7574c90cff98f9fe60c3ccf0/src/Model/Relation/Query.php#L133-L160<CODESPLIT>Query.initByManyToMany<CODESPLIT>初始化一对多关系<CODESPLIT>public static function initByManyToMany ( $ model , $ propertyName , $ annotation ) { $ className = BeanFactory :: getObjectClass ( $ model ) ; if ( class_exists ( $ annotation -> model ) ) { $ modelClass = $ annotation -> model ; } else { $ modelClass = Imi :: getClassNamespace ( $ className ) . '\\' . $ annotation -> model ; } $ struct = new ManyToMany ( $ className , $ propertyName , $ annotation ) ; $ leftField = $ struct -> getLeftField ( ) ; $ rightField = $ struct -> getRightField ( ) ; $ middleTable = ModelManager :: getTable ( $ struct -> getMiddleModel ( ) ) ; $ rightTable = ModelManager :: getTable ( $ struct -> getRightModel ( ) ) ; static :: parseManyToManyQueryFields ( $ struct -> getMiddleModel ( ) , $ struct -> getRightModel ( ) , $ middleFields , $ rightFields ) ; $ fields = static :: mergeManyToManyFields ( $ middleTable , $ middleFields , $ rightTable , $ rightFields ) ; $ model -> $ propertyName = new ArrayList ( $ struct -> getMiddleModel ( ) ) ; $ model -> { $ annotation -> rightMany } = new ArrayList ( $ struct -> getRightModel ( ) ) ; if ( null !== $ model -> $ leftField ) { $ list = Db :: query ( ModelManager :: getDbPoolName ( $ className ) ) -> table ( $ rightTable ) -> field ( ... $ fields ) -> join ( $ middleTable , $ middleTable . '.' . $ struct -> getMiddleRightField ( ) , '=' , $ rightTable . '.' . $ rightField ) -> where ( $ middleTable . '.' . $ struct -> getMiddleLeftField ( ) , '=' , $ model -> $ leftField ) -> select ( ) -> getArray ( ) ; if ( null !== $ list ) { // 关联数据 static :: appendMany ( $ model -> $ propertyName , $ list , $ middleFields , $ struct -> getMiddleModel ( ) ) ; // 右侧表数据 static :: appendMany ( $ model -> { $ annotation -> rightMany } , $ list , $ rightFields , $ struct -> getRightModel ( ) ) ; } } }

0<CODESPLIT>https://github.com/silverstripe/silverstripe-framework/blob/ed7aaff7da61eefa172fe213ec25e35d2568bc20/src/Core/CustomMethods.php#L225-L260<CODESPLIT>CustomMethods.removeMethodsFrom<CODESPLIT>Add all the methods from an object property ( which is an { @link Extension } ) to this object .<CODESPLIT>protected function removeMethodsFrom ( $ property , $ index = null ) { $ extension = ( $ index !== null ) ? $ this -> { $ property } [ $ index ] : $ this -> $ property ; $ class = static :: class ; if ( ! $ extension ) { throw new InvalidArgumentException ( "Object->removeMethodsFrom(): could not remove methods from {$class}->{$property}[$index]" ) ; } $ methods = $ this -> findMethodsFromExtension ( $ extension ) ; if ( $ methods ) { foreach ( $ methods as $ method ) { if ( ! isset ( self :: $ extra_methods [ $ class ] [ $ method ] ) ) { continue ; } $ methodInfo = self :: $ extra_methods [ $ class ] [ $ method ] ; if ( $ methodInfo [ 'property' ] === $ property && $ methodInfo [ 'index' ] === $ index ) { unset ( self :: $ extra_methods [ $ class ] [ $ method ] ) ; } } if ( empty ( self :: $ extra_methods [ $ class ] ) ) { unset ( self :: $ extra_methods [ $ class ] ) ; } } }

1<CODESPLIT>https://github.com/Bandwidth/php-bandwidth/blob/35e758d96dfcd9351d359a2371b64a6c98e9ff25/source/utils/Title.php#L47-L49<CODESPLIT>TitleUtility.ToTitlecase<CODESPLIT>standard title case . this is for singular words only<CODESPLIT>public static function ToTitlecase ( $ term ) { return strtoupper ( substr ( $ term , 0 , 1 ) ) . strtolower ( substr ( $ term , 1 , strlen ( $ term ) ) ) ; }

1<CODESPLIT>https://github.com/aimeos/ai-client-html/blob/06738c091041e959f7ddc4674acdb1f1b18474c3/client/html/src/Client/Html/Account/Favorite/Standard.php#L456-L495<CODESPLIT>Standard.addData<CODESPLIT>Sets the necessary parameter values in the view .<CODESPLIT>public function addData ( \ Aimeos \ MW \ View \ Iface $ view , array & $ tags = [ ] , & $ expire = null ) { $ context = $ this -> getContext ( ) ; /** client/html/account/favorite/domains 		 * A list of domain names whose items should be available in the account favorite view template 		 * 		 * The templates rendering product details usually add the images, 		 * prices and texts associated to the product item. If you want to 		 * display additional or less content, you can configure your own 		 * list of domains (attribute, media, price, product, text, etc. are 		 * domains) whose items are fetched from the storage. Please keep 		 * in mind that the more domains you add to the configuration, the 		 * more time is required for fetching the content! 		 * 		 * @param array List of domain names 		 * @since 2014.09 		 * @category Developer 		 * @see client/html/catalog/domains 		 */ $ domains = $ context -> getConfig ( ) -> get ( 'client/html/account/favorite/domains' , [ 'text' , 'price' , 'media' ] ) ; $ domains [ 'product' ] = [ 'favorite' ] ; $ cntl = \ Aimeos \ Controller \ Frontend :: create ( $ context , 'customer' ) ; $ listItems = $ cntl -> uses ( $ domains ) -> get ( ) -> getListItems ( 'product' , 'favorite' ) ; $ total = count ( $ listItems ) ; $ size = $ this -> getProductListSize ( $ view ) ; $ current = $ this -> getProductListPage ( $ view ) ; $ last = ( $ total != 0 ? ceil ( $ total / $ size ) : 1 ) ; $ view -> favoriteItems = $ listItems ; $ view -> favoritePageFirst = 1 ; $ view -> favoritePagePrev = ( $ current > 1 ? $ current - 1 : 1 ) ; $ view -> favoritePageNext = ( $ current < $ last ? $ current + 1 : $ last ) ; $ view -> favoritePageLast = $ last ; $ view -> favoritePageCurr = $ current ; return parent :: addData ( $ view , $ tags , $ expire ) ; }

0<CODESPLIT>https://github.com/realsmartnose/gpsnose-sdk-php/blob/75bcf22a396b2ad70d05537bbde345f5984affe9/src/Mashup/Framework/GnUtil.php#L51-L63<CODESPLIT>GnUtil.GenerateRandomString<CODESPLIT>DateFromTicks<CODESPLIT>public static function GenerateRandomString ( int $ length = 20 ) { $ characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' ; $ charactersLength = strlen ( $ characters ) ; $ randomString = '' ; for ( $ i = 0 ; $ i < $ length ; $ i ++ ) { $ randomString .= $ characters [ rand ( 0 , $ charactersLength - 1 ) ] ; } return $ randomString ; }

1<CODESPLIT>https://github.com/symfony/symfony/blob/b82b09eefb084e487997f4af753400d721edd0a8/src/Symfony/Bundle/FrameworkBundle/Command/CachePoolPruneCommand.php#L60-L70<CODESPLIT>CachePoolPruneCommand.execute<CODESPLIT>{<CODESPLIT>protected function execute ( InputInterface $ input , OutputInterface $ output ) { $ io = new SymfonyStyle ( $ input , $ output ) ; foreach ( $ this -> pools as $ name => $ pool ) { $ io -> comment ( sprintf ( 'Pruning cache pool: <info>%s</info>' , $ name ) ) ; $ pool -> prune ( ) ; } $ io -> success ( 'Successfully pruned cache pool(s).' ) ; }

0<CODESPLIT>https://github.com/oat-sa/generis/blob/789c057e509fc1f9b54c1ed46dd625c6fbe4fdf6/common/oatbox/install/Installer.php#L62-L80<CODESPLIT>Installer.installFilesystem<CODESPLIT>Setup the service manager with configuration driver associated to config path<CODESPLIT>protected function installFilesystem ( ) { try { if ( ! ( $ this -> getServiceManager ( ) -> get ( FileSystemService :: SERVICE_ID ) instanceof FileSystemService ) ) { throw new InvalidService ( 'Your service must be a oat\oatbox\filesystem\FileSystemService' ) ; } } catch ( ServiceNotFoundException $ e ) { $ fileSystemService = new FileSystemService ( array ( FileSystemService :: OPTION_FILE_PATH => $ this -> getOption ( 'file_path' ) ) ) ; $ this -> getServiceManager ( ) -> register ( FileSystemService :: SERVICE_ID , $ fileSystemService ) ; } }

0<CODESPLIT>https://github.com/comproso/framework/blob/c6109e7e2408cf16efaac3580fa7d56839310528/src/database/migrations/2016_03_03_151420_create_result_table.php#L25-L39<CODESPLIT>AbstractBaseSimpleCacheMemory.clear<CODESPLIT>Run the migrations .<CODESPLIT>public function clear ( ) { try { $ store = $ this -> _createDataStore ( ) ; $ this -> _setDataStore ( $ store ) ; } catch ( RootException $ e ) { throw $ this -> _createContainerException ( $ this -> __ ( 'Could not clear data' ) , null , $ e , $ this ) ; } }

0<CODESPLIT>https://github.com/ezsystems/ezplatform-admin-ui/blob/7adc60c9784949e5b912c04906b0ff7e05d359d1/src/bundle/Controller/Content/VersionDraftConflictController.php#L69-L103<CODESPLIT>ContentViewController.getContentCreateData<CODESPLIT>@param int $contentId @param string $languageCode<CODESPLIT>private function getContentCreateData ( ? Location $ location ) : ContentCreateData { $ languages = $ this -> languageService -> loadLanguages ( ) ; $ language = 1 === \ count ( $ languages ) ? array_shift ( $ languages ) : null ; return new ContentCreateData ( null , $ location , $ language ) ; }

1<CODESPLIT>https://github.com/sulu/sulu/blob/6766a36cc2f0c807c59202bf7540a08c4ef31192/src/Sulu/Bundle/PageBundle/Search/EventSubscriber/StructureSubscriber.php#L81-L97<CODESPLIT>StructureSubscriber.indexDocumentAfterRemoveDraft<CODESPLIT>Indexes a document after its draft have been removed .<CODESPLIT>public function indexDocumentAfterRemoveDraft ( RemoveDraftEvent $ event ) { $ document = $ event -> getDocument ( ) ; if ( $ document instanceof WorkflowStageBehavior ) { // Set the workflowstage to test for indexing, because the wrong index will be updated otherwise $ document -> setWorkflowStage ( WorkflowStage :: TEST ) ; } $ this -> indexDocument ( $ document ) ; if ( $ document instanceof WorkflowStageBehavior ) { // Reset the workflowstage to published, because after removing a draft the document will always be in // the published state $ document -> setWorkflowStage ( WorkflowStage :: PUBLISHED ) ; } }

1<CODESPLIT>https://github.com/wpsharks/wp-sharks-core/blob/2aba732120ece7866d582ba43063a37ffaf2f32c/src/includes/classes/SCore/Utils/WcOrderItem.php#L151-L180<CODESPLIT>WcOrderItem.productByOrderItemId<CODESPLIT>Get product by order item ID .<CODESPLIT>public function productByOrderItemId ( $ item_id , \ WC_Abstract_Order $ WC_Order = null ) { // WC 3.0+ uses `\WC_Order_Item_Product` extending `\WC_Order_Item`. // <https://docs.woocommerce.com/wc-apidocs/class-WC_Order_Item_Product.html> // <https://docs.woocommerce.com/wc-apidocs/class-WC_Order_Item.html> if ( ! ( $ item_id = ( int ) $ item_id ) ) { return null ; // Not possible. } elseif ( ! ( $ WC_Order = $ WC_Order ? : $ this -> orderByItemId ( $ item_id ) ) ) { return null ; // Not possible. } foreach ( $ WC_Order -> get_items ( ) as $ _item_id => $ _WC_Order_Item ) { if ( $ _item_id === $ item_id ) { if ( $ _WC_Order_Item instanceof \ WC_Order_Item_Product ) { $ WC_Product = $ _WC_Order_Item -> get_product ( ) ; return $ WC_Product instanceof \ WC_Product && $ WC_Product -> exists ( ) ? $ WC_Product : null ; // } elseif ( $ _WC_Order_Item instanceof \ WC_Order_Item ) { return null ; // Not a product item. // } else { // Back compat. $ _item = ( array ) $ _WC_Order_Item ; $ WC_Product = $ WC_Order -> get_product_from_item ( $ _item ) ; return $ WC_Product instanceof \ WC_Product && $ WC_Product -> exists ( ) ? $ WC_Product : null ; } } } // unset($_item_id, $_WC_Order_Item, $_item); // Housekeeping. return null ; // Failure. }

1<CODESPLIT>https://github.com/jasonhinkle/phreeze/blob/6e45b1b29449ab5e7b81d2b8cb60ed61ec438e62/libs/PEAR/PHPExcel/Worksheet/AutoFilter.php#L253-L261<CODESPLIT>PHPExcel_Worksheet_AutoFilter.clearColumn<CODESPLIT>Clear a specified AutoFilter Column<CODESPLIT>public function clearColumn ( $ pColumn ) { $ this -> testColumnInRange ( $ pColumn ) ; if ( isset ( $ this -> _columns [ $ pColumn ] ) ) { unset ( $ this -> _columns [ $ pColumn ] ) ; } return $ this ; }

0<CODESPLIT>https://github.com/Webiny/Framework/blob/2ca7fb238999387e54a1eea8c5cb4735de9022a7/src/Webiny/Component/ServiceManager/FactoryArgument.php#L48-L76<CODESPLIT>StdLibTrait.unserialize<CODESPLIT>Get real FactoryArgument value @throws ServiceManagerException<CODESPLIT>protected static function unserialize ( $ string ) { if ( is_array ( $ string ) ) { return $ string ; } if ( ( $ data = unserialize ( $ string ) ) !== false ) { return $ data ; } return unserialize ( stripslashes ( $ string ) ) ; }

1<CODESPLIT>https://github.com/orzcc/aliyun-opensearch/blob/8d9d466a6847a0e2058b64a044b07277e39913b9/src/Sdk/CloudsearchClient.php#L493-L519<CODESPLIT>CloudsearchClient._buildRequestContent<CODESPLIT>生成http头信息。<CODESPLIT>private function _buildRequestContent ( & $ parse , $ method , $ data ) { $ strLength = '' ; $ content = '' ; if ( $ method == self :: METHOD_GET ) { $ data = ltrim ( $ data , '&' ) ; $ query = isset ( $ parse [ 'query' ] ) ? $ parse [ 'query' ] : '' ; $ parse [ 'path' ] .= ( $ query ? '&' : '?' ) . $ data ; } else { $ method = self :: METHOD_POST ; $ strLength = "Content-length: " . strlen ( $ data ) . "\r\n" ; $ content = $ data ; } $ write = $ method . " " . $ parse [ 'path' ] . " HTTP/1.0\r\n" ; $ write .= "Host: " . $ parse [ 'host' ] . "\r\n" ; $ write .= "Content-type: application/x-www-form-urlencoded\r\n" ; $ write .= "User-Agent: opensearch/php sdk " . $ this -> sdkVersion . "\r\n" ; if ( $ this -> gzip ) { $ write .= "Accept-Encoding: gzip\r\n" ; } $ write .= $ strLength ; $ write .= "Connection: close\r\n\r\n" ; $ write .= $ content ; return $ write ; }

1<CODESPLIT>https://github.com/native5/native5-sdk-common-php/blob/c8bd5b219bd05ea4d317d21ae9c0c8dddcede7fe/src/Native5/Core/Feeds/ArticleImage.php#L76-L87<CODESPLIT>ArticleImage._computeResolution<CODESPLIT>computeResolution<CODESPLIT>private function _computeResolution ( $ image ) { $ this -> res = "MED" ; if ( preg_match ( "/HiRes/i" , $ image ) ) $ this -> res = "HIGH" ; elseif ( preg_match ( "/LowRes/i" , $ image ) ) $ this -> res = "LOW" ; elseif ( preg_match ( "/Thumb/i" , $ image ) ) $ this -> res = "THUMB" ; elseif ( preg_match ( "/MediumRes/i" , $ image ) ) $ this -> res = "MED" ; }

0<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/grade/report/singleview/classes/local/screen/grade.php#L246-L252<CODESPLIT>grade.format_line<CODESPLIT>Get the range ui element for this grade_item<CODESPLIT>public function format_line ( $ item ) { global $ OUTPUT ; $ grade = $ this -> fetch_grade_or_default ( $ this -> item , $ item -> id ) ; $ lockicon = '' ; $ lockedgrade = $ lockedgradeitem = 0 ; if ( ! empty ( $ grade -> locked ) ) { $ lockedgrade = 1 ; } if ( ! empty ( $ grade -> grade_item -> locked ) ) { $ lockedgradeitem = 1 ; } // Check both grade and grade item. if ( $ lockedgrade || $ lockedgradeitem ) { $ lockicon = $ OUTPUT -> pix_icon ( 't/locked' , 'grade is locked' ) . ' ' ; } if ( ! empty ( $ item -> alternatename ) ) { $ fullname = $ lockicon . $ item -> alternatename . ' (' . $ item -> firstname . ') ' . $ item -> lastname ; } else { $ fullname = $ lockicon . fullname ( $ item ) ; } $ item -> imagealt = $ fullname ; $ url = new moodle_url ( "/user/view.php" , array ( 'id' => $ item -> id , 'course' => $ this -> courseid ) ) ; $ iconstring = get_string ( 'filtergrades' , 'gradereport_singleview' , $ fullname ) ; $ grade -> label = $ fullname ; $ line = array ( $ OUTPUT -> action_icon ( $ this -> format_link ( 'user' , $ item -> id ) , new pix_icon ( 't/editstring' , $ iconstring ) ) , $ OUTPUT -> user_picture ( $ item , array ( 'visibletoscreenreaders' => false ) ) . html_writer :: link ( $ url , $ fullname ) , $ this -> item_range ( ) ) ; $ lineclasses = array ( "action" , "user" , "range" ) ; $ outputline = array ( ) ; $ i = 0 ; foreach ( $ line as $ key => $ value ) { $ cell = new \ html_table_cell ( $ value ) ; if ( $ isheader = $ i == 1 ) { $ cell -> header = $ isheader ; $ cell -> scope = "row" ; } if ( array_key_exists ( $ key , $ lineclasses ) ) { $ cell -> attributes [ 'class' ] = $ lineclasses [ $ key ] ; } $ outputline [ ] = $ cell ; $ i ++ ; } return $ this -> format_definition ( $ outputline , $ grade ) ; }

1<CODESPLIT>https://github.com/sleimanx2/plastic/blob/3d855a1384b247a1e17986dcf90e78ec454d5798/src/DSL/SearchBuilder.php#L142-L160<CODESPLIT>SearchBuilder.model<CODESPLIT>Set the eloquent model to use when querying elastic search .<CODESPLIT>public function model ( Model $ model ) { // Check if the model is searchable before setting the query builder model $ traits = class_uses_recursive ( get_class ( $ model ) ) ; if ( ! isset ( $ traits [ Searchable :: class ] ) ) { throw new InvalidArgumentException ( get_class ( $ model ) . ' does not use the searchable trait' ) ; } $ this -> type ( $ model -> getDocumentType ( ) ) ; if ( $ index = $ model -> getDocumentIndex ( ) ) { $ this -> index ( $ index ) ; } $ this -> model = $ model ; return $ this ; }

0<CODESPLIT>https://github.com/OzanKurt/Repoist/blob/c85430596ed4723191279e0489ca904187c1be08/src/Repositories/Eloquent/AbstractRepository.php#L81-L94<CODESPLIT>phpMorphy_Dict_Source_Mrd.getLanguage<CODESPLIT>{<CODESPLIT>function getLanguage ( ) { $ lang = strtolower ( $ this -> manager -> getLanguage ( ) ) ; switch ( $ lang ) { case 'russian' : return 'ru_RU' ; case 'english' : return 'en_EN' ; case 'german' : return 'de_DE' ; default : return $ this -> manager -> getLanguage ( ) ; } }

1<CODESPLIT>https://github.com/enikeishik/ufoframework/blob/fb44461bcb0506dbc3257724a2281f756594f62f/src/Ufo/Modules/Controller.php#L71-L84<CODESPLIT>Controller.compose<CODESPLIT>Main controller method compose all content .<CODESPLIT>public function compose ( Section $ section = null ) : Result { $ this -> container -> set ( 'section' , $ section ) ; if ( null !== $ section ) { $ this -> initParams ( ) ; $ this -> setParams ( $ section -> params ) ; $ this -> container -> set ( 'params' , $ this -> params ) ; } $ this -> setData ( $ section ) ; return new Result ( $ this -> getView ( ) ) ; }

1<CODESPLIT>https://github.com/vasa-c/go-db/blob/c65eecde33df27be9252999e74021886710e0ddb/goDB/Implementations/Pgsql.php#L181-L204<CODESPLIT>Pgsql.generateConnectString<CODESPLIT>{<CODESPLIT>private function generateConnectString ( $ params ) { $ connString = '' ; if ( $ params ) { foreach ( $ params as $ key => $ value ) { if ( ! $ value ) { continue ; } switch ( $ key ) { case 'username' : $ connString .= 'user=' . $ value ; break ; case 'charset' : $ connString .= 'options=\'--client_encoding=' . $ value . '\'' ; break ; default : $ connString .= $ key . '=' . $ value ; break ; } $ connString .= ' ' ; } } return rtrim ( $ connString ) ; }

0<CODESPLIT>https://github.com/crazedsanity/template/blob/4e0c090f19456753692293b944e6d6f3f0839165/src/template/Template.class.php#L220-L228<CODESPLIT>Template.addVarList<CODESPLIT>-------------------------------------------------------------------------<CODESPLIT>public function addVarList ( array $ vars = null , $ render = true ) { if ( is_array ( $ vars ) ) { foreach ( $ vars as $ k => $ v ) { if ( is_object ( $ v ) && get_class ( $ v ) == get_class ( $ this ) ) { $ this -> add ( $ v , $ render ) ; } elseif ( is_array ( $ v ) ) { $ this -> addVarList ( $ v , $ render ) ; } else { $ this -> addVar ( $ k , $ v ) ; } } } return $ this ; }

0<CODESPLIT>https://github.com/siriusphp/validation/blob/3c601f2f1bd3997fc6f5695f1564ce6e6c077c25/src/Rule/AbstractRule.php#L397-L431<CODESPLIT>AbstractRule.getPotentialMessage<CODESPLIT>Method for determining the path to a related item . Eg : for lines [ 5 ] [ price ] the related item lines [ * ] [ quantity ] has the value identifier as lines [ 5 ] [ quantity ]<CODESPLIT>public function getPotentialMessage ( ) { $ message = clone ( $ this -> getErrorMessagePrototype ( ) ) ; $ message -> setTemplate ( $ this -> getMessageTemplate ( ) ) ; $ message -> setVariables ( $ this -> options ) ; return $ message ; }

1<CODESPLIT>https://github.com/hail-framework/framework/blob/d419e6c098d29ef9b62192b74050e51985b94f90/src/Http/Request.php#L113-L132<CODESPLIT>Request.inputs<CODESPLIT>@param array|null $values<CODESPLIT>public function inputs ( array $ values = null ) : array { if ( $ values === null ) { if ( $ this -> all ) { return $ this -> input ; } $ values = [ ] ; if ( $ this -> serverRequest -> getMethod ( ) !== 'GET' ) { $ values = ( array ) $ this -> serverRequest -> getParsedBody ( ) ; } $ values += $ this -> serverRequest -> getQueryParams ( ) ; $ this -> all = true ; } $ this -> cache = [ ] ; return $ this -> input = $ values ; }

0<CODESPLIT>https://github.com/edunola13/core-modules/blob/2a2e9b89bb61cc28e548412e1d6c9bbb44bc5364/src/DependencyEngine/Reflection.php#L54-L60<CODESPLIT>Reflection.getProperty<CODESPLIT>Retorna un array con todos los valores de las propiedades . Para leer cada propiedad llama al metodo getProperty .<CODESPLIT>public function getProperty ( $ property ) { //Primero Busco por get $ getMethod = 'get' . strtoupper ( $ property [ 0 ] ) . substr ( $ property , 1 ) ; if ( $ this -> reflection -> hasMethod ( $ getMethod ) ) { $ reflectionMethod = $ this -> reflection -> getMethod ( $ getMethod ) ; //Si existe el metodo set y es public lo seteo if ( $ reflectionMethod -> isPublic ( ) ) { return $ this -> object -> $ getMethod ( ) ; } } else if ( $ this -> reflection -> hasProperty ( $ property ) ) { //Si existe la propiedad y es public la seteo $ reflectionProperty = $ this -> reflection -> getProperty ( $ property ) ; if ( $ reflectionProperty -> isPublic ( ) ) { return $ this -> object -> $ property ; } } return NULL ; }

1<CODESPLIT>https://github.com/silverstripe/silverstripe-framework/blob/ed7aaff7da61eefa172fe213ec25e35d2568bc20/src/Forms/NumericField.php#L56-L86<CODESPLIT>NumericField.getFormatter<CODESPLIT>Get number formatter for localising this field<CODESPLIT>protected function getFormatter ( ) { if ( $ this -> getHTML5 ( ) ) { // Locale-independent html5 number formatter $ formatter = NumberFormatter :: create ( i18n :: config ( ) -> uninherited ( 'default_locale' ) , NumberFormatter :: DECIMAL ) ; $ formatter -> setAttribute ( NumberFormatter :: GROUPING_USED , false ) ; $ formatter -> setSymbol ( NumberFormatter :: DECIMAL_SEPARATOR_SYMBOL , '.' ) ; } else { // Locale-specific number formatter $ formatter = NumberFormatter :: create ( $ this -> getLocale ( ) , NumberFormatter :: DECIMAL ) ; } // Set decimal precision $ scale = $ this -> getScale ( ) ; if ( $ scale === 0 ) { $ formatter -> setAttribute ( NumberFormatter :: DECIMAL_ALWAYS_SHOWN , false ) ; $ formatter -> setAttribute ( NumberFormatter :: FRACTION_DIGITS , 0 ) ; } else { $ formatter -> setAttribute ( NumberFormatter :: DECIMAL_ALWAYS_SHOWN , true ) ; if ( $ scale === null ) { // At least one digit to distinguish floating point from integer $ formatter -> setAttribute ( NumberFormatter :: MIN_FRACTION_DIGITS , 1 ) ; } else { $ formatter -> setAttribute ( NumberFormatter :: FRACTION_DIGITS , $ scale ) ; } } return $ formatter ; }

0<CODESPLIT>https://github.com/QoboLtd/cakephp-roles-capabilities/blob/3f036cc534b4834d51f925bd07a16f0c38a57a07/src/Model/Table/RolesTable.php#L109-L128<CODESPLIT>bors_templates_smarty3.fetch<CODESPLIT>Method that prepares associated Capabilities records to be created .<CODESPLIT>static function fetch ( $ template , $ data = array ( ) , $ smarty = NULL ) { //		if($template[0] == '/') //			$template = 'xfile:'.$template; //		PhpConsole\Handler::getInstance()->debug($template, 'tpl'); //		PhpConsole\Handler::getInstance()->debug($data, 'tpldata'); if ( ! $ smarty ) $ smarty = self :: factory ( ) ; $ data = array_merge ( bors_template :: page_data ( ) , $ data ) ; $ smarty -> auto_literal = popval ( $ data , 'smarty_auto_literal' , $ smarty -> auto_literal ) ; $ smarty -> assign ( $ data ) ; $ trace = debug_backtrace ( ) ; $ caller_path = NULL ; $ wo_xfile_prefix = str_replace ( 'xfile:' , '' , $ template ) ; for ( $ i = 1 , $ stop = count ( $ trace ) ; $ i < $ stop ; $ i ++ ) { if ( ! empty ( $ trace [ $ i ] [ 'file' ] ) ) $ php_file_dir = dirname ( @ $ trace [ $ i ] [ 'file' ] ) . '/' ; else $ php_file_dir = '/unknown/' ; if ( file_exists ( $ php_file_dir . $ wo_xfile_prefix ) ) { $ caller_path = $ php_file_dir ; break ; } } $ dirname = dirname ( $ wo_xfile_prefix ) ; if ( $ dirname == '.' && ( $ object = @ $ data [ 'this' ] ) ) $ dirname = dirname ( $ object -> real_class_file ( ) ) ; if ( ! preg_match ( "!^\w+:!" , $ dirname ) ) $ dirname = "xfile:$dirname" ; if ( ! ( $ dir_names = $ smarty -> getTemplateVars ( 'template_dirnames' ) ) ) $ dir_names = array ( ) ; array_unshift ( $ dir_names , $ dirname ) ; array_unshift ( $ dir_names , $ caller_path ) ; $ smarty -> assign ( "template_dirnames" , $ dir_names ) ; $ smarty -> assign ( 'me' , bors ( ) -> user ( ) ) ; $ smarty -> assign ( "main_uri" , empty ( $ GLOBALS [ 'main_uri' ] ) ? NULL : $ GLOBALS [ 'main_uri' ] ) ; // Снести в пользу render_page(), наверное. if ( ! $ smarty -> templateExists ( $ template ) ) $ template = self :: find_template ( $ template , @ $ data [ 'this' ] ) ; if ( config ( 'debug.execute_trace' ) ) bors_debug :: execute_trace ( "smarty3->fetch()" ) ; $ smarty -> error_reporting = E_ALL & ~ E_NOTICE ; $ result = $ smarty -> fetch ( $ template ) ; $ dir_names = $ smarty -> getTemplateVars ( 'template_dirnames' ) ; array_shift ( $ dir_names ) ; array_shift ( $ dir_names ) ; $ smarty -> assign ( "template_dirnames" , $ dir_names ) ; return $ result ; }

1<CODESPLIT>https://github.com/magero-team/magento-packager/blob/785c61c813224ca49dcac997f61afb03aed7e84f/src/Packager/Config.php#L311-L324<CODESPLIT>Config.configurePackageContents<CODESPLIT>@param SimpleXMLElement $packageXml @param string $code @param ArrayObject $filesStructure<CODESPLIT>public function configurePackageContents ( $ packageXml , $ code , $ filesStructure ) { $ target = $ this -> getXmlChild ( $ packageXml , 'contents' ) -> addChild ( 'target' ) ; $ target -> addAttribute ( 'name' , $ code ) ; foreach ( $ filesStructure [ 'directories' ] as $ directory ) { $ this -> buildXmlDir ( $ target , $ directory ) ; } foreach ( $ filesStructure [ 'files' ] as $ file ) { $ this -> buildXmlFile ( $ target , $ file , $ filesStructure [ 'real_path' ] ) ; } return $ this ; }

0<CODESPLIT>https://github.com/V8CH/combine/blob/469bad581fb5ef619933c0da9f9feed44c6c6229/migrations/2017_10_10_110004_create_combine_roles_table.php#L17-L32<CODESPLIT>XmlLoader.loadSchema<CODESPLIT>Run the migrations .<CODESPLIT>public function loadSchema ( $ filename ) { if ( ! file_exists ( $ filename ) ) { throw new FileNotFoundException ( $ filename ) ; } $ xml = simplexml_load_file ( $ filename ) ; $ tables = $ this -> loadTables ( $ xml -> xpath ( '//table' ) ) ; return new Schema ( $ tables ) ; }

1<CODESPLIT>https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Factory.php#L172-L187<CODESPLIT>Factory.prepareConnection<CODESPLIT>Prepares a connection instance after its initialization .<CODESPLIT>protected function prepareConnection ( NodeConnectionInterface $ connection ) { $ parameters = $ connection -> getParameters ( ) ; if ( isset ( $ parameters -> password ) ) { $ connection -> addConnectCommand ( new RawCommand ( array ( 'AUTH' , $ parameters -> password ) ) ) ; } if ( isset ( $ parameters -> database ) ) { $ connection -> addConnectCommand ( new RawCommand ( array ( 'SELECT' , $ parameters -> database ) ) ) ; } }

0<CODESPLIT>https://github.com/michael-donat/php-vfs/blob/1254b67ca6bdaccd9f305b0e1aea81f790b3fa67/src/VirtualFileSystem/Wrapper.php#L796-L805<CODESPLIT>Wrapper.dir_opendir<CODESPLIT>Returns next file url in directory<CODESPLIT>public function dir_opendir ( $ path ) { $ container = $ this -> getContainerFromContext ( $ path ) ; $ path = $ this -> stripScheme ( $ path ) ; if ( ! $ container -> hasNodeAt ( $ path ) ) { trigger_error ( sprintf ( 'opendir(%s): failed to open dir: No such file or directory' , $ path ) , E_USER_WARNING ) ; return false ; } try { $ dir = $ container -> directoryAt ( $ path ) ; } catch ( NotDirectoryException $ e ) { trigger_error ( sprintf ( 'opendir(%s): failed to open dir: Not a directory' , $ path ) , E_USER_WARNING ) ; return false ; } $ permissionHelper = $ container -> getPermissionHelper ( $ dir ) ; if ( ! $ permissionHelper -> isReadable ( ) ) { trigger_error ( sprintf ( 'opendir(%s): failed to open dir: Permission denied' , $ path ) , E_USER_WARNING ) ; return false ; } $ this -> currentlyOpenedDir = new DirectoryHandler ( ) ; $ this -> currentlyOpenedDir -> setDirectory ( $ dir ) ; return true ; }

0<CODESPLIT>https://github.com/Krinkle/intuition/blob/36f48ffe925905ae5d60c7f04d76077e150d3a2c/src/Intuition.php#L231-L260<CODESPLIT>Intuition.getMessagesFunctions<CODESPLIT>Get an array of common locale values for setlocale () .<CODESPLIT>protected function getMessagesFunctions ( ) { if ( $ this -> messagesFunctions == null ) { $ this -> messagesFunctions = MessagesFunctions :: getInstance ( $ this -> localBaseDir , $ this ) ; } return $ this -> messagesFunctions ; }

1<CODESPLIT>https://github.com/liufee/cms-core/blob/440ee229e3b722d6088c57926d612b5f891b370d/common/helpers/FamilyTree.php#L74-L83<CODESPLIT>FamilyTree.getSons<CODESPLIT>获取某节点的所有子节点<CODESPLIT>public function getSons ( $ id ) { $ sons = [ ] ; foreach ( $ this -> _tree as $ key => $ value ) { if ( $ value [ $ this -> _parentSign ] == $ id ) { $ sons [ ] = $ value ; } } return $ sons ; }

1<CODESPLIT>https://github.com/AnnotateFramework/themes/blob/ebae45a485c708613edf5f631871ea9da1b0ed17/src/Loaders/ThemesLoader.php#L235-L259<CODESPLIT>ThemesLoader.onLoadLayout<CODESPLIT>Event handler method - should not be called manually<CODESPLIT>public function onLoadLayout ( ITemplateFactory $ templateFactory , $ layoutFile , $ presenterName ) { if ( ! $ this -> activeTheme ) { return ; } $ templateFactory -> addLayout ( $ this -> formatTemplateFilePath ( $ this -> activeTheme , $ layoutFile , $ presenterName ) ) ; $ templateFactory -> addLayout ( $ this -> formatTemplateFilePath ( $ this -> activeTheme , $ layoutFile ) ) ; $ parent = $ this -> activeTheme -> getParent ( ) ; if ( ! $ parent ) { return ; } $ parentTheme = $ this -> getTheme ( $ parent ) ; $ templateFactory -> addLayout ( $ this -> formatTemplateFilePath ( $ parentTheme , $ layoutFile , $ presenterName ) ) ; $ templateFactory -> addLayout ( $ this -> formatTemplateFilePath ( $ parentTheme , $ layoutFile ) ) ; }

0<CODESPLIT>https://github.com/sonata-project/SonataAdminBundle/blob/7e5417109126e936800ee1e9f588463af5a7b7cd/src/Admin/AbstractAdmin.php#L2967-L2999<CODESPLIT>AbstractAdmin.getSubClass<CODESPLIT>Build the form FieldDescription collection .<CODESPLIT>protected function getSubClass ( $ name ) { if ( $ this -> hasSubClass ( $ name ) ) { return $ this -> subClasses [ $ name ] ; } throw new \ RuntimeException ( sprintf ( 'Unable to find the subclass `%s` for admin `%s`' , $ name , \ get_class ( $ this ) ) ) ; }

0<CODESPLIT>https://github.com/hubzero/framework/blob/391de11e82f44c5fc9b2fbf0c8f6bde4cb0e8609/src/Html/Builder/Sliders.php#L61-L75<CODESPLIT>Sliders.end<CODESPLIT>Begins the display of a new panel .<CODESPLIT>public static function end ( ) { $ content = '' ; if ( self :: $ open ) { $ content .= '</div></div>' ; } self :: $ open = false ; $ content .= '</div>' ; return $ content ; }

0<CODESPLIT>https://github.com/szymach/c-pchart/blob/c6df46476e949bd930f7f44dd3170a78a8fe0f3b/src/Draw.php#L354-L434<CODESPLIT>Draw.drawRoundedFilledRectangle<CODESPLIT>Draw a rectangle<CODESPLIT>public function drawRoundedFilledRectangle ( $ X1 , $ Y1 , $ X2 , $ Y2 , $ Radius , array $ Format = [ ] ) { $ R = isset ( $ Format [ "R" ] ) ? $ Format [ "R" ] : 0 ; $ G = isset ( $ Format [ "G" ] ) ? $ Format [ "G" ] : 0 ; $ B = isset ( $ Format [ "B" ] ) ? $ Format [ "B" ] : 0 ; $ BorderR = isset ( $ Format [ "BorderR" ] ) ? $ Format [ "BorderR" ] : - 1 ; $ BorderG = isset ( $ Format [ "BorderG" ] ) ? $ Format [ "BorderG" ] : - 1 ; $ BorderB = isset ( $ Format [ "BorderB" ] ) ? $ Format [ "BorderB" ] : - 1 ; $ Alpha = isset ( $ Format [ "Alpha" ] ) ? $ Format [ "Alpha" ] : 100 ; $ Surrounding = isset ( $ Format [ "Surrounding" ] ) ? $ Format [ "Surrounding" ] : null ; /* Temporary fix for AA issue */ $ Y1 = floor ( $ Y1 ) ; $ Y2 = floor ( $ Y2 ) ; $ X1 = floor ( $ X1 ) ; $ X2 = floor ( $ X2 ) ; if ( $ Surrounding != null ) { $ BorderR = $ R + $ Surrounding ; $ BorderG = $ G + $ Surrounding ; $ BorderB = $ B + $ Surrounding ; } if ( $ BorderR == - 1 ) { $ BorderR = $ R ; $ BorderG = $ G ; $ BorderB = $ B ; } list ( $ X1 , $ Y1 , $ X2 , $ Y2 ) = $ this -> fixBoxCoordinates ( $ X1 , $ Y1 , $ X2 , $ Y2 ) ; if ( $ X2 - $ X1 < $ Radius * 2 ) { $ Radius = floor ( ( ( $ X2 - $ X1 ) ) / 4 ) ; } if ( $ Y2 - $ Y1 < $ Radius * 2 ) { $ Radius = floor ( ( ( $ Y2 - $ Y1 ) ) / 4 ) ; } $ RestoreShadow = $ this -> Shadow ; if ( $ this -> Shadow && $ this -> ShadowX != 0 && $ this -> ShadowY != 0 ) { $ this -> Shadow = false ; $ this -> drawRoundedFilledRectangle ( $ X1 + $ this -> ShadowX , $ Y1 + $ this -> ShadowY , $ X2 + $ this -> ShadowX , $ Y2 + $ this -> ShadowY , $ Radius , [ "R" => $ this -> ShadowR , "G" => $ this -> ShadowG , "B" => $ this -> ShadowB , "Alpha" => $ this -> Shadowa ] ) ; } $ Color = [ "R" => $ R , "G" => $ G , "B" => $ B , "Alpha" => $ Alpha , "NoBorder" => true ] ; if ( $ Radius <= 0 ) { $ this -> drawFilledRectangle ( $ X1 , $ Y1 , $ X2 , $ Y2 , $ Color ) ; return 0 ; } $ YTop = $ Y1 + $ Radius ; $ YBottom = $ Y2 - $ Radius ; $ Step = 360 / ( 2 * PI * $ Radius ) ; $ Positions = [ ] ; $ Radius -- ; $ MinY = null ; $ MaxY = null ; for ( $ i = 0 ; $ i <= 90 ; $ i = $ i + $ Step ) { $ Xp1 = cos ( ( $ i + 180 ) * PI / 180 ) * $ Radius + $ X1 + $ Radius ; $ Xp2 = cos ( ( ( 90 - $ i ) + 270 ) * PI / 180 ) * $ Radius + $ X2 - $ Radius ; $ Yp = floor ( sin ( ( $ i + 180 ) * PI / 180 ) * $ Radius + $ YTop ) ; if ( null === $ MinY || $ Yp > $ MinY ) { $ MinY = $ Yp ; } if ( $ Xp1 <= floor ( $ X1 ) ) { $ Xp1 ++ ; } if ( $ Xp2 >= floor ( $ X2 ) ) { $ Xp2 -- ; } $ Xp1 ++ ; if ( ! isset ( $ Positions [ $ Yp ] ) ) { $ Positions [ $ Yp ] [ "X1" ] = $ Xp1 ; $ Positions [ $ Yp ] [ "X2" ] = $ Xp2 ; } else { $ Positions [ $ Yp ] [ "X1" ] = ( $ Positions [ $ Yp ] [ "X1" ] + $ Xp1 ) / 2 ; $ Positions [ $ Yp ] [ "X2" ] = ( $ Positions [ $ Yp ] [ "X2" ] + $ Xp2 ) / 2 ; } $ Xp1 = cos ( ( $ i + 90 ) * PI / 180 ) * $ Radius + $ X1 + $ Radius ; $ Xp2 = cos ( ( 90 - $ i ) * PI / 180 ) * $ Radius + $ X2 - $ Radius ; $ Yp = floor ( sin ( ( $ i + 90 ) * PI / 180 ) * $ Radius + $ YBottom ) ; if ( null === $ MaxY || $ Yp < $ MaxY ) { $ MaxY = $ Yp ; } if ( $ Xp1 <= floor ( $ X1 ) ) { $ Xp1 ++ ; } if ( $ Xp2 >= floor ( $ X2 ) ) { $ Xp2 -- ; } $ Xp1 ++ ; if ( ! isset ( $ Positions [ $ Yp ] ) ) { $ Positions [ $ Yp ] [ "X1" ] = $ Xp1 ; $ Positions [ $ Yp ] [ "X2" ] = $ Xp2 ; } else { $ Positions [ $ Yp ] [ "X1" ] = ( $ Positions [ $ Yp ] [ "X1" ] + $ Xp1 ) / 2 ; $ Positions [ $ Yp ] [ "X2" ] = ( $ Positions [ $ Yp ] [ "X2" ] + $ Xp2 ) / 2 ; } } $ ManualColor = $ this -> allocateColor ( $ this -> Picture , $ R , $ G , $ B , $ Alpha ) ; foreach ( $ Positions as $ Yp => $ Bounds ) { $ X1 = $ Bounds [ "X1" ] ; $ X1Dec = $ this -> getFirstDecimal ( $ X1 ) ; if ( $ X1Dec != 0 ) { $ X1 = floor ( $ X1 ) + 1 ; } $ X2 = $ Bounds [ "X2" ] ; $ X2Dec = $ this -> getFirstDecimal ( $ X2 ) ; if ( $ X2Dec != 0 ) { $ X2 = floor ( $ X2 ) - 1 ; } imageline ( $ this -> Picture , $ X1 , $ Yp , $ X2 , $ Yp , $ ManualColor ) ; } $ this -> drawFilledRectangle ( $ X1 , $ MinY + 1 , floor ( $ X2 ) , $ MaxY - 1 , $ Color ) ; $ Radius ++ ; $ this -> drawRoundedRectangle ( $ X1 , $ Y1 , $ X2 + 1 , $ Y2 - 1 , $ Radius , [ "R" => $ BorderR , "G" => $ BorderG , "B" => $ BorderB , "Alpha" => $ Alpha ] ) ; $ this -> Shadow = $ RestoreShadow ; }

1<CODESPLIT>https://github.com/mridang/magazine/blob/5b3cfecc472c61fde6af63efe62690a30a267a04/lib/magento/Package.php#L573-L594<CODESPLIT>Mage_Connect_Package.checkPhpVersion<CODESPLIT>Check PHP version restriction<CODESPLIT>public function checkPhpVersion ( ) { $ min = $ this -> getDependencyPhpVersionMin ( ) ; $ max = $ this -> getDependencyPhpVersionMax ( ) ; $ minOk = $ min ? version_compare ( PHP_VERSION , $ min , ">=" ) : true ; $ maxOk = $ max ? version_compare ( PHP_VERSION , $ max , "<=" ) : true ; if ( ! $ minOk || ! $ maxOk ) { $ err = "requires PHP version " ; if ( $ min && $ max ) { $ err .= " >= $min and <= $max " ; } elseif ( $ min ) { $ err .= " >= $min " ; } elseif ( $ max ) { $ err .= " <= $max " ; } $ err .= " current is: " . PHP_VERSION ; return $ err ; } return true ; }

0<CODESPLIT>https://github.com/oroinc/OroLayoutComponent/blob/682a96672393d81c63728e47c4a4c3618c515be0/BlockTypeHelper.php#L30-L35<CODESPLIT>BlockTypeHelper.ensureInitialized<CODESPLIT>{<CODESPLIT>protected function ensureInitialized ( $ blockType ) { if ( $ blockType instanceof BlockTypeInterface ) { $ name = $ blockType -> getName ( ) ; $ type = $ blockType ; } else { $ name = $ blockType ; $ type = null ; } if ( ! isset ( $ this -> types [ $ name ] ) ) { if ( ! $ type ) { $ type = $ this -> registry -> getType ( $ name ) ; } $ types = [ $ type ] ; $ typeName = $ type -> getName ( ) ; $ names = [ $ typeName ] ; $ nameMap = [ $ typeName => true ] ; $ parentName = $ type -> getParent ( ) ; while ( $ parentName ) { if ( isset ( $ this -> types [ $ parentName ] ) ) { // use data from already loaded parent type $ types = array_merge ( $ this -> types [ $ parentName ] , array_reverse ( $ types ) ) ; $ names = array_merge ( $ this -> names [ $ parentName ] , array_reverse ( $ names ) ) ; $ nameMap = array_merge ( $ nameMap , $ this -> nameMap [ $ parentName ] ) ; break ; } else { $ type = $ this -> registry -> getType ( $ parentName ) ; $ typeName = $ type -> getName ( ) ; $ types [ ] = $ type ; $ names [ ] = $ typeName ; $ nameMap [ $ typeName ] = true ; $ parentName = $ type -> getParent ( ) ; } } if ( null === $ parentName ) { $ types = array_reverse ( $ types ) ; $ names = array_reverse ( $ names ) ; } $ this -> types [ $ name ] = $ types ; $ this -> names [ $ name ] = $ names ; $ this -> nameMap [ $ name ] = $ nameMap ; // initialise all parent types if them are not initialized yet $ typeNames = array_keys ( $ nameMap ) ; $ offset = 0 ; while ( false !== ( $ typeName = next ( $ typeNames ) ) ) { if ( isset ( $ this -> nameMap [ $ typeName ] ) ) { break ; } $ offset ++ ; $ this -> types [ $ typeName ] = array_slice ( $ types , 0 , - $ offset ) ; $ this -> names [ $ typeName ] = array_slice ( $ names , 0 , - $ offset ) ; $ this -> nameMap [ $ typeName ] = array_slice ( $ nameMap , $ offset ) ; } } return $ name ; }

0<CODESPLIT>https://github.com/concrete5/concrete5/blob/c54c94e4eb6d45696fed85a5b8b415f70ea677b8/concrete/src/Authentication/AuthenticationType.php#L313-L322<CODESPLIT>AuthenticationType.setAuthenticationTypeDisplayOrder<CODESPLIT>AuthenticationType :: disable Disable an authentication type .<CODESPLIT>public function setAuthenticationTypeDisplayOrder ( $ order ) { $ db = Loader :: db ( ) ; $ db -> Execute ( 'UPDATE AuthenticationTypes SET authTypeDisplayOrder=? WHERE authTypeID=?' , [ $ order , $ this -> getAuthenticationTypeID ( ) ] ) ; }

0<CODESPLIT>https://github.com/PhoxPHP/Glider/blob/17aaf3b7bb6e70ea3ae1f04e30a7690e884bf042/src/Model/Model.php#L240-L243<CODESPLIT>Model.addPropertyIfNot<CODESPLIT>Checks if a property exists .<CODESPLIT>final public function addPropertyIfNot ( Bool $ condition = null , String $ property , $ value = null ) { if ( $ condition == false ) { $ this -> softProperties [ $ property ] = $ value ; } }

0<CODESPLIT>https://github.com/nyeholt/silverstripe-external-content/blob/1c6da8c56ef717225ff904e1522aff94ed051601/thirdparty/Zend/Validate/Db/Abstract.php#L101-L132<CODESPLIT>BrowserMobProxyBase.curl<CODESPLIT>Run query and returns matches or null if no matches are found .<CODESPLIT>protected function curl ( $ http_verb , $ path , $ payload = null , $ curl_opts = array ( ) ) { // determine the URL we are posting to if ( substr ( $ this -> url , - 1 , 1 ) !== '/' && substr ( $ path , 0 , 1 ) !== '/' ) { $ url = $ this -> url . '/' . $ path ; } else { $ url = $ this -> url . $ path ; } // create the curl request $ curl = curl_init ( $ url ) ; curl_setopt ( $ curl , CURLOPT_RETURNTRANSFER , true ) ; curl_setopt ( $ curl , CURLOPT_HTTPHEADER , array ( 'Content-Type: application/json;charset=UTF-8' , 'Accept: application/json' ) ) ; // handle the different kind of verbs switch ( $ http_verb ) { case 'POST' : // we are POSTing to the URL curl_setopt ( $ curl , CURLOPT_POST , true ) ; // what are we posting? if ( $ payload ) { if ( is_array ( $ payload ) ) { // posting an array of values curl_setopt ( $ curl , CURLOPT_POSTFIELDS , http_build_query ( $ payload ) ) ; curl_setopt ( $ curl , CURLOPT_HTTPHEADER , array ( 'Content-Type: application/x-www-form-urlencoded' ) ) ; } else if ( is_object ( $ payload ) ) { // sending over a JSON payload curl_setopt ( $ curl , CURLOPT_POSTFIELDS , json_encode ( $ payload ) ) ; } else { // we assume that the caller has done this // for themselves curl_setopt ( $ curl , CURLOPT_POSTFIELDS , $ payload ) ; } } break ; case 'PUT' : // we are PUT to the URL curl_setopt ( $ curl , CURLOPT_CUSTOMREQUEST , 'PUT' ) ; // what are we posting? if ( $ payload ) { if ( is_array ( $ payload ) ) { // posting an array of values $ fields = http_build_query ( $ payload ) ; curl_setopt ( $ curl , CURLOPT_POSTFIELDS , $ fields ) ; curl_setopt ( $ curl , CURLOPT_HTTPHEADER , array ( 'Content-Type: application/x-www-form-urlencoded' , 'Content-Length: ' . strlen ( $ fields ) ) ) ; } else if ( is_object ( $ payload ) ) { // sending over a JSON payload $ data = json_encode ( $ payload ) ; curl_setopt ( $ curl , CURLOPT_POSTFIELDS , $ data ) ; curl_setopt ( $ curl , CURLOPT_HTTPHEADER , array ( 'Content-Length: ' . strlen ( $ data ) ) ) ; } else { // we assume that the caller has done this // for themselves curl_setopt ( $ curl , CURLOPT_POSTFIELDS , $ payload ) ; curl_setopt ( $ curl , CURLOPT_HTTPHEADER , array ( 'Content-Length: ' . strlen ( $ payload ) ) ) ; } } break ; case 'DELETE' : curl_setopt ( $ curl , CURLOPT_CUSTOMREQUEST , 'DELETE' ) ; break ; } foreach ( $ curl_opts as $ option => $ value ) { curl_setopt ( $ curl , $ option , $ value ) ; } // make the curl request $ raw_results = trim ( curl_exec ( $ curl ) ) ; // find out from curl what happened $ info = curl_getinfo ( $ curl ) ; // was there an error? if ( $ error = curl_error ( $ curl ) ) { // yes, there was // we throw an exception to explain that the call failed $ msg = sprintf ( 'Curl error thrown for http %s to %s' , $ http_verb , $ url ) ; if ( $ payload && is_array ( $ payload ) ) { $ msg .= sprintf ( ' with params: %s' , json_encode ( $ payload ) ) ; } throw new E5xx_BrowserMobProxyCurlException ( $ msg . "\n\n" . $ error ) ; } // we're done with curl for this request curl_close ( $ curl ) ; // convert the response from webdriver into something we can work with $ results = json_decode ( $ raw_results ) ; // are we working with enhanced replies? if ( isset ( $ results -> success ) && $ results -> success ) { if ( isset ( $ results -> data ) ) { return $ results -> data ; } else { return null ; } } else if ( isset ( $ results -> error ) && $ results -> error ) { // there was an error? $ e = new E5xx_BrowserMobProxyCurlException ( json_encode ( $ results -> data ) ) ; $ e -> data = $ results -> data ; throw $ e ; } else { // no, we do not appear to be return $ results ; } // all done return $ results ; }

0<CODESPLIT>https://github.com/joomla-projects/joomla-browser/blob/b3099f181ce79b0dedd92dc14cf03388bb6c6c67/src/JoomlaBrowser.php#L89-L100<CODESPLIT>CascadeAggregateTemplateLoader.load<CODESPLIT>Function to instantiate the Locator Class In case of a custom Template path to the custom Template Locator could be passed in Acceptance . suite . yml file<CODESPLIT>public function load ( $ templatePath ) { $ loaders = $ this -> loaders ; foreach ( $ loaders as $ i => $ loaderData ) { list ( $ loader , $ predicate , $ isFactory ) = $ loaderData ; if ( ! $ predicate ( $ templatePath ) ) { continue ; } if ( ! $ isFactory ) { /* @var \Brain\Hierarchy\Loader\TemplateLoaderInterface $loader */ return $ loader -> load ( $ templatePath ) ; } $ loader = $ loader ( ) ; if ( ! $ loader instanceof TemplateLoaderInterface ) { continue ; } return $ loader -> load ( $ templatePath ) ; } return '' ; }

0<CODESPLIT>https://github.com/neos/flow-development-collection/blob/a4484ef2a57e050dc9bd87c8481eeb250c7a36fa/Neos.Flow/Classes/ResourceManagement/Streams/StreamWrapperAdapter.php#L94-L103<CODESPLIT>StreamWrapperAdapter.initializeStreamWrapper<CODESPLIT>Create the internal stream wrapper if needed .<CODESPLIT>public static function initializeStreamWrapper ( $ objectManager ) { $ streamWrapperClassNames = static :: getStreamWrapperImplementationClassNames ( $ objectManager ) ; /** @var StreamWrapperInterface $streamWrapperClassName */ foreach ( $ streamWrapperClassNames as $ streamWrapperClassName ) { $ scheme = $ streamWrapperClassName :: getScheme ( ) ; if ( in_array ( $ scheme , stream_get_wrappers ( ) ) ) { stream_wrapper_unregister ( $ scheme ) ; } stream_wrapper_register ( $ scheme , StreamWrapperAdapter :: class ) ; static :: registerStreamWrapper ( $ scheme , $ streamWrapperClassName ) ; } }

1<CODESPLIT>https://github.com/milesj/utility/blob/146318ff0a882917defab7f4918b0d198eb5a3c0/Model/Behavior/SluggableBehavior.php#L66-L101<CODESPLIT>SluggableBehavior.beforeSave<CODESPLIT>Generate a slug based on another field .<CODESPLIT>public function beforeSave ( Model $ model , $ options = array ( ) ) { $ settings = $ this -> settings [ $ model -> alias ] ; if ( empty ( $ model -> data [ $ model -> alias ] ) || empty ( $ model -> data [ $ model -> alias ] [ $ settings [ 'field' ] ] ) || ! empty ( $ model -> data [ $ model -> alias ] [ $ settings [ 'slug' ] ] ) ) { return true ; } else if ( $ model -> id && ! $ settings [ 'onUpdate' ] ) { return true ; } $ slug = $ model -> data [ $ model -> alias ] [ $ settings [ 'field' ] ] ; if ( method_exists ( $ model , 'beforeSlug' ) ) { $ slug = $ model -> beforeSlug ( $ slug , $ this ) ; } $ slug = $ this -> slugify ( $ model , $ slug ) ; if ( method_exists ( $ model , 'afterSlug' ) ) { $ slug = $ model -> afterSlug ( $ slug , $ this ) ; } if ( mb_strlen ( $ slug ) > ( $ settings [ 'length' ] - 3 ) ) { $ slug = mb_substr ( $ slug , 0 , ( $ settings [ 'length' ] - 3 ) ) ; } if ( $ settings [ 'unique' ] ) { $ slug = $ this -> _makeUnique ( $ model , $ slug ) ; } $ model -> data [ $ model -> alias ] [ $ settings [ 'slug' ] ] = $ slug ; return true ; }

1<CODESPLIT>https://github.com/php-devil-old/php-devil-framework/blob/bbbcdaac7243306fb338fe13bc9f71d7a339dba3/containers/Modules.php#L98-L106<CODESPLIT>Modules.getTagByClassName<CODESPLIT>Получение тега по имени класса<CODESPLIT>public function getTagByClassName ( $ className ) { if ( is_object ( $ className ) ) $ className = get_class ( $ className ) ; if ( isset ( $ this -> known [ $ className ] [ 'tagName' ] ) ) { return $ this -> known [ $ className ] [ 'tagName' ] ; } else { return null ; } }

1<CODESPLIT>https://github.com/puli/manager/blob/b3e726e35c2e6da809fd13f73d590290fb3fca43/src/Api/Repository/PathConflict.php#L110-L134<CODESPLIT>PathConflict.removeMapping<CODESPLIT>Removes a path mapping from the conflict .<CODESPLIT>public function removeMapping ( PathMapping $ mapping ) { if ( ! $ mapping -> isLoaded ( ) ) { throw new NotLoadedException ( 'The passed mapping must be loaded.' ) ; } $ moduleName = $ mapping -> getContainingModule ( ) -> getName ( ) ; if ( ! isset ( $ this -> mappings [ $ moduleName ] ) || $ mapping !== $ this -> mappings [ $ moduleName ] ) { return ; } unset ( $ this -> mappings [ $ moduleName ] ) ; $ mapping -> removeConflict ( $ this ) ; // Conflict was resolved if ( count ( $ this -> mappings ) < 2 ) { $ resolvedMappings = $ this -> mappings ; $ this -> mappings = array ( ) ; foreach ( $ resolvedMappings as $ resolvedMapping ) { $ resolvedMapping -> removeConflict ( $ this ) ; } } }

1<CODESPLIT>https://github.com/Vectorface/SnappyRouter/blob/795c8377e808933f228835c9aa4d2071136931fc/src/Vectorface/SnappyRouter/Config/Config.php#L105-L108<CODESPLIT>Config.get<CODESPLIT>Returns the value associated with the given key . An optional default value can be provided and will be returned if no value is associated with the key .<CODESPLIT>public function get ( $ key , $ defaultValue = null ) { return $ this -> offsetExists ( $ key ) ? $ this -> offsetGet ( $ key ) : $ defaultValue ; }

1<CODESPLIT>https://github.com/cityware/city-snmp/blob/831b7485b6c932a84f081d5ceeb9c5f4e7a8641d/src/MIBS/Asterisk/Channels.php#L567-L577<CODESPLIT>Channels.chanPri<CODESPLIT>Active Channel Information : Current priority .<CODESPLIT>public function chanPri ( ) { try { return $ this -> getSNMP ( ) -> walk1d ( self :: OID_ASTERISK_CHANNEL_PRI ) ; } catch ( \ Cityware \ Snmp \ Exception $ e ) { return null ; } }

0<CODESPLIT>https://github.com/hubzero/framework/blob/391de11e82f44c5fc9b2fbf0c8f6bde4cb0e8609/src/Html/Parameter/Element/Password.php#L33-L42<CODESPLIT>User.setState<CODESPLIT>Fetch a calendar element<CODESPLIT>public static function setState ( $ key , $ value ) { $ session = self :: $ app -> get ( 'session' ) ; $ registry = $ session -> get ( 'registry' ) ; if ( ! is_null ( $ registry ) ) { return $ registry -> set ( $ key , $ value ) ; } return null ; }

1<CODESPLIT>https://github.com/corex/helpers/blob/d360cd8e0b258cbe88a4f34ee88cbdf2f901745a/src/Obj.php#L182-L185<CODESPLIT>Obj.hasInterface<CODESPLIT>Has interface .<CODESPLIT>public static function hasInterface ( $ objectOrClass , string $ interfaceClassName ) : bool { return in_array ( $ interfaceClassName , self :: getInterfaces ( $ objectOrClass ) ) ; }

0<CODESPLIT>https://github.com/checkout/checkout-magento2-plugin/blob/4017a44d9f3328742a5d7731b1421574681ec817/Gateway/Config/Config.php#L425-L438<CODESPLIT>Config.isActive<CODESPLIT>Returns the store name .<CODESPLIT>public function isActive ( ) { if ( ! $ this -> getValue ( self :: KEY_ACTIVE , $ this -> storeManager -> getStore ( ) ) ) { return false ; } $ quote = $ this -> checkoutSession -> getQuote ( ) ; return ( bool ) in_array ( $ quote -> getQuoteCurrencyCode ( ) , $ this -> getAcceptedCurrencies ( ) ) ; }

0<CODESPLIT>https://github.com/FreeDSx/Socket/blob/d74683bf8b827e91a8ca051805c55dacaf64f93d/src/FreeDSx/Socket/Socket.php#L264-L267<CODESPLIT>Socket.tcp<CODESPLIT>Create a socket by connecting to a specific host .<CODESPLIT>public static function tcp ( string $ host , array $ options = [ ] ) : Socket { return self :: create ( $ host , \ array_merge ( $ options , [ 'transport' => 'tcp' ] ) ) ; }

1<CODESPLIT>https://github.com/idr0id/Papper/blob/53682bd058934027dbd4376abab93ac0cd06dffb/src/Papper/FluentSyntax/ExecuteMappingFluentSyntax.php#L37-L41<CODESPLIT>ExecuteMappingFluentSyntax.to<CODESPLIT>Execute a mapping to the existing destination object . If no Map exists then one is created .<CODESPLIT>public function to ( $ destination , $ destinationType = null ) { $ this -> context -> setDestination ( $ destination , $ destinationType ) ; return $ this -> engine -> execute ( $ this -> context ) ; }

0<CODESPLIT>https://github.com/CathedralCode/Builder/blob/cafc165e51b4cfb32ddb201f7e47415f1340cd41/src/Controller/BuilderWebController.php#L71-L77<CODESPLIT>UsfAuthCAS.setCasEnvironment<CODESPLIT>{<CODESPLIT>private function setCasEnvironment ( $ environment ) { switch ( $ environment ) { case 'development' : $ this -> setCasHost ( 'authtest.it.usf.edu' ) ; $ this -> setCasPort ( 443 ) ; $ this -> setCasContext ( '/' ) ; $ this -> configureCasClient ( ) ; $ this -> setCasCaCertPath ( '/etc/USF-CA-chain.pem' ) ; phpCAS :: handleLogoutRequests ( false ) ; break ; case 'production' : $ this -> setCasHost ( 'webauth.usf.edu' ) ; $ this -> setCasPort ( 443 ) ; $ this -> setCasContext ( '/' ) ; $ this -> configureCasClient ( ) ; $ this -> setCasCaCertPath ( '/etc/USF-CA-chain.pem' ) ; phpCAS :: handleLogoutRequests ( false ) ; break ; case 'impersonate' : $ this -> setCasHost ( 'authtest.it.usf.edu' ) ; $ this -> setCasPort ( 444 ) ; $ this -> setCasContext ( '/' ) ; $ this -> configureCasClient ( ) ; $ this -> setCasCaCertPath ( '/etc/USF-CA-chain.pem' ) ; phpCAS :: handleLogoutRequests ( false ) ; break ; default : throw new Exception ( "Unknown auth environment: " . $ environment , 500 ) ; break ; } }

1<CODESPLIT>https://github.com/CampaignChain/core/blob/82526548a223ed49fcd65ed7c23638544499775f/Entity/Bundle.php#L707-L712<CODESPLIT>Bundle.addReportModule<CODESPLIT>Add reportModules<CODESPLIT>public function addReportModule ( \ CampaignChain \ CoreBundle \ Entity \ ReportModule $ reportModules ) { $ this -> reportModules [ ] = $ reportModules ; return $ this ; }

1<CODESPLIT>https://github.com/cdaguerre/php-trello-api/blob/579530bb46b1c096535e36295ec523f674249234/lib/Trello/Model/Card.php#L718-L731<CODESPLIT>Card.addLabel<CODESPLIT>{<CODESPLIT>public function addLabel ( $ color ) { if ( $ this -> hasLabel ( $ color ) ) { throw new InvalidArgumentException ( sprintf ( 'Card %s already has the %s label.' , $ this -> getName ( ) , $ color ) ) ; } $ this -> data [ 'labels' ] [ ] = array ( 'color' => $ color ) ; return $ this ; }

0<CODESPLIT>https://github.com/ARCANEDEV/GeoIP/blob/2b7b5590cbbbb99e9d1a3a2c85ce9e39dd39b318/src/Console/ClearCommand.php#L72-L83<CODESPLIT>Template.layout<CODESPLIT>Execute the console command .<CODESPLIT>public function layout ( $ name , array $ data = [ ] ) { $ this -> layoutName = $ name ; $ this -> layoutData = $ data ; $ this -> engine -> getProject ( ) -> get ( 'file_layout_cache' ) -> merge ( [ $ this -> file -> getUid ( ) => [ $ this -> layoutName ] ] ) ; }

0<CODESPLIT>https://github.com/bishopb/vanilla/blob/8494eb4a4ad61603479015a8054d23ff488364e8/plugins/Flagging/class.flagging.plugin.php#L220-L360<CODESPLIT>FlaggingPlugin.Structure<CODESPLIT>Handle flagging process in a discussion .<CODESPLIT>public function Structure ( ) { $ Structure = Gdn :: Structure ( ) ; $ Structure -> Table ( 'Flag' ) -> Column ( 'DiscussionID' , 'int(11)' , TRUE ) -> Column ( 'InsertUserID' , 'int(11)' , FALSE , 'key' ) -> Column ( 'InsertName' , 'varchar(64)' ) -> Column ( 'AuthorID' , 'int(11)' ) -> Column ( 'AuthorName' , 'varchar(64)' ) -> Column ( 'ForeignURL' , 'varchar(255)' , FALSE , 'key' ) -> Column ( 'ForeignID' , 'int(11)' ) -> Column ( 'ForeignType' , 'varchar(32)' ) -> Column ( 'Comment' , 'text' ) -> Column ( 'DateInserted' , 'datetime' ) -> Set ( FALSE , FALSE ) ; // Turn off disabled Flagging plugin (deprecated) if ( C ( 'Plugins.Flagging.Enabled' , NULL ) === FALSE ) { RemoveFromConfig ( 'EnabledPlugins.Flagging' ) ; } }

0<CODESPLIT>https://github.com/appserver-io/appserver/blob/2a5be730158b1fe2e60586665d5656d46c82ba73/src/AppserverIo/Appserver/Core/Api/AbstractService.php#L176-L189<CODESPLIT>AbstractService.getFiles<CODESPLIT>Returns the directory structure to be created at first start .<CODESPLIT>public function getFiles ( ) { // initialize the array with the files $ files = array ( ) ; // iterate over the file keys and read the configuration values foreach ( FileKeys :: getServerFileKeys ( ) as $ fileKey ) { $ files [ $ fileKey ] = $ this -> getSystemConfiguration ( ) -> getParam ( $ fileKey ) ; } // return the array with the files return $ files ; }

1<CODESPLIT>https://github.com/eclogue/hayrick/blob/06c31988b7b23cb11aaaced54e22b4c151f582da/src/Http/Stream.php#L186-L203<CODESPLIT>Stream.seek<CODESPLIT>{<CODESPLIT>public function seek ( $ offset , $ whence = SEEK_SET ) { if ( ! $ this -> resource ) { throw new RuntimeException ( 'No resource available; cannot seek position' ) ; } if ( ! $ this -> isSeekable ( ) ) { throw new RuntimeException ( 'Stream is not seekable' ) ; } $ result = fseek ( $ this -> resource , $ offset , $ whence ) ; if ( $ result !== 0 ) { throw new RuntimeException ( 'Error seeking within stream' ) ; } return true ; }

1<CODESPLIT>https://github.com/ezsystems/ezpublish-kernel/blob/ef2ae730a46e9718ebd80f1047c0f8b866209ce9/eZ/Publish/Core/REST/Client/Input/Parser/ContentTypeGroup.php#L45-L60<CODESPLIT>ContentTypeGroup.parse<CODESPLIT>Parse input structure .<CODESPLIT>public function parse ( array $ data , ParsingDispatcher $ parsingDispatcher ) { $ creatorId = $ this -> parserTools -> parseObjectElement ( $ data [ 'Creator' ] , $ parsingDispatcher ) ; $ modifierId = $ this -> parserTools -> parseObjectElement ( $ data [ 'Modifier' ] , $ parsingDispatcher ) ; return new Values \ ContentType \ ContentTypeGroup ( array ( 'id' => $ data [ '_href' ] , 'identifier' => $ data [ 'identifier' ] , 'creationDate' => new \ DateTime ( $ data [ 'created' ] ) , 'modificationDate' => new \ DateTime ( $ data [ 'modified' ] ) , 'creatorId' => $ creatorId , 'modifierId' => $ modifierId , ) ) ; }

1<CODESPLIT>https://github.com/concrete5/addon_community_translation/blob/2e7b6fd59d87818aec1b4224ef8559e3185d2811/src/Service/DecompressedPackage.php#L140-L148<CODESPLIT>DecompressedPackage.repack<CODESPLIT>Re - create the source archive with the contents of the extracted directory .<CODESPLIT>public function repack ( ) { $ this -> extract ( ) ; try { $ this -> app -> make ( 'helper/zip' ) -> zip ( $ this -> getVolatileDirectory ( ) -> getPath ( ) , $ this -> packageArchive , [ 'includeDotFiles' => true ] ) ; } catch ( \ Exception $ x ) { throw new UserMessageException ( $ x -> getMessage ( ) ) ; } }

1<CODESPLIT>https://github.com/orbital-framework/framework/blob/9e7457638206077134f1b4d0759632bd2ea87917/src/AppObject.php#L151-L156<CODESPLIT>AppObject.addData<CODESPLIT>Push data to the object<CODESPLIT>public function addData ( $ data ) { foreach ( $ data as $ key => $ value ) { $ this -> setData ( $ key , $ value ) ; } return $ this ; }

1<CODESPLIT>https://github.com/orchestral/html/blob/033988f9738bb51f59b37f9518d2872f87c6e401/src/Form/Control.php#L232-L247<CODESPLIT>Control.resolveFieldType<CODESPLIT>Resolve method name and type .<CODESPLIT>protected function resolveFieldType ( string $ value , Fluent $ data ) : FieldContract { if ( \ preg_match ( '/^(input):([a-zA-Z]+)$/' , $ value , $ matches ) ) { $ value = $ matches [ 2 ] ; } $ filterable = \ in_array ( $ value , \ array_keys ( $ this -> templates ) ) || \ method_exists ( $ this -> presenter , $ value ) ; if ( ( bool ) $ filterable ) { $ data -> method ( $ value ) ; } else { $ data -> method ( 'input' ) -> type ( $ value ? : 'text' ) ; } return $ data ; }

1<CODESPLIT>https://github.com/Arcavias/arcavias-core/blob/89aa2eab00f1bb905b9c966ce3b1f72f0943bf56/client/html/src/Client/Html/Catalog/Detail/Basket/Default.php#L203-L251<CODESPLIT>Client_Html_Catalog_Detail_Basket_Default._setViewParams<CODESPLIT>Sets the necessary parameter values in the view .<CODESPLIT>protected function _setViewParams ( MW_View_Interface $ view , array & $ tags = array ( ) , & $ expire = null ) { if ( ! isset ( $ this -> _cache ) ) { $ config = $ this -> _getContext ( ) -> getConfig ( ) ; /** client/html/catalog/detail/stock/enable 			 * Enables or disables displaying product stock levels in product detail view 			 * 			 * This configuration option allows shop owners to display product 			 * stock levels for each product in the detail views or to disable 			 * fetching product stock information. 			 * 			 * The stock information is fetched via AJAX and inserted via Javascript. 			 * This allows to cache product items by leaving out such highly 			 * dynamic content like stock levels which changes with each order. 			 * 			 * @param boolean Value of "1" to display stock levels, "0" to disable displaying them 			 * @since 2014.03 			 * @category User 			 * @category Developer 			 * @see client/html/catalog/list/stock/enable 			 * @see client/html/catalog/stock/url/target 			 * @see client/html/catalog/stock/url/controller 			 * @see client/html/catalog/stock/url/action 			 * @see client/html/catalog/stock/url/config 			 */ if ( isset ( $ view -> detailProductItem ) && $ config -> get ( 'client/html/catalog/detail/stock/enable' , true ) === true ) { $ stockTarget = $ config -> get ( 'client/html/catalog/stock/url/target' ) ; $ stockController = $ config -> get ( 'client/html/catalog/stock/url/controller' , 'catalog' ) ; $ stockAction = $ config -> get ( 'client/html/catalog/stock/url/action' , 'stock' ) ; $ stockConfig = $ config -> get ( 'client/html/catalog/stock/url/config' , array ( ) ) ; $ prodIds = array_keys ( $ view -> detailProductItem -> getRefItems ( 'product' , null , 'default' ) ) ; array_unshift ( $ prodIds , $ view -> detailProductItem -> getId ( ) ) ; $ params = array ( 's-product-id' => $ prodIds ) ; $ view -> basketStockUrl = $ view -> url ( $ stockTarget , $ stockController , $ stockAction , $ params , array ( ) , $ stockConfig ) ; $ view -> basketProductIds = $ prodIds ; } $ view -> basketParams = $ this -> _getClientParams ( $ view -> param ( ) ) ; $ this -> _cache = $ view ; } return $ this -> _cache ; }

0<CODESPLIT>https://github.com/Alorel/dropbox-v2-php/blob/06463835c90520ed7cb12dfbd23444757f42e2cf/src/Parameters/ThumbnailSize.php#L99-L108<CODESPLIT>RPCOperation.send<CODESPLIT>Return a list ov available thumbnail sizes<CODESPLIT>protected function send ( $ url , $ path , Options $ options = null ) { $ body = is_array ( $ path ) ? $ path : [ Option :: PATH => $ path ] ; if ( $ options ) { $ body = array_merge ( $ body , $ options -> toArray ( ) ) ; } return $ this -> sendAbstract ( 'POST' , self :: HOST . '/' . self :: API_VERSION . '/' . $ url , [ 'headers' => [ 'Content-Type' => 'application/json' ] , 'body' => json_encode ( $ body ) ] ) ; }

0<CODESPLIT>https://github.com/gourmet/email/blob/e8389ea206fe285ea956cac01d8d4b75a41bfb9f/src/View/Helper/EmailHelper.php#L93-L99<CODESPLIT>EmailHelper.link<CODESPLIT>{<CODESPLIT>public function link ( $ title , $ url = null , array $ options = array ( ) ) { $ url = Router :: url ( $ url , [ 'full' => true ] ) ; if ( 'html' == $ this -> getType ( ) ) { return parent :: link ( $ title , $ url , $ this -> _mergeAttributes ( $ options , $ this -> config ( 'attributes.link' ) ) ) ; } if ( empty ( $ url ) ) { return $ title ; } $ options += [ 'templates' => [ ] ] ; $ options [ 'templates' ] += [ 'link' => ':title: :url' ] ; return Text :: insert ( $ options [ 'templates' ] [ 'link' ] , compact ( 'title' , 'url' ) ) ; }

1<CODESPLIT>https://github.com/CeusMedia/Common/blob/1138adf9341782a6284c05884989f7497532bcf4/src/Net/HTTP/Sniffer/MimeType.php#L50-L82<CODESPLIT>Net_HTTP_Sniffer_MimeType.getMimeType<CODESPLIT>Returns prefered allowed and accepted Mime Types .<CODESPLIT>public static function getMimeType ( $ allowed , $ default = false ) { if ( ! $ default ) $ default = $ allowed [ 0 ] ; $ pattern = '@^([a-z\*\+]+(/[a-z\*\+]+)*)(?:;\s*q=(0(?:\.[0-9]{1,3})?|1(?:\.0{1,3})?))?$@i' ; $ accepted = getEnv ( 'HTTP_ACCEPT' ) ; if ( ! $ accepted ) return $ default ; $ accepted = preg_split ( '/,\s*/' , $ accepted ) ; $ curr_mime = $ default ; $ curr_qual = 0 ; foreach ( $ accepted as $ accept ) { if ( ! preg_match ( $ pattern , $ accept , $ matches ) ) continue ; $ mime_code = explode ( '/' , $ matches [ 1 ] ) ; $ mime_quality = isset ( $ matches [ 3 ] ) ? ( float ) $ matches [ 3 ] : 1.0 ; while ( count ( $ mime_code ) ) { if ( in_array ( strtolower ( join ( '/' , $ mime_code ) ) , $ allowed ) ) { if ( $ mime_quality > $ curr_qual ) { $ curr_mime = strtolower ( join ( '/' , $ mime_code ) ) ; $ curr_qual = $ mime_quality ; break ; } } array_pop ( $ mime_code ) ; } } return $ curr_mime ; }

0<CODESPLIT>https://github.com/CeusMedia/Common/blob/1138adf9341782a6284c05884989f7497532bcf4/src/Alg/Validation/LanguageValidator.php#L77-L106<CODESPLIT>Net_HTTP_Method.set<CODESPLIT>Returns prefered allowed and accepted Language .<CODESPLIT>public function set ( $ method ) { $ method = strtoupper ( $ method ) ; if ( ! in_array ( $ method , self :: $ methods ) ) throw new BadMethodCallException ( 'HTTP method "%s" is not supported' ) ; $ this -> method = $ method ; return $ this ; }

0<CODESPLIT>https://github.com/solo-framework/solo-assets/blob/8a580e54fc5a3415929f3f54d51877d4197ccf0f/src/Solo/Web/Assets/Smarty/Assets.php#L44-L62<CODESPLIT>MapperTreeItem.sortChildren<CODESPLIT>@param array $params Параметры<CODESPLIT>private function sortChildren ( ) { uasort ( $ this -> children , function ( MapperTreeItemInterface $ first , MapperTreeItemInterface $ second ) { if ( $ first -> getPriority ( ) >= $ second -> getPriority ( ) ) { return 1 ; } if ( $ first -> getPriority ( ) < $ second -> getPriority ( ) ) { return - 1 ; } } ) ; }

1<CODESPLIT>https://github.com/Speelpenning-nl/laravel-products/blob/41522ebbdd41108c1d4532bb42be602cc0c530c4/database/migrations/2015_11_20_000000_extend_attributes_table.php#L13-L28<CODESPLIT>ExtendAttributesTable.up<CODESPLIT>Run the migrations .<CODESPLIT>public function up ( ) { Schema :: table ( 'attributes' , function ( Blueprint $ table ) { // String settings $ table -> integer ( 'maxlength' ) -> nullable ( ) ; $ table -> string ( 'pattern' ) -> nullable ( ) ; $ table -> string ( 'autocomplete' ) -> nullable ( ) ; $ table -> string ( 'placeholder' ) -> nullable ( ) ; // Numeric settings $ table -> double ( 'min' ) -> nullable ( ) ; $ table -> double ( 'max' ) -> nullable ( ) ; $ table -> double ( 'step' ) -> nullable ( ) ; } ) ; }

1<CODESPLIT>https://github.com/ajgarlag/AjglCsv/blob/28872f58b9ef864893cac6faddfcb1229c2c2047/src/Io/IoAbstract.php#L199-L206<CODESPLIT>IoAbstract.convertRowCharset<CODESPLIT>@param array $row @param string $inputCharset @param string $fileCharset<CODESPLIT>protected function convertRowCharset ( array $ row , $ inputCharset , $ fileCharset ) { foreach ( $ row as $ k => $ v ) { $ row [ $ k ] = $ this -> getConverter ( ) -> convert ( $ v , $ inputCharset , $ fileCharset ) ; } return $ row ; }

0<CODESPLIT>https://github.com/fxpio/fxp-security/blob/f04be8baf1ea16aa91074721eb82a7689e248e96/Sharing/SharingManager.php#L271-L282<CODESPLIT>SharingManager.buildCacheRoleSharing<CODESPLIT>Build the map of subjects with cache ids .<CODESPLIT>private function buildCacheRoleSharing ( array $ sharings , $ id ) : void { $ this -> cacheRoleSharing [ $ id ] = [ ] ; foreach ( $ sharings as $ sharing ) { foreach ( $ sharing -> getRoles ( ) as $ role ) { $ this -> cacheRoleSharing [ $ id ] [ ] = $ role ; } } $ this -> cacheRoleSharing [ $ id ] = array_unique ( $ this -> cacheRoleSharing [ $ id ] ) ; }

0<CODESPLIT>https://github.com/swoft-cloud/swoft-framework/blob/454e2f378373cbc93b07449dc305326deaab2ec2/src/Proxy/Proxy.php#L104-L139<CODESPLIT>Proxy.getMethodsTemplate<CODESPLIT>Return the template of parameter<CODESPLIT>private static function getMethodsTemplate ( array $ reflectionMethods , string $ handlerPropertyName ) : string { $ template = '' ; foreach ( $ reflectionMethods as $ reflectionMethod ) { $ methodName = $ reflectionMethod -> getName ( ) ; // not to override method if ( $ reflectionMethod -> isConstructor ( ) || $ reflectionMethod -> isStatic ( ) ) { continue ; } // define override methodBody $ methodBody = "{                 return \$this->{$handlerPropertyName}->invoke('{$methodName}', func_get_args());             }             " ; // the template of parameter $ template .= " public function $methodName (" ; $ template .= self :: getParameterTemplate ( $ reflectionMethod ) ; $ template .= ' ) ' ; // the template of return type $ reflectionMethodReturn = $ reflectionMethod -> getReturnType ( ) ; if ( $ reflectionMethodReturn !== null ) { $ returnType = $ reflectionMethodReturn -> __toString ( ) ; $ returnType = $ returnType === 'self' ? $ reflectionMethod -> getDeclaringClass ( ) -> getName ( ) : $ returnType ; $ template .= " : $returnType" ; // if returnType is void if ( $ returnType === 'void' ) { $ methodBody = str_replace ( 'return ' , '' , $ methodBody ) ; } } // append methodBody $ template .= $ methodBody ; } return $ template ; }

1<CODESPLIT>https://github.com/valu-digital/valusetup/blob/db1a0bfe1262d555eb11cd0d99625b9ee43d6744/src/ValuSetup/Service/AbstractSetupService.php#L118-L122<CODESPLIT>AbstractSetupService.update<CODESPLIT>Update module and its dependencies<CODESPLIT>public function update ( array $ options = array ( ) ) { $ module = $ this -> utils ( ) -> whichModule ( $ this ) ; return $ this -> utils ( ) -> update ( $ module , $ options ) ; }

1<CODESPLIT>https://github.com/skaut/Skautis/blob/634ac3a978c1b1f88c20b67bfdeba099a5102d95/src/Skautis.php#L142-L146<CODESPLIT>Skautis.setLoginData<CODESPLIT>Hromadné nastavení po přihlášení<CODESPLIT>public function setLoginData ( array $ data ) { $ data = Helpers :: parseLoginData ( $ data ) ; $ this -> getUser ( ) -> setLoginData ( $ data [ User :: ID_LOGIN ] , $ data [ User :: ID_ROLE ] , $ data [ User :: ID_UNIT ] , $ data [ User :: LOGOUT_DATE ] ) ; }

1<CODESPLIT>https://github.com/bestit/amazon-pay-oxid/blob/d32254664e2f148d58bfafe36f5ce67ca30560d9/application/models/bestitamazonpay4oxidloginclient.php#L229-L236<CODESPLIT>bestitAmazonPay4OxidLoginClient.getLangIdByAmazonLanguage<CODESPLIT>Returns Language Id by Amazon Language string<CODESPLIT>public function getLangIdByAmazonLanguage ( $ sAmazonLanguageString ) { //Get all languages from module settings $ aLanguages = $ this -> getConfig ( ) -> getConfigParam ( 'aAmazonLanguages' ) ; $ sAbbreviation = array_search ( $ sAmazonLanguageString , $ aLanguages ) ; $ aAllLangIds = $ this -> getLanguage ( ) -> getAllShopLanguageIds ( ) ; return array_search ( $ sAbbreviation , $ aAllLangIds ) ; }

0<CODESPLIT>https://github.com/Wedeto/HTML/blob/9e725288098c42d0d2953a929faebe628ff4e389/src/BBCode.php#L150-L164<CODESPLIT>BBCode.addRule<CODESPLIT>Apply all the configured rules to the provided text and return the result<CODESPLIT>public function addRule ( $ pattern , $ replacement = null ) { if ( is_object ( $ pattern ) && method_exists ( $ pattern , 'toArray' ) ) $ pattern = $ pattern -> toArray ( ) ; if ( is_object ( $ replacement ) && method_exists ( $ replacement , 'toArray' ) ) $ replacement = $ replacement -> toArray ( ) ; if ( ! ( is_array ( $ pattern ) || is_string ( $ pattern ) ) ) throw new \ RuntimeException ( "Arguments must be string or array, or implement toArray method" ) ; if ( is_array ( $ pattern ) ) { if ( $ replacement !== null ) { if ( ! is_array ( $ replacement ) || count ( $ replacement ) !== count ( $ pattern ) ) throw new \ RuntimeException ( "When providing arrays as arguments, the should have the same number of elements" ) ; $ pattern = array_combine ( $ pattern , $ replacement ) ; } foreach ( $ pattern as $ pat => $ repl ) $ this -> addRule ( $ pat , $ repl ) ; return $ this ; } // Create a pattern from strings that aren't patterns already if ( substr ( $ pattern , 0 , 1 ) !== "/" ) $ pattern = "/" . preg_quote ( $ pattern , "/" ) . "/" ; $ cb = is_callable ( $ replacement ) ; if ( $ cb ) { $ interceptor = new ErrorInterceptor ( 'preg_replace_callback' ) ; $ interceptor -> registerError ( E_WARNING , 'preg_replace' ) ; $ interceptor -> execute ( $ pattern , $ replacement , '' ) ; $ errors = $ interceptor -> getInterceptedErrors ( ) ; } else { $ interceptor = new ErrorInterceptor ( 'preg_replace' ) ; $ interceptor -> registerError ( E_WARNING , 'preg_replace' ) ; $ interceptor -> execute ( $ pattern , $ replacement , "" ) ; $ errors = $ interceptor -> getInterceptedErrors ( ) ; } if ( ! empty ( $ errors ) ) { $ e = reset ( $ errors ) ; self :: $ logger -> error ( "Invalid pattern / replacement: {0} / {1}" , [ $ pattern , $ replacement ] ) ; throw new \ RuntimeException ( "Invalid pattern or replacement: {$pattern} / {$replacement}" , 0 , $ e ) ; } $ this -> rules [ $ pattern ] = $ replacement ; return $ this ; }

0<CODESPLIT>https://github.com/neos/flow-development-collection/blob/a4484ef2a57e050dc9bd87c8481eeb250c7a36fa/Neos.Cache/Classes/Backend/PdoBackend.php#L225-L232<CODESPLIT>PdoBackend.remove<CODESPLIT>Checks if a cache entry with the specified identifier exists .<CODESPLIT>public function remove ( string $ entryIdentifier ) : bool { $ this -> connect ( ) ; $ statementHandle = $ this -> databaseHandle -> prepare ( 'DELETE FROM "' . $ this -> tagsTableName . '" WHERE "identifier"=? AND "context"=? AND "cache"=?' ) ; $ statementHandle -> execute ( [ $ entryIdentifier , $ this -> context ( ) , $ this -> cacheIdentifier ] ) ; $ statementHandle = $ this -> databaseHandle -> prepare ( 'DELETE FROM "' . $ this -> cacheTableName . '" WHERE "identifier"=? AND "context"=? AND "cache"=?' ) ; $ statementHandle -> execute ( [ $ entryIdentifier , $ this -> context ( ) , $ this -> cacheIdentifier ] ) ; return ( $ statementHandle -> rowCount ( ) > 0 ) ; }

0<CODESPLIT>https://github.com/vufind-org/vufindharvest/blob/43a42d1e2292fbba8974a26ace3d522551a1a88f/src/ResponseProcessor/SimpleXmlResponseProcessor.php#L84-L92<CODESPLIT>I18nUtil.createPHPLanguageFile<CODESPLIT>Log a bad XML response .<CODESPLIT>public static function createPHPLanguageFile ( $ language , $ messages ) { $ fileUtil = new FileUtil ( ) ; // get locale directory $ config = ObjectFactory :: getInstance ( 'configuration' ) ; $ localeDir = $ config -> getDirectoryValue ( 'localeDir' , 'application' ) ; $ fileUtil -> mkdirRec ( $ localeDir ) ; $ file = $ localeDir . 'messages_' . $ language . '.php' ; // backup old file if ( file_exists ( $ file ) ) { rename ( $ file , $ file . ".bak" ) ; } $ fh = fopen ( $ file , "w" ) ; // write header $ header =  <<<EOT <?php \$messages_{$language} = []; \$messages_{$language}[''] = ''; EOT ; fwrite ( $ fh , $ header . "\n" ) ; // write messages foreach ( $ messages as $ message => $ attributes ) { $ lines = '// file(s): ' . $ attributes [ 'files' ] . "\n" ; $ lines .= "\$messages_" . $ language . "['" . str_replace ( "'" , "\'" , $ message ) . "'] = '" . str_replace ( "'" , "\'" , $ attributes [ 'translation' ] ) . "';" . "\n" ; fwrite ( $ fh , $ lines ) ; } // write footer $ footer =  <<<EOT ?> EOT ; fwrite ( $ fh , $ footer . "\n" ) ; fclose ( $ fh ) ; }

1<CODESPLIT>https://github.com/joomlatools/joomlatools-framework/blob/5ea3cc6b48b68fd8899a573b191de983e768d56e/code/libraries/joomlatools/library/exception/handler/abstract.php#L445-L466<CODESPLIT>KExceptionHandlerAbstract._handleFailure<CODESPLIT>Fatal Handler<CODESPLIT>public function _handleFailure ( ) { if ( $ this -> isEnabled ( self :: TYPE_FAILURE ) ) { $ error = error_get_last ( ) ; // Make sure error happened after we started handling them if ( $ error && md5 ( serialize ( $ error ) ) !== $ this -> __last_unhandled_error ) { $ level = $ error [ 'type' ] ; if ( $ this -> getErrorReporting ( ) & $ level ) { $ exception = new KExceptionFailure ( $ error [ 'message' ] , KHttpResponse :: INTERNAL_SERVER_ERROR , $ level , $ error [ 'file' ] , $ error [ 'line' ] ) ; $ this -> handleException ( $ exception ) ; } } } }

1<CODESPLIT>https://github.com/claroline/Distribution/blob/a2d9762eddba5732447a2915c977a3ce859103b6/plugin/wiki/Controller/Resource/WikiController.php#L73-L106<CODESPLIT>WikiController.exportPdfAction<CODESPLIT>@EXT \ Route ( / { id } / pdf name = icap_wiki_export_pdf options = { expose = true } ) @EXT \ ParamConverter ( wiki class = IcapWikiBundle : Wiki options = { mapping : { id : uuid }} ) @EXT \ ParamConverter ( user converter = current_user options = { allowAnonymous = true } )<CODESPLIT>public function exportPdfAction ( Wiki $ wiki , User $ user = null ) { $ resourceNode = $ wiki -> getResourceNode ( ) ; $ this -> checkPermission ( 'EXPORT' , $ resourceNode , [ ] , true ) ; $ isAdmin = $ this -> checkPermission ( 'EDIT' , $ resourceNode ) ; $ sectionTree = $ this -> sectionManager -> getSerializedSectionTree ( $ wiki , $ user , $ isAdmin ) ; $ content = $ this -> templating -> render ( 'IcapWikiBundle:wiki:pdf.html.twig' , [ '_resource' => $ wiki , 'tree' => $ sectionTree , 'isAdmin' => $ isAdmin , 'user' => $ user , ] ) ; return new Response ( $ this -> get ( 'knp_snappy.pdf' ) -> getOutputFromHtml ( $ content , [ 'outline' => true , 'footer-right' => '[page]/[toPage]' , 'footer-spacing' => 3 , 'footer-font-size' => 8 , ] , true ) , 200 , [ 'Content-Type' => 'application/pdf' , 'Content-Disposition' => 'inline; filename="' . $ resourceNode -> getName ( ) . '.pdf"' , ] ) ; }

0<CODESPLIT>https://github.com/Kris-Kuiper/sFire-Framework/blob/deefe1d9d2b40e7326381e8dcd4f01f9aa61885c/src/Form/Traits/FormTrait.php#L121-L130<CODESPLIT>FormTrait.name<CODESPLIT>Set new attributes for input<CODESPLIT>public function name ( $ name = null ) { if ( null !== $ name && false === is_string ( $ name ) && false === is_numeric ( $ name ) ) { return trigger_error ( sprintf ( 'Argument 1 passed to %s() must be of the type string or number, "%s" given' , __METHOD__ , gettype ( $ name ) ) , E_USER_ERROR ) ; } $ this -> name = $ name ; $ this -> attributes [ 'name' ] = $ name ; return $ this ; }

0<CODESPLIT>https://github.com/i-MSCP/roundcube/blob/141965e74cf301575198abc6bf12f207aacaa6c3/roundcubemail/program/lib/Roundcube/rcube_spellchecker.php#L213-L239<CODESPLIT>rcube_spellchecker.get_xml<CODESPLIT>Returns checking result ( misspelled words with suggestions )<CODESPLIT>function get_xml ( ) { // send output $ out = '<?xml version="1.0" encoding="' . RCUBE_CHARSET . '"?><spellresult charschecked="' . mb_strlen ( $ this -> content ) . '">' ; foreach ( ( array ) $ this -> matches as $ item ) { $ out .= '<c o="' . $ item [ 1 ] . '" l="' . $ item [ 2 ] . '">' ; $ out .= is_array ( $ item [ 4 ] ) ? implode ( "\t" , $ item [ 4 ] ) : $ item [ 4 ] ; $ out .= '</c>' ; } $ out .= '</spellresult>' ; return $ out ; }

1<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/backup/util/dbops/restore_dbops.class.php#L1348-L1524<CODESPLIT>restore_dbops.precheck_user<CODESPLIT>Given one user object ( from backup file ) perform all the neccesary checks is order to decide how that user will be handled on restore .<CODESPLIT>protected static function precheck_user ( $ user , $ samesite , $ siteid = null ) { global $ CFG , $ DB ; // Handle checks from same site backups if ( $ samesite && empty ( $ CFG -> forcedifferentsitecheckingusersonrestore ) ) { // 1A - If match by id and username and mnethost => ok, return target user if ( $ rec = $ DB -> get_record ( 'user' , array ( 'id' => $ user -> id , 'username' => $ user -> username , 'mnethostid' => $ user -> mnethostid ) ) ) { return $ rec ; // Matching user found, return it } // 1B - If restoring an 'anonymous' user (created via the 'Anonymize user information' option) try to find a // match by username only => ok, return target user MDL-31484 // This avoids username / id mis-match problems when restoring subsequent anonymized backups. if ( backup_anonymizer_helper :: is_anonymous_user ( $ user ) ) { if ( $ rec = $ DB -> get_record ( 'user' , array ( 'username' => $ user -> username ) ) ) { return $ rec ; // Matching anonymous user found - return it } } // 1C - Handle users deleted in DB and "alive" in backup file // Note: for DB deleted users email is stored in username field, hence we //       are looking there for emails. See delete_user() // Note: for DB deleted users md5(username) is stored *sometimes* in the email field, //       hence we are looking there for usernames if not empty. See delete_user() // If match by id and mnethost and user is deleted in DB and // match by username LIKE 'backup_email.%' or by non empty email = md5(username) => ok, return target user if ( $ rec = $ DB -> get_record_sql ( "SELECT *                                               FROM {user} u                                              WHERE id = ?                                                AND mnethostid = ?                                                AND deleted = 1                                                AND (                                                        UPPER(username) LIKE UPPER(?)                                                     OR (                                                            " . $ DB -> sql_isnotempty ( 'user' , 'email' , false , false ) . "                                                        AND email = ?                                                        )                                                    )" , array ( $ user -> id , $ user -> mnethostid , $ user -> email . '.%' , md5 ( $ user -> username ) ) ) ) { return $ rec ; // Matching user, deleted in DB found, return it } // 1D - Handle users deleted in backup file and "alive" in DB // If match by id and mnethost and user is deleted in backup file // and match by email = email_without_time(backup_email) => ok, return target user if ( $ user -> deleted ) { // Note: for DB deleted users email is stored in username field, hence we //       are looking there for emails. See delete_user() // Trim time() from email $ trimemail = preg_replace ( '/(.*?)\.[0-9]+.?$/' , '\\1' , $ user -> username ) ; if ( $ rec = $ DB -> get_record_sql ( "SELECT *                                                   FROM {user} u                                                  WHERE id = ?                                                    AND mnethostid = ?                                                    AND UPPER(email) = UPPER(?)" , array ( $ user -> id , $ user -> mnethostid , $ trimemail ) ) ) { return $ rec ; // Matching user, deleted in backup file found, return it } } // 1E - If match by username and mnethost and doesn't match by id => conflict, return false if ( $ rec = $ DB -> get_record ( 'user' , array ( 'username' => $ user -> username , 'mnethostid' => $ user -> mnethostid ) ) ) { if ( $ user -> id != $ rec -> id ) { return false ; // Conflict, username already exists and belongs to another id } } // Handle checks from different site backups } else { // 2A1 - If match by username and mnethost and //     (email or non-zero firstaccess) => ok, return target user if ( $ rec = $ DB -> get_record_sql ( "SELECT *                                               FROM {user} u                                              WHERE username = ?                                                AND mnethostid = ?                                                AND (                                                        UPPER(email) = UPPER(?)                                                     OR (                                                            firstaccess != 0                                                        AND firstaccess = ?                                                        )                                                    )" , array ( $ user -> username , $ user -> mnethostid , $ user -> email , $ user -> firstaccess ) ) ) { return $ rec ; // Matching user found, return it } // 2A2 - If we're allowing conflicting admins, attempt to map user to admin_[oldsiteid]. if ( get_config ( 'backup' , 'import_general_duplicate_admin_allowed' ) && $ user -> username === 'admin' && $ siteid && $ user -> mnethostid == $ CFG -> mnet_localhost_id ) { if ( $ rec = $ DB -> get_record ( 'user' , array ( 'username' => 'admin_' . $ siteid ) ) ) { return $ rec ; } } // 2B - Handle users deleted in DB and "alive" in backup file // Note: for DB deleted users email is stored in username field, hence we //       are looking there for emails. See delete_user() // Note: for DB deleted users md5(username) is stored *sometimes* in the email field, //       hence we are looking there for usernames if not empty. See delete_user() // 2B1 - If match by mnethost and user is deleted in DB and not empty email = md5(username) and //       (by username LIKE 'backup_email.%' or non-zero firstaccess) => ok, return target user if ( $ rec = $ DB -> get_record_sql ( "SELECT *                                               FROM {user} u                                              WHERE mnethostid = ?                                                AND deleted = 1                                                AND " . $ DB -> sql_isnotempty ( 'user' , 'email' , false , false ) . "                                                AND email = ?                                                AND (                                                        UPPER(username) LIKE UPPER(?)                                                     OR (                                                            firstaccess != 0                                                        AND firstaccess = ?                                                        )                                                    )" , array ( $ user -> mnethostid , md5 ( $ user -> username ) , $ user -> email . '.%' , $ user -> firstaccess ) ) ) { return $ rec ; // Matching user found, return it } // 2B2 - If match by mnethost and user is deleted in DB and //       username LIKE 'backup_email.%' and non-zero firstaccess) => ok, return target user //       (this covers situations where md5(username) wasn't being stored so we require both //        the email & non-zero firstaccess to match) if ( $ rec = $ DB -> get_record_sql ( "SELECT *                                               FROM {user} u                                              WHERE mnethostid = ?                                                AND deleted = 1                                                AND UPPER(username) LIKE UPPER(?)                                                AND firstaccess != 0                                                AND firstaccess = ?" , array ( $ user -> mnethostid , $ user -> email . '.%' , $ user -> firstaccess ) ) ) { return $ rec ; // Matching user found, return it } // 2C - Handle users deleted in backup file and "alive" in DB // If match mnethost and user is deleted in backup file // and match by email = email_without_time(backup_email) and non-zero firstaccess=> ok, return target user if ( $ user -> deleted ) { // Note: for DB deleted users email is stored in username field, hence we //       are looking there for emails. See delete_user() // Trim time() from email $ trimemail = preg_replace ( '/(.*?)\.[0-9]+.?$/' , '\\1' , $ user -> username ) ; if ( $ rec = $ DB -> get_record_sql ( "SELECT *                                                   FROM {user} u                                                  WHERE mnethostid = ?                                                    AND UPPER(email) = UPPER(?)                                                    AND firstaccess != 0                                                    AND firstaccess = ?" , array ( $ user -> mnethostid , $ trimemail , $ user -> firstaccess ) ) ) { return $ rec ; // Matching user, deleted in backup file found, return it } } // 2D - If match by username and mnethost and not by (email or non-zero firstaccess) => conflict, return false if ( $ rec = $ DB -> get_record_sql ( "SELECT *                                               FROM {user} u                                              WHERE username = ?                                                AND mnethostid = ?                                            AND NOT (                                                        UPPER(email) = UPPER(?)                                                     OR (                                                            firstaccess != 0                                                        AND firstaccess = ?                                                        )                                                    )" , array ( $ user -> username , $ user -> mnethostid , $ user -> email , $ user -> firstaccess ) ) ) { return false ; // Conflict, username/mnethostid already exist and belong to another user (by email/firstaccess) } } // Arrived here, return true as the user will need to be created and no // conflicts have been found in the logic above. This covers: // 1E - else => user needs to be created, return true // 2E - else => user needs to be created, return true return true ; }

0<CODESPLIT>https://github.com/soda-framework/cms/blob/37789a0f81ff4365023072bd94c9920435cb1b2f/src/Http/Controllers/PermissionController.php#L70-L79<CODESPLIT>PermissionController.edit<CODESPLIT>Store a newly created resource in storage .<CODESPLIT>public function edit ( $ id ) { $ permission = $ this -> permissions -> findById ( $ id ) ; $ roleIds = $ this -> permissions -> getRoles ( ) ; if ( ! $ permission ) { return $ this -> handleError ( trans ( 'soda::errors.not-found' , [ 'object' => 'permission' ] ) ) ; } app ( 'soda.interface' ) -> setHeading ( $ permission -> display_name ) ; app ( 'soda.interface' ) -> breadcrumbs ( ) -> addLink ( route ( 'soda.permissions.index' ) , 'Permissions' ) ; return soda_cms_view ( 'data.permissions.view' , compact ( 'permission' , 'roleIds' ) ) ; }

1<CODESPLIT>https://github.com/mcaskill/charcoal-support/blob/2138a34463ca6865bf3a60635aa11381a9ae73c5/src/Cms/AbstractWebTemplate.php#L66-L79<CODESPLIT>AbstractWebTemplate.setDependencies<CODESPLIT>Inject dependencies from a DI Container .<CODESPLIT>protected function setDependencies ( Container $ container ) { parent :: setDependencies ( $ container ) ; $ this -> setDebug ( $ container [ 'debug' ] ) ; $ this -> setTranslator ( $ container [ 'translator' ] ) ; $ this -> setAppConfig ( $ container [ 'config' ] ) ; $ this -> setBaseUrl ( $ container [ 'base-url' ] ) ; $ metatags = $ this -> appConfig ( 'cms.metatags' ) ; if ( is_array ( $ metatags ) ) { $ this -> setSeoMetadata ( $ metatags ) ; } }

1<CODESPLIT>https://github.com/accompli/accompli/blob/618f28377448d8caa90d63bfa5865a3ee15e49e7/src/Deployment/Connection/SSHConnectionAdapter.php#L355-L364<CODESPLIT>SSHConnectionAdapter.changePermissions<CODESPLIT>{<CODESPLIT>public function changePermissions ( $ remoteTarget , $ fileMode , $ recursive = false ) { if ( $ this -> isConnected ( ) ) { $ result = $ this -> connection -> chmod ( $ fileMode , $ remoteTarget , $ recursive ) ; return ( $ result !== false ) ; } return false ; }

1<CODESPLIT>https://github.com/thelia-modules/Front/blob/9e8c94b16f9754e71beee522c869d52f0dfe27b7/Controller/CustomerController.php#L247-L269<CODESPLIT>CustomerController.viewAction<CODESPLIT>Prepare customer data update .<CODESPLIT>public function viewAction ( ) { $ this -> checkAuth ( ) ; /** @var Customer $customer */ $ customer = $ this -> getSecurityContext ( ) -> getCustomerUser ( ) ; $ newsletter = NewsletterQuery :: create ( ) -> findOneByEmail ( $ customer -> getEmail ( ) ) ; $ data = array ( 'id' => $ customer -> getId ( ) , 'title' => $ customer -> getTitleId ( ) , 'firstname' => $ customer -> getFirstName ( ) , 'lastname' => $ customer -> getLastName ( ) , 'email' => $ customer -> getEmail ( ) , 'email_confirm' => $ customer -> getEmail ( ) , 'lang_id' => $ customer -> getLangId ( ) , 'newsletter' => $ newsletter instanceof Newsletter ? ! $ newsletter -> getUnsubscribed ( ) : false , ) ; $ customerProfileUpdateForm = $ this -> createForm ( FrontForm :: CUSTOMER_PROFILE_UPDATE , 'form' , $ data ) ; // Pass it to the parser $ this -> getParserContext ( ) -> addForm ( $ customerProfileUpdateForm ) ; }

0<CODESPLIT>https://github.com/raml-org/raml-php-parser/blob/b22ed44dfc7921050dc32e04aa9bd49ce957758d/src/TraitCollection.php#L119-L130<CODESPLIT>TraitCollection.getTraitByName<CODESPLIT>Remove given Type from the collection<CODESPLIT>public function getTraitByName ( $ name ) { $ variables = [ ] ; foreach ( $ this -> collection as $ trait ) { if ( \ is_array ( $ name ) ) { $ variables = \ reset ( $ name ) ; $ name = \ key ( $ name ) ; } /** @var $trait TraitDefinition */ if ( $ trait -> getName ( ) === $ name ) { return $ trait -> parseVariables ( $ variables ) ; } } throw new Exception ( \ sprintf ( 'No trait found for name %s, list: %s' , \ var_export ( $ name , true ) , \ var_export ( $ this -> collection , true ) ) ) ; }

0<CODESPLIT>https://github.com/atelierspierrot/internationalization/blob/334ebf75020d9e66b4b38a1eeab7b411f1ffe198/src/I18n/I18n.php#L194-L200<CODESPLIT>I18n.loadFile<CODESPLIT>Rebuild the language strings databases with I18n \ Generator<CODESPLIT>public function loadFile ( $ file_name , $ dir_name = null ) { try { $ loader = $ this -> getLoader ( ) ; $ file_path = $ loader -> findLanguageDBFile ( ! empty ( $ file_name ) ? basename ( $ file_name ) : $ file_name , ! empty ( $ dir_name ) ? $ dir_name : ( ! empty ( $ file_name ) ? dirname ( $ file_name ) : $ dir_name ) ) ; if ( $ file_path && file_exists ( $ file_path ) ) { $ loader -> setOption ( 'language_strings_db_directory' , dirname ( $ file_path ) ) -> setOption ( 'language_strings_db_filename' , basename ( $ file_path ) ) ; $ this -> _loadLanguageStrings ( true , true , true ) ; } else { throw new I18nInvalidArgumentException ( sprintf ( 'Language file "%s" not found!' , $ file_name ) ) ; } } catch ( I18nException $ e ) { throw $ e ; } }

0<CODESPLIT>https://github.com/acquia/http-hmac-php/blob/f63d6954b7dadf364994e167aba067a536fabf98/src/RequestSigner.php#L65-L77<CODESPLIT>RequestSigner.signRequest<CODESPLIT>{<CODESPLIT>public function signRequest ( RequestInterface $ request , array $ customHeaders = [ ] ) { $ request = $ this -> getTimestampedRequest ( $ request ) ; $ request = $ this -> getContentHashedRequest ( $ request ) ; $ request = $ this -> getAuthorizedRequest ( $ request , $ customHeaders ) ; return $ request ; }

0<CODESPLIT>https://github.com/Gregwar/Image/blob/03534d5760cbea5c96e6292041ff81a3bb205c36/Adapter/GD.php#L609-L616<CODESPLIT>GD.openJpeg<CODESPLIT>Try to open the file using gif .<CODESPLIT>protected function openJpeg ( $ file ) { if ( file_exists ( $ file ) && filesize ( $ file ) ) { $ this -> resource = @ imagecreatefromjpeg ( $ file ) ; } else { $ this -> resource = false ; } }

0<CODESPLIT>https://github.com/aimeos/ai-admin-jqadm/blob/e7f118f38a1cdf156baba26f2ad398307955a528/admin/jqadm/src/Admin/JQAdm/Dashboard/Job/Standard.php#L41-L77<CODESPLIT>Standard.search<CODESPLIT>Deletes a resource<CODESPLIT>public function search ( ) { $ view = $ this -> getView ( ) ; $ context = $ this -> getContext ( ) ; try { $ view -> orderpaymenttypeBody = '' ; foreach ( $ this -> getSubClients ( ) as $ client ) { $ view -> orderpaymenttypeBody .= $ client -> search ( ) ; } } catch ( \ Aimeos \ MShop \ Exception $ e ) { $ error = array ( 'order-counthour' => $ context -> getI18n ( ) -> dt ( 'mshop' , $ e -> getMessage ( ) ) ) ; $ view -> errors = $ view -> get ( 'errors' , [ ] ) + $ error ; $ this -> logException ( $ e ) ; } catch ( \ Exception $ e ) { $ error = array ( 'order-counthour' => $ e -> getMessage ( ) . ', ' . $ e -> getFile ( ) . ':' . $ e -> getLine ( ) ) ; $ view -> errors = $ view -> get ( 'errors' , [ ] ) + $ error ; $ this -> logException ( $ e ) ; } /** admin/jqadm/dashboard/order/counthour/template-item 		 * Relative path to the HTML body template of the order per counthour subpart for the dashboard. 		 * 		 * The template file contains the HTML code and processing instructions 		 * to generate the result shown in the body of the frontend. The 		 * configuration string is the path to the template file relative 		 * to the templates directory (usually in admin/jqadm/templates). 		 * 		 * You can overwrite the template file configuration in extensions and 		 * provide alternative templates. These alternative templates should be 		 * named like the default one but with the string "default" replaced by 		 * an unique name. You may use the name of your project for this. If 		 * you've implemented an alternative client class as well, "default" 		 * should be replaced by the name of the new class. 		 * 		 * @param string Relative path to the template creating the HTML code 		 * @since 2016.04 		 * @category Developer 		 */ $ tplconf = 'admin/jqadm/dashboard/order/counthour/template-item' ; $ default = 'dashboard/item-order-counthour-standard' ; return $ view -> render ( $ view -> config ( $ tplconf , $ default ) ) ; }

0<CODESPLIT>https://github.com/atk4/ui/blob/f31c6674ff80999e29dd95375d4f3588bfdbad00/src/jsVueService.php#L54-L57<CODESPLIT>jsVueService.createAtkVue<CODESPLIT>Create a new Vue instance using an external component . External component should be load via js file and define properly .<CODESPLIT>public function createAtkVue ( $ id , $ component , $ data = [ ] ) { return $ this -> service -> createAtkVue ( $ id , $ component , $ data ) ; }

0<CODESPLIT>https://github.com/luyadev/luya-module-admin/blob/58ddcefc96df70af010076216e43a78dd2bc61db/src/models/StorageFilterChain.php#L77-L82<CODESPLIT>QueryTrait.findOne<CODESPLIT>Encode the the effect_json_values array to a json structure .<CODESPLIT>public function findOne ( $ id ) { return ( $ itemArray = $ this -> getItemDataProvider ( $ id ) ) ? $ this -> createItem ( $ itemArray ) : false ; }

0<CODESPLIT>https://github.com/bunq/sdk_php/blob/9562bbe66be22337f14486d7585ca674d36aa868/src/Model/Generated/Endpoint/CashRegister.php#L214-L244<CODESPLIT>SchedulePayment.update<CODESPLIT>Create a new CashRegister . Only an UserCompany can create a CashRegisters . They need to be created with status PENDING_APPROVAL an bunq admin has to approve your CashRegister before you can use it . In the sandbox testing environment an CashRegister will be automatically approved immediately after creation .<CODESPLIT>public static function update ( int $ schedulePaymentId , int $ monetaryAccountId = null , SchedulePaymentEntry $ payment = null , Schedule $ schedule = null , array $ customHeaders = [ ] ) : BunqResponseInt { $ apiClient = new ApiClient ( static :: getApiContext ( ) ) ; $ responseRaw = $ apiClient -> put ( vsprintf ( self :: ENDPOINT_URL_UPDATE , [ static :: determineUserId ( ) , static :: determineMonetaryAccountId ( $ monetaryAccountId ) , $ schedulePaymentId ] ) , [ self :: FIELD_PAYMENT => $ payment , self :: FIELD_SCHEDULE => $ schedule , ] , $ customHeaders ) ; return BunqResponseInt :: castFromBunqResponse ( static :: processForId ( $ responseRaw ) ) ; }

0<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/lib/navigationlib.php#L3659-L3692<CODESPLIT>flat_navigation_node.get_collectionlabel<CODESPLIT>Add a new breadcrumb_navigation_node to the navbar overrides parent :: add<CODESPLIT>public function get_collectionlabel ( ) { if ( ! empty ( $ this -> collectionlabel ) ) { return $ this -> collectionlabel ; } if ( $ this -> parent && ( $ this -> parent instanceof flat_navigation_node || $ this -> parent instanceof flat_navigation ) ) { return $ this -> parent -> get_collectionlabel ( ) ; } debugging ( 'Navigation region requires a label' , DEBUG_DEVELOPER ) ; return '' ; }

0<CODESPLIT>https://github.com/railken/search-query/blob/06e1bfb3eb59347afec9ca764d6f8c3b691d6889/src/Languages/BoomTree/Nodes/Node.php#L443-L452<CODESPLIT>Node.valueToString<CODESPLIT>Array representation of node .<CODESPLIT>public function valueToString ( $ recursive = true ) { if ( $ this -> countChildren ( ) === 0 ) { return $ this -> getValue ( ) ; } return implode ( ' ' , array_map ( function ( $ node ) use ( $ recursive ) { return $ recursive ? $ node -> valueToString ( ) : $ node -> getValue ( ) ; } , $ this -> getChildren ( ) ) ) ; }

1<CODESPLIT>https://github.com/marando/phpSOFA/blob/757fa49fe335ae1210eaa7735473fd4388b13f07/src/Marando/IAU/iauAticqn.php#L113-L198<CODESPLIT>iauAticqn.Aticqn<CODESPLIT>- - - - - - - - - i a u A t i c q n - - - - - - - - -<CODESPLIT>public static function Aticqn ( $ ri , $ di , iauASTROM $ astrom , $ n , array $ b , & $ rc , & $ dc ) { foreach ( $ b as $ i ) if ( $ i instanceof iauLDBODY == false ) throw new \ InvalidArgumentException ( "All \$b elements must be iauLDBODY type" ) ; $ j ; $ i ; $ pi = [ ] ; $ ppr = [ ] ; $ pnat = [ ] ; $ pco = [ ] ; $ w ; $ d = [ ] ; $ before = [ ] ; $ r2 ; $ r ; $ after = [ ] ; /* CIRS RA,Dec to Cartesian. */ IAU :: S2c ( $ ri , $ di , $ pi ) ; /* Bias-precession-nutation, giving GCRS proper direction. */ IAU :: Trxp ( $ astrom -> bpn , $ pi , $ ppr ) ; /* Aberration, giving GCRS natural direction. */ IAU :: Zp ( $ d ) ; for ( $ j = 0 ; $ j < 2 ; $ j ++ ) { $ r2 = 0.0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ w = $ ppr [ $ i ] - $ d [ $ i ] ; $ before [ $ i ] = $ w ; $ r2 += $ w * $ w ; } $ r = sqrt ( $ r2 ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ before [ $ i ] /= $ r ; } IAU :: Ab ( $ before , $ astrom -> v , $ astrom -> em , $ astrom -> bm1 , $ after ) ; $ r2 = 0.0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ d [ $ i ] = $ after [ $ i ] - $ before [ $ i ] ; $ w = $ ppr [ $ i ] - $ d [ $ i ] ; $ pnat [ $ i ] = $ w ; $ r2 += $ w * $ w ; } $ r = sqrt ( $ r2 ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ pnat [ $ i ] /= $ r ; } } /* Light deflection, giving BCRS coordinate direction. */ IAU :: Zp ( $ d ) ; for ( $ j = 0 ; $ j < 5 ; $ j ++ ) { $ r2 = 0.0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ w = $ pnat [ $ i ] - $ d [ $ i ] ; $ before [ $ i ] = $ w ; $ r2 += $ w * $ w ; } $ r = sqrt ( $ r2 ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ before [ $ i ] /= $ r ; } IAU :: Ldn ( $ n , $ b , $ astrom -> eb , $ before , $ after ) ; $ r2 = 0.0 ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ d [ $ i ] = $ after [ $ i ] - $ before [ $ i ] ; $ w = $ pnat [ $ i ] - $ d [ $ i ] ; $ pco [ $ i ] = $ w ; $ r2 += $ w * $ w ; } $ r = sqrt ( $ r2 ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { $ pco [ $ i ] /= $ r ; } } /* ICRS astrometric RA,Dec. */ IAU :: C2s ( $ pco , $ w , $ dc ) ; $ rc = IAU :: Anp ( $ w ) ; /* Finished. */ }

0<CODESPLIT>https://github.com/tp5er/tp5-databackup/blob/2a5832c4e75bf17164c277023c63d6cafab46812/src/Backup.php#L395-L403<CODESPLIT>Backup.open<CODESPLIT>写入SQL语句<CODESPLIT>private function open ( $ size ) { if ( $ this -> fp ) { $ this -> size += $ size ; if ( $ this -> size > $ this -> config [ 'part' ] ) { $ this -> config [ 'compress' ] ? @ gzclose ( $ this -> fp ) : @ fclose ( $ this -> fp ) ; $ this -> fp = null ; $ this -> file [ 'part' ] ++ ; session ( 'backup_file' , $ this -> file ) ; $ this -> Backup_Init ( ) ; } } else { $ backuppath = $ this -> config [ 'path' ] ; $ filename = "{$backuppath}{$this->file['name']}-{$this->file['part']}.sql" ; if ( $ this -> config [ 'compress' ] ) { $ filename = "{$filename}.gz" ; $ this -> fp = @ gzopen ( $ filename , "a{$this->config['level']}" ) ; } else { $ this -> fp = @ fopen ( $ filename , 'a' ) ; } $ this -> size = filesize ( $ filename ) + $ size ; } }

0<CODESPLIT>https://github.com/mcustiel/php-simple-request/blob/4d0fc06092ccdff3ea488c67b394225c7243428f/src/Validator/Properties.php#L134-L143<CODESPLIT>Properties.validateAgainstAdditionalPropertiesValidator<CODESPLIT>@param array $rest<CODESPLIT>private function validateAgainstAdditionalPropertiesValidator ( array $ rest ) { foreach ( $ rest as $ propertyValue ) { if ( ! $ this -> additionalProperties -> validate ( $ propertyValue ) ) { return false ; } } return true ; }

1<CODESPLIT>https://github.com/ufocoder/yii2-SyncSocial/blob/2dbaaec2dad782c52fdd5b648a31ba7fe2a75e1b/src/components/Synchronizer.php#L268-L275<CODESPLIT>Synchronizer.isExistsSyncModelByData<CODESPLIT>@param SyncService $service @param array $data<CODESPLIT>protected function isExistsSyncModelByData ( SyncService $ service , array $ data ) { return SyncModel :: find ( ) -> where ( [ 'service_name' => $ service -> getName ( ) , 'service_id_author' => $ data [ 'service_id_author' ] , 'service_id_post' => $ data [ 'service_id_post' ] ] ) -> exists ( ) ; }

0<CODESPLIT>https://github.com/webbuilders-group/silverstripe-kapost-bridge/blob/718f498cad0eec764d19c9081404b2a0c8f44d71/code/model/KapostPage.php#L50-L59<CODESPLIT>CssHelper.removeAdditionalUriData<CODESPLIT>Gets fields used in the cms<CODESPLIT>protected function removeAdditionalUriData ( $ uri ) { if ( strpos ( $ uri , '?' ) !== false ) { return substr ( $ uri , 0 , strpos ( $ uri , '?' ) ) ; } else if ( strpos ( $ uri , '#' ) !== false ) { return substr ( $ uri , 0 , strpos ( $ uri , '#' ) ) ; } return $ uri ; }

0<CODESPLIT>https://github.com/budde377/Part/blob/9ab5ce43dd809f9c563040ae0f7dcb7f56a52c5d/lib/model/page/PageOrderImpl.php#L163-L179<CODESPLIT>PageOrderImpl.deactivatePage<CODESPLIT>Will list all pages in an array as instances of Page<CODESPLIT>public function deactivatePage ( Page $ page ) { if ( ! $ this -> isActive ( $ page ) ) { return ; } $ this -> deactivatePageId ( $ page -> getID ( ) ) ; }

1<CODESPLIT>https://github.com/icicleio/icicle/blob/991c2d2799e81b1aa054ba237e55d6155c403b9f/src/Coroutine/Coroutine.php#L105-L139<CODESPLIT>Coroutine.next<CODESPLIT>Examines the value yielded from the generator and prepares the next step in interation .<CODESPLIT>private function next ( $ yielded ) { if ( ! $ this -> generator -> valid ( ) ) { $ result = $ this -> generator -> getReturn ( ) ; if ( $ result instanceof Awaitable ) { $ this -> reject ( new AwaitableReturnedError ( $ result ) ) ; return ; } if ( $ result instanceof Generator ) { $ this -> reject ( new GeneratorReturnedError ( $ result ) ) ; return ; } $ this -> resolve ( $ result ) ; return ; } $ this -> busy = true ; if ( $ yielded instanceof Generator ) { $ yielded = new self ( $ yielded ) ; } $ this -> current = $ yielded ; if ( $ yielded instanceof Awaitable ) { $ yielded -> done ( $ this -> send , $ this -> capture ) ; } else { Loop \ queue ( $ this -> send , $ yielded ) ; } $ this -> busy = false ; }

1<CODESPLIT>https://github.com/afragen/github-updater/blob/607b63723af82966f299b109ec933fabf790e4ab/src/GitHub_Updater/Settings.php#L407-L486<CODESPLIT>Settings.unset_stale_options<CODESPLIT>Check current saved options and unset if repos not present .<CODESPLIT>public function unset_stale_options ( $ ghu_options_keys , $ ghu_tokens ) { $ running_servers = $ this -> get_running_git_servers ( ) ; $ ghu_unset_keys = array_diff_key ( static :: $ options , $ ghu_options_keys ) ; $ always_unset = [ 'db_version' , 'branch_switch' , 'github_access_token' , 'github_enterprise_token' , ] ; if ( in_array ( 'bitbucket' , $ running_servers , true ) ) { $ always_unset = array_merge ( $ always_unset , [ 'bitbucket_username' , 'bitbucket_password' , ] ) ; } if ( in_array ( 'bbserver' , $ running_servers , true ) ) { $ always_unset = array_merge ( $ always_unset , [ 'bitbucket_server_username' , 'bitbucket_server_password' , ] ) ; } array_map ( function ( $ e ) use ( & $ ghu_unset_keys ) { unset ( $ ghu_unset_keys [ $ e ] ) ; } , $ always_unset ) ; $ auth_required = static :: $ auth_required ; $ auth_required_unset = [ 'github_enterprise' => 'github_enterprise_token' , 'gitlab' => 'gitlab_access_token' , 'gitlab_enterprise' => 'gitlab_enterprise_token' , 'gitea' => 'gitea_access_token' , ] ; array_map ( function ( $ e ) use ( & $ ghu_unset_keys , $ auth_required , $ auth_required_unset ) { $ key = array_search ( $ e , $ auth_required_unset , true ) ; if ( $ auth_required [ $ key ] ) { unset ( $ ghu_unset_keys [ $ e ] ) ; } } , $ auth_required_unset ) ; // Unset if current_branch AND if associated with repo. array_map ( function ( $ e ) use ( & $ ghu_unset_keys , $ ghu_tokens , & $ reset_keys ) { $ key = array_search ( $ e , $ ghu_unset_keys , true ) ; $ repo = str_replace ( 'current_branch_' , '' , $ key ) ; if ( array_key_exists ( $ key , $ ghu_unset_keys ) && false !== strpos ( $ key , 'current_branch' ) ) { unset ( $ ghu_unset_keys [ $ key ] ) ; } if ( ! array_key_exists ( $ repo , $ ghu_tokens ) ) { $ reset_keys [ $ key ] = $ e ; } } , $ ghu_unset_keys ) ; $ ghu_unset_keys = array_merge ( $ ghu_unset_keys , ( array ) $ reset_keys ) ; if ( ! empty ( $ ghu_unset_keys ) ) { foreach ( $ ghu_unset_keys as $ key => $ value ) { unset ( static :: $ options [ $ key ] ) ; } update_site_option ( 'github_updater' , static :: $ options ) ; } }

0<CODESPLIT>https://github.com/jakew/path/blob/9cc35dad3e74f11b127954a682363f2fa92201fd/src/RegexPath.php#L93-L117<CODESPLIT>RegexPath.getContentForKey<CODESPLIT>Given a key and a piece of content check to see if that content has any child content located based off of that provided key . This will also check for regex strings as well .<CODESPLIT>protected function getContentForKey ( $ key , $ content ) { $ newContent = [ ] ; foreach ( $ content as $ item ) { foreach ( $ this -> getMatchingKeys ( $ key , $ item ) as $ matchedKey ) { $ newContent [ ] = parent :: getContentForKey ( $ matchedKey , $ item ) ; } } return $ newContent ; }

0<CODESPLIT>https://github.com/QuickenLoans/mcp-panthor/blob/b73e22d83d21b8ed4296bee6aebc66c8b07f292c/src/ErrorHandling/ErrorHandler.php#L374-L399<CODESPLIT>ErrorHandler.registerShutdown<CODESPLIT>@param int $errno @param string $errstr @param string $errfile @param string $errline<CODESPLIT>public function registerShutdown ( ) { if ( self :: $ reservedMemory === null ) { self :: $ reservedMemory = str_repeat ( 'x' , 10240 ) ; register_shutdown_function ( __CLASS__ . '::handleFatalError' ) ; } self :: $ exceptionHandler = [ $ this , 'handleException' ] ; return $ this ; }

1<CODESPLIT>https://github.com/transfer-framework/transfer/blob/9225ae068d5924982f14ad4446b15f75384a058a/src/Transfer/Adapter/LocalDirectoryAdapter.php#L63-L73<CODESPLIT>LocalDirectoryAdapter.receive<CODESPLIT>{<CODESPLIT>public function receive ( Request $ request ) { $ this -> directory = $ this -> options [ 'directory' ] ; $ this -> fileNames = array_values ( array_diff ( scandir ( $ this -> directory ) , array ( '..' , '.' ) ) ) ; $ response = new Response ( new CallbackIterator ( array ( $ this , 'validCallback' ) , array ( $ this , 'currentCallback' ) ) ) ; return $ response ; }

1<CODESPLIT>https://github.com/ItinerisLtd/preflight-command/blob/d1c1360ea8d7de0312b5c0c09c9c486949594049/src/ConfigPaths.php#L79-L89<CODESPLIT>ConfigPaths.mergePreflightDir<CODESPLIT>Register preflight . toml under PREFLIGHT_DIR .<CODESPLIT>public static function mergePreflightDir ( array $ paths ) : array { if ( defined ( 'PREFLIGHT_DIR' ) ) { $ dir = constant ( 'PREFLIGHT_DIR' ) ; $ path = trailingslashit ( $ dir ) . 'preflight.toml' ; $ paths [ ] = normalize_path ( $ path ) ; } return $ paths ; }

0<CODESPLIT>https://github.com/mcaskill/Slim-Polyglot/blob/4c2355f3835dcbf17b57cfc7d7cb8b61b5e26f45/src/Polyglot.php#L431-L437<CODESPLIT>Polyglot.prependLanguage<CODESPLIT>Replace the language in the URI<CODESPLIT>public function prependLanguage ( $ path , $ language = null ) { $ prepend = ( isset ( $ language ) ? $ language : $ this -> getLanguage ( ) ) ; if ( strlen ( $ prepend ) > 1 ) { return $ prepend . ( strpos ( $ path , '/' ) === 0 ? $ path : '/' . $ path ) ; } return $ path ; }

0<CODESPLIT>https://github.com/symfony/symfony/blob/b82b09eefb084e487997f4af753400d721edd0a8/src/Symfony/Bundle/FrameworkBundle/Routing/AnnotatedRouteControllerLoader.php#L30-L37<CODESPLIT>FilecontentFilterIterator.accept<CODESPLIT>Configures the _controller default parameter of a given Route instance .<CODESPLIT>public function accept ( ) { if ( ! $ this -> matchRegexps && ! $ this -> noMatchRegexps ) { return true ; } $ fileinfo = $ this -> current ( ) ; if ( $ fileinfo -> isDir ( ) || ! $ fileinfo -> isReadable ( ) ) { return false ; } $ content = $ fileinfo -> getContents ( ) ; if ( ! $ content ) { return false ; } return $ this -> isAccepted ( $ content ) ; }

1<CODESPLIT>https://github.com/googleapis/google-api-php-client-services/blob/682f5ea10b63a4a008933afae5185c5239b653cb/src/Google/Service/AdExchangeBuyerII/Resource/BiddersFilterSetsFilteredBidsDetails.php#L60-L65<CODESPLIT>Google_Service_AdExchangeBuyerII_Resource_BiddersFilterSetsFilteredBidsDetails.listBiddersFilterSetsFilteredBidsDetails<CODESPLIT>List all details associated with a specific reason for which bids were filtered with the number of bids filtered for each detail . ( details . listBiddersFilterSetsFilteredBidsDetails )<CODESPLIT>public function listBiddersFilterSetsFilteredBidsDetails ( $ filterSetName , $ creativeStatusId , $ optParams = array ( ) ) { $ params = array ( 'filterSetName' => $ filterSetName , 'creativeStatusId' => $ creativeStatusId ) ; $ params = array_merge ( $ params , $ optParams ) ; return $ this -> call ( 'list' , array ( $ params ) , "Google_Service_AdExchangeBuyerII_ListCreativeStatusBreakdownByDetailResponse" ) ; }

1<CODESPLIT>https://github.com/webriq/core/blob/cfeb6e8a4732561c2215ec94e736c07f9b8bc990/module/Customize/src/Grid/Customize/Model/Rule/Mapper.php#L131-L152<CODESPLIT>Mapper.getPaginator<CODESPLIT>Get paginator<CODESPLIT>public function getPaginator ( $ where = null , $ order = null , $ columns = null , $ joins = null , $ quantifier = null ) { $ joins = array_merge ( ( array ) $ joins , array ( 'rootParagraph' => array ( 'table' => array ( 'rootParagraph' => $ this -> getTableInSchema ( 'paragraph' ) ) , 'where' => 'customize_rule.rootParagraphId = rootParagraph.id' , 'type' => Sql \ Select :: JOIN_LEFT , 'columns' => array ( 'rootType' => 'type' , 'rootName' => 'name' , ) , ) , ) ) ; return parent :: getPaginator ( $ where , $ order , $ columns , $ joins , $ quantifier ) ; }

1<CODESPLIT>https://github.com/mossphp/moss-framework/blob/b84424195cb0f71e7bd56ec9485b12f38bdfb703/Moss/Http/Request/Request.php#L479-L494<CODESPLIT>Request.clientIp<CODESPLIT>Returns client IP address<CODESPLIT>public function clientIp ( ) { $ keys = [ 'REMOTE_ADDR' , 'HTTP_CLIENT_IP' , 'HTTP_X_FORWARDED_FOR' , ] ; foreach ( $ keys as $ offset ) { if ( $ this -> server -> has ( $ offset ) ) { return $ this -> server -> get ( $ offset ) ; } } return null ; }

1<CODESPLIT>https://github.com/bruli/php-git-hooks/blob/3d6deeb512a9e087a1ef9b1874d7bd0e5095f247/src/PhpGitHooks/Module/Git/Contract/Command/PrePushToolHandler.php#L118-L127<CODESPLIT>PrePushToolHandler.executeOriginalHook<CODESPLIT>@param string $remote @param string $url @param string $errorMessage<CODESPLIT>private function executeOriginalHook ( $ remote , $ url , $ errorMessage ) { $ response = $ this -> prePushOriginalExecutor -> execute ( $ remote , $ url ) ; if ( null != $ response ) { $ this -> output -> writeln ( BadJobLogoResponse :: paint ( $ errorMessage ) ) ; throw new InvalidPushException ( ) ; } }

0<CODESPLIT>https://github.com/hubzero/framework/blob/391de11e82f44c5fc9b2fbf0c8f6bde4cb0e8609/src/Template/Loader.php#L186-L202<CODESPLIT>Loader.load<CODESPLIT>Get the system template<CODESPLIT>public function load ( $ client_id = null ) { if ( ! is_null ( $ client_id ) ) { $ client = ClientManager :: client ( $ client_id , ( ! is_numeric ( $ client_id ) ) ) ; } else { $ client = $ this -> app [ 'client' ] ; } if ( ! $ client ) { throw new \ InvalidArgumentException ( sprintf ( 'Invalid client type of "%s".' , $ client_id ) ) ; } return $ this -> getTemplate ( ( int ) $ client -> id , $ this -> style ) ; }

0<CODESPLIT>https://github.com/GrupaZero/api/blob/fc544bb6057274e9d5e7b617346c3f854ea5effd/src/Gzero/Api/Transformer/OptionCategoryTransformer.php#L26-L37<CODESPLIT>CountryService.getAllCountries<CODESPLIT>Transforms option category entity<CODESPLIT>public function getAllCountries ( string $ translatedTo = '' , bool $ filterOfficiallyAssigned = true ) : array { if ( '' === $ translatedTo ) { $ translatedTo = $ this -> defaultLang ; } $ fileName = $ this -> path . '/' . $ translatedTo . '/countries.php' ; if ( ! file_exists ( $ fileName ) ) { throw new \ InvalidArgumentException ( "Language $translatedTo not found." ) ; } $ countries = include $ fileName ; if ( $ filterOfficiallyAssigned ) { $ filterKeys = [ 'AF' , 'AX' , 'AL' , 'DZ' , 'AS' , 'AD' , 'AO' , 'AI' , 'AQ' , 'AG' , 'AR' , 'AM' , 'AW' , 'AU' , 'AT' , 'AZ' , 'BS' , 'BH' , 'BD' , 'BB' , 'BY' , 'BE' , 'BZ' , 'BJ' , 'BM' , 'BT' , 'BO' , 'BQ' , 'BA' , 'BW' , 'BV' , 'BR' , 'IO' , 'VG' , 'BN' , 'BG' , 'BF' , 'BI' , 'KH' , 'CM' , 'CA' , 'CV' , 'KY' , 'CF' , 'TD' , 'CL' , 'CN' , 'CX' , 'CC' , 'CO' , 'KM' , 'CK' , 'CR' , 'HR' , 'CU' , 'CW' , 'CY' , 'CZ' , 'CD' , 'DK' , 'DJ' , 'DM' , 'DO' , 'TL' , 'EC' , 'EG' , 'SV' , 'GQ' , 'ER' , 'EE' , 'ET' , 'FK' , 'FO' , 'FJ' , 'FI' , 'FR' , 'GF' , 'PF' , 'TF' , 'GA' , 'GM' , 'GE' , 'DE' , 'GH' , 'GI' , 'GR' , 'GL' , 'GD' , 'GP' , 'GU' , 'GT' , 'GG' , 'GN' , 'GW' , 'GY' , 'HT' , 'HM' , 'HN' , 'HK' , 'HU' , 'IS' , 'IN' , 'ID' , 'IR' , 'IQ' , 'IE' , 'IM' , 'IL' , 'IT' , 'CI' , 'JM' , 'JP' , 'JE' , 'JO' , 'KZ' , 'KE' , 'KI' , 'XK' , 'KW' , 'KG' , 'LA' , 'LV' , 'LB' , 'LS' , 'LR' , 'LY' , 'LI' , 'LT' , 'LU' , 'MO' , 'MK' , 'MG' , 'MW' , 'MY' , 'MV' , 'ML' , 'MT' , 'MH' , 'MQ' , 'MR' , 'MU' , 'YT' , 'MX' , 'FM' , 'MD' , 'MC' , 'MN' , 'ME' , 'MS' , 'MA' , 'MZ' , 'MM' , 'NA' , 'NR' , 'NP' , 'NL' , 'NC' , 'NZ' , 'NI' , 'NE' , 'NG' , 'NU' , 'NF' , 'KP' , 'MP' , 'NO' , 'OM' , 'PK' , 'PW' , 'PS' , 'PA' , 'PG' , 'PY' , 'PE' , 'PH' , 'PN' , 'PL' , 'PT' , 'PR' , 'QA' , 'CG' , 'RE' , 'RO' , 'RU' , 'RW' , 'BL' , 'SH' , 'KN' , 'LC' , 'MF' , 'PM' , 'VC' , 'WS' , 'SM' , 'ST' , 'SA' , 'SN' , 'RS' , 'SC' , 'SL' , 'SG' , 'SX' , 'SK' , 'SI' , 'SB' , 'SO' , 'ZA' , 'GS' , 'KR' , 'SS' , 'ES' , 'LK' , 'SD' , 'SR' , 'SJ' , 'SZ' , 'SE' , 'CH' , 'SY' , 'TW' , 'TJ' , 'TZ' , 'TH' , 'TG' , 'TK' , 'TO' , 'TT' , 'TN' , 'TR' , 'TM' , 'TC' , 'TV' , 'VI' , 'UG' , 'UA' , 'AE' , 'GB' , 'US' , 'UM' , 'UY' , 'UZ' , 'VU' , 'VA' , 'VE' , 'VN' , 'WF' , 'EH' , 'YE' , 'ZM' , 'ZW' ] ; // @ignoreCodingStandards $ countries = array_intersect_key ( $ countries , array_flip ( $ filterKeys ) ) ; } return $ countries ; }

1<CODESPLIT>https://github.com/sabre-io/dav/blob/44b0f2d07fd9e6e44b65f7edf2238d3bf0b428e0/lib/DAV/CorePlugin.php#L781-L828<CODESPLIT>CorePlugin.propFind<CODESPLIT>This method is called when properties are retrieved .<CODESPLIT>public function propFind ( PropFind $ propFind , INode $ node ) { $ propFind -> handle ( '{DAV:}getlastmodified' , function ( ) use ( $ node ) { $ lm = $ node -> getLastModified ( ) ; if ( $ lm ) { return new Xml \ Property \ GetLastModified ( $ lm ) ; } } ) ; if ( $ node instanceof IFile ) { $ propFind -> handle ( '{DAV:}getcontentlength' , [ $ node , 'getSize' ] ) ; $ propFind -> handle ( '{DAV:}getetag' , [ $ node , 'getETag' ] ) ; $ propFind -> handle ( '{DAV:}getcontenttype' , [ $ node , 'getContentType' ] ) ; } if ( $ node instanceof IQuota ) { $ quotaInfo = null ; $ propFind -> handle ( '{DAV:}quota-used-bytes' , function ( ) use ( & $ quotaInfo , $ node ) { $ quotaInfo = $ node -> getQuotaInfo ( ) ; return $ quotaInfo [ 0 ] ; } ) ; $ propFind -> handle ( '{DAV:}quota-available-bytes' , function ( ) use ( & $ quotaInfo , $ node ) { if ( ! $ quotaInfo ) { $ quotaInfo = $ node -> getQuotaInfo ( ) ; } return $ quotaInfo [ 1 ] ; } ) ; } $ propFind -> handle ( '{DAV:}supported-report-set' , function ( ) use ( $ propFind ) { $ reports = [ ] ; foreach ( $ this -> server -> getPlugins ( ) as $ plugin ) { $ reports = array_merge ( $ reports , $ plugin -> getSupportedReportSet ( $ propFind -> getPath ( ) ) ) ; } return new Xml \ Property \ SupportedReportSet ( $ reports ) ; } ) ; $ propFind -> handle ( '{DAV:}resourcetype' , function ( ) use ( $ node ) { return new Xml \ Property \ ResourceType ( $ this -> server -> getResourceTypeForNode ( $ node ) ) ; } ) ; $ propFind -> handle ( '{DAV:}supported-method-set' , function ( ) use ( $ propFind ) { return new Xml \ Property \ SupportedMethodSet ( $ this -> server -> getAllowedMethods ( $ propFind -> getPath ( ) ) ) ; } ) ; }

0<CODESPLIT>https://github.com/Rebilly/rebilly-php/blob/12703396740b8e6ef1a58ded217a155a3bcb6dc9/src/Services/GatewayAccountService.php#L70-L77<CODESPLIT>ProductService.create<CODESPLIT>@param array|JsonSerializable|GatewayAccount $data @param string $gatewayAccountId<CODESPLIT>public function create ( $ data , $ productId = null ) { if ( isset ( $ productId ) ) { return $ this -> client ( ) -> put ( $ data , 'products/{productId}' , [ 'productId' => $ productId ] ) ; } return $ this -> client ( ) -> post ( $ data , 'products' ) ; }

1<CODESPLIT>https://github.com/orchestral/lumen/blob/85a004e7cde0517b527241154f5ad031b7215851/src/Concerns/RoutesRequests.php#L285-L305<CODESPLIT>RoutesRequests.callActionOnArrayBasedRoute<CODESPLIT>Call the Closure on the array based route .<CODESPLIT>protected function callActionOnArrayBasedRoute ( $ routeInfo ) { $ action = $ routeInfo [ 1 ] ; if ( isset ( $ action [ 'uses' ] ) ) { return $ this -> prepareResponse ( $ this -> callControllerAction ( $ routeInfo ) ) ; } foreach ( $ action as $ value ) { if ( $ value instanceof Closure ) { $ closure = $ value -> bindTo ( new RoutingClosure ( ) ) ; break ; } } try { return $ this -> prepareResponse ( $ this -> call ( $ closure , $ routeInfo [ 2 ] ) ) ; } catch ( HttpResponseException $ e ) { return $ e -> getResponse ( ) ; } }

0<CODESPLIT>https://github.com/Smile-SA/elasticsuite/blob/0199ac1383c8db3b996ae3a0963e94edadaf0880/src/module-elasticsuite-catalog/Model/Autocomplete/Category/DataProvider.php#L107-L125<CODESPLIT>Data.getCookieConfig<CODESPLIT>{<CODESPLIT>public function getCookieConfig ( ) { $ config = $ this -> scopeConfig -> getValue ( self :: CONFIG_COOKIE ) ; $ config [ 'domain' ] = $ this -> sessionManager -> getCookieDomain ( ) ; $ config [ 'path' ] = $ this -> sessionManager -> getCookiePath ( ) ; return $ config ; }

0<CODESPLIT>https://github.com/rockettheme/toolbox/blob/7cacabf0322804ce0977988f71f7dca171f19a5c/File/src/PhpFile.php#L29-L41<CODESPLIT>Parser.isNextLineUnIndentedCollection<CODESPLIT>Saves PHP file and invalidates opcache .<CODESPLIT>private function isNextLineUnIndentedCollection ( ) { $ currentIndentation = $ this -> getCurrentLineIndentation ( ) ; $ notEOF = $ this -> moveToNextLine ( ) ; while ( $ notEOF && $ this -> isCurrentLineEmpty ( ) ) { $ notEOF = $ this -> moveToNextLine ( ) ; } if ( false === $ notEOF ) { return false ; } $ ret = $ this -> getCurrentLineIndentation ( ) === $ currentIndentation && $ this -> isStringUnIndentedCollectionItem ( ) ; $ this -> moveToPreviousLine ( ) ; return $ ret ; }

0<CODESPLIT>https://github.com/ventoviro/windwalker/blob/9653ea83fbd765f24ea3cba15398a31f875c55fd/src/Http/Helper/StreamHelper.php#L40-L49<CODESPLIT>StreamHelper.copyTo<CODESPLIT>Copy stream to another stream .<CODESPLIT>public static function copyTo ( StreamInterface $ src , $ dest ) { $ destStream = $ dest instanceof StreamInterface ? $ dest : new Stream ( $ dest , Stream :: MODE_READ_WRITE_RESET ) ; static :: copy ( $ src , $ destStream ) ; $ destStream -> close ( ) ; }

0<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/lib/scssphp/Parser.php#L922-L938<CODESPLIT>Parser.literal<CODESPLIT>Match some whitespace<CODESPLIT>protected function literal ( $ what , $ eatWhitespace = null ) { if ( ! isset ( $ eatWhitespace ) ) { $ eatWhitespace = $ this -> eatWhiteDefault ; } $ len = strlen ( $ what ) ; if ( strcasecmp ( substr ( $ this -> buffer , $ this -> count , $ len ) , $ what ) === 0 ) { $ this -> count += $ len ; if ( $ eatWhitespace ) { $ this -> whitespace ( ) ; } return true ; } return false ; }

1<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/lib/adodb/adodb-xmlschema03.inc.php#L507-L512<CODESPLIT>dbTable.addTableOpt<CODESPLIT>Adds an option to the table<CODESPLIT>function addTableOpt ( $ opt ) { if ( isset ( $ this -> currentPlatform ) ) { $ this -> opts [ $ this -> parent -> db -> databaseType ] = $ opt ; } return $ this -> opts ; }

0<CODESPLIT>https://github.com/phalcon/zephir/blob/2a5b0f3c9d936a0a7d8477adda6cb8aa0fe28773/Library/Expression/Builder/Statements/IfStatement.php#L121-L134<CODESPLIT>StaticMethodCache.get<CODESPLIT>{<CODESPLIT>public function get ( CompilationContext $ compilationContext , $ method , $ allowNtsCache = true ) { if ( ! \ is_object ( $ method ) ) { return 'NULL, 0' ; } if ( ! ( $ method instanceof \ ReflectionMethod ) ) { $ completeName = $ method -> getClassDefinition ( ) -> getCompleteName ( ) ; /*              * Avoid generate caches for external classes              */ if ( $ method -> getClassDefinition ( ) -> isExternal ( ) ) { return 'NULL, 0' ; } if ( isset ( $ this -> cache [ $ completeName ] [ $ method -> getName ( ) ] ) ) { return '&' . $ this -> cache [ $ completeName ] [ $ method -> getName ( ) ] -> getName ( ) . ', ' . SlotsCache :: getExistingMethodSlot ( $ method ) ; } if ( $ method -> getClassDefinition ( ) -> isInterface ( ) ) { return 'NULL, 0' ; } } $ mustBeCached = false ; if ( ! $ compilationContext -> insideCycle ) { if ( ! ( $ method instanceof \ ReflectionMethod ) ) { $ classDefinition = $ method -> getClassDefinition ( ) ; if ( ! $ classDefinition -> isBundled ( ) && $ allowNtsCache ) { $ mustBeCached = ! $ compilationContext -> backend -> isZE3 ( ) ; } else { if ( ! $ method -> isPrivate ( ) && ! $ method -> isFinal ( ) ) { return 'NULL, 0' ; } } } else { if ( ! $ method -> isPrivate ( ) && ! $ method -> isFinal ( ) ) { return 'NULL, 0' ; } } } $ functionCache = $ compilationContext -> symbolTable -> getTempVariableForWrite ( 'zephir_fcall_cache_entry' , $ compilationContext ) ; if ( $ method -> isPrivate ( ) || $ method -> isFinal ( ) || $ mustBeCached ) { $ cacheSlot = SlotsCache :: getMethodSlot ( $ method ) ; } else { $ cacheSlot = '0' ; } $ functionCache -> setMustInitNull ( true ) ; $ functionCache -> setReusable ( false ) ; if ( ! ( $ method instanceof \ ReflectionMethod ) ) { $ this -> cache [ $ completeName ] [ $ method -> getName ( ) ] = $ functionCache ; } return '&' . $ functionCache -> getName ( ) . ', ' . $ cacheSlot ; }

0<CODESPLIT>https://github.com/lode/jsonapi/blob/6a96d5e4164338e3bd025058a56b40d53af5b3d1/src/resource.php#L445-L455<CODESPLIT>resource.fill_meta<CODESPLIT>adds some meta data this will end up in response . meta . { $key } or response . data . meta . { $key } .. .. depending on $data_level<CODESPLIT>public function fill_meta ( $ meta_data , $ data_level = false ) { foreach ( $ meta_data as $ key => $ single_meta_data ) { $ this -> add_meta ( $ key , $ single_meta_data , $ data_level ) ; } }

1<CODESPLIT>https://github.com/emartech/magento2-extension/blob/6e3167fcc24894e3caa45cd2567cadd8d0005e17/Model/ResourceModel/Api/Product.php#L329-L353<CODESPLIT>Product.getMainTableFieldItems<CODESPLIT>@param array $mainTableFields @param int $minProductId @param int $maxProductId @param array $storeIds @param array $attributeMapper<CODESPLIT>private function getMainTableFieldItems ( $ mainTableFields , $ minProductId , $ maxProductId , $ storeIds , $ attributeMapper ) { if ( $ mainTableFields ) { if ( ! in_array ( 'entity_id' , $ mainTableFields ) ) { $ mainTableFields [ ] = 'entity_id' ; } $ attributesQuery = $ this -> _resource -> getConnection ( ) -> select ( ) -> from ( $ this -> getTable ( $ this -> mainTable ) , $ mainTableFields ) -> where ( 'entity_id >= ?' , $ minProductId ) -> where ( 'entity_id <= ?' , $ maxProductId ) ; $ this -> iterator -> walk ( ( string ) $ attributesQuery , [ [ $ this , 'handleMainTableAttributeDataTable' ] ] , [ 'storeIds' => $ storeIds , 'fields' => array_diff ( $ mainTableFields , [ 'entity_id' ] ) , 'attributeMapper' => $ attributeMapper , ] , $ this -> _resource -> getConnection ( ) ) ; } return $ this ; }

0<CODESPLIT>https://github.com/jakubkulhan/chrome-devtools-protocol/blob/6c04886b36263f108f5cdf7c255f71ee92c80f0c/gen-src/ChromeDevtoolsProtocol/Model/Animation/ResolveAnimationRequestBuilder.php#L20-L28<CODESPLIT>GetOuterHTMLRequestBuilder.build<CODESPLIT>Validate non - optional parameters and return new instance .<CODESPLIT>public function build ( ) : GetOuterHTMLRequest { $ instance = new GetOuterHTMLRequest ( ) ; $ instance -> nodeId = $ this -> nodeId ; $ instance -> backendNodeId = $ this -> backendNodeId ; $ instance -> objectId = $ this -> objectId ; return $ instance ; }

0<CODESPLIT>https://github.com/Mezzle/queuejitsu/blob/872c9ed680df22413826670f4ec38d662f62d923/src/Worker/Adapter/RedisAdapter.php#L101-L108<CODESPLIT>RedisAdapter.increaseWorkerProcessedCount<CODESPLIT>registerWorker<CODESPLIT>public function increaseWorkerProcessedCount ( AbstractWorker $ worker ) : void { $ this -> client -> incr ( sprintf ( 'stat:processed:%s' , $ worker -> getId ( ) ) ) ; }

1<CODESPLIT>https://github.com/bizley/yii2-podium/blob/1338019bb9950a680a254d77dabeb1db2b8c9e03/src/models/forms/LoginForm.php#L79-L85<CODESPLIT>LoginForm.getUser<CODESPLIT>Returns user .<CODESPLIT>public function getUser ( ) { if ( $ this -> _user === false ) { $ this -> _user = User :: findByKeyfield ( $ this -> username ) ; } return $ this -> _user ; }

0<CODESPLIT>https://github.com/atayahmet/laravel-nestable/blob/c4997757c0234d705ca079939acd50453741cf42/src/NestableTrait.php#L210-L227<CODESPLIT>NestableTrait.to<CODESPLIT>Save the service parameters .<CODESPLIT>protected function to ( ) { if ( static :: $ to === 1 ) { $ method = 'renderAsArray' ; } elseif ( static :: $ to === 2 ) { $ method = 'renderAsJson' ; } elseif ( static :: $ to === 3 ) { $ method = 'renderAsHtml' ; } elseif ( static :: $ to === 4 ) { $ method = 'renderAsDropdown' ; } else { return $ this -> source ; } $ nest = new NestableService ( ) ; $ nest -> save ( static :: $ parameters ) ; $ nestable = $ nest -> make ( $ this -> source ) ; static :: $ nested = false ; return call_user_func ( [ $ nestable , $ method ] ) ; }

1<CODESPLIT>https://github.com/techdivision/import-category-ee/blob/ad614f40e0d2f843310519e10769cdf44e313665/src/Services/EeCategoryBunchProcessor.php#L219-L222<CODESPLIT>EeCategoryBunchProcessor.loadCategoryTextAttributeByRowIdAndAttributeIdAndStoreId<CODESPLIT>Load s and return s the text attribute with the passed row / attribute / store ID .<CODESPLIT>public function loadCategoryTextAttributeByRowIdAndAttributeIdAndStoreId ( $ rowId , $ attributeId , $ storeId ) { return $ this -> getCategoryTextRepository ( ) -> findOneByRowIdAndAttributeIdAndStoreId ( $ rowId , $ attributeId , $ storeId ) ; }

1<CODESPLIT>https://github.com/hightman/httpclient/blob/bced617cf82cc2358468fa76adf3f15aaceb5140/src/Request.php#L126-L158<CODESPLIT>Request.getUrlParams<CODESPLIT>Get url parameters<CODESPLIT>public function getUrlParams ( ) { if ( $ this -> _urlParams === null ) { $ pa = @ parse_url ( $ this -> getUrl ( ) ) ; $ pa [ 'scheme' ] = isset ( $ pa [ 'scheme' ] ) ? strtolower ( $ pa [ 'scheme' ] ) : 'http' ; if ( $ pa [ 'scheme' ] !== 'http' && $ pa [ 'scheme' ] !== 'https' ) { return false ; } if ( ! isset ( $ pa [ 'host' ] ) ) { return false ; } if ( ! isset ( $ pa [ 'path' ] ) ) { $ pa [ 'path' ] = '/' ; } // basic auth if ( isset ( $ pa [ 'user' ] ) && isset ( $ pa [ 'pass' ] ) ) { $ this -> applyBasicAuth ( $ pa [ 'user' ] , $ pa [ 'pass' ] ) ; } // convert host to IP address $ port = isset ( $ pa [ 'port' ] ) ? intval ( $ pa [ 'port' ] ) : ( $ pa [ 'scheme' ] === 'https' ? 443 : 80 ) ; $ pa [ 'ip' ] = $ this -> hasHeader ( 'x-server-ip' ) ? $ this -> getHeader ( 'x-server-ip' ) : self :: getIp ( $ pa [ 'host' ] ) ; $ pa [ 'conn' ] = ( $ pa [ 'scheme' ] === 'https' ? 'ssl' : 'tcp' ) . '://' . $ pa [ 'ip' ] . ':' . $ port ; // host header if ( ! $ this -> hasHeader ( 'host' ) ) { $ this -> setHeader ( 'host' , strtolower ( $ pa [ 'host' ] ) ) ; } else { $ pa [ 'host' ] = $ this -> getHeader ( 'host' ) ; } $ this -> _urlParams = $ pa ; } return $ this -> _urlParams ; }

0<CODESPLIT>https://github.com/wisquimas/valleysofsorcery/blob/78a8d8f1d1102c5043e2cf7c98762e63464d2d7a/admin/mf_custom_taxonomy.php#L121-L242<CODESPLIT>ConfigLib.get_value<CODESPLIT>form<CODESPLIT>public function get_value ( $ option_name , $ default_value = false ) { $ service_name = substr ( $ option_name , 0 , strpos ( $ option_name , '.' ) ) ; $ option_name = str_replace ( $ service_name . '.' , '' , $ option_name ) ; // debug // echo $service_name; // echo $option_name; $ value = false ; if ( array_key_exists ( $ service_name , $ this -> _configs ) ) { if ( array_key_exists ( $ option_name , $ this -> _configs [ $ service_name ] ) ) { $ value = $ this -> _configs [ $ service_name ] [ $ option_name ] ; } else if ( $ default_value ) { $ value = $ default_value ; } } return $ value ; }

0<CODESPLIT>https://github.com/ezsystems/eztags/blob/a8d414ed38ae866d40cf2470a8222cd9afd07f4d/datatypes/eztags/eztagstype.php#L309-L332<CODESPLIT>eZTagsType.metaData<CODESPLIT>Adds the necessary DOM structure to the attribute parameters<CODESPLIT>public function metaData ( $ attribute ) { /** @var $eZTags eZTags */ $ eZTags = $ attribute -> content ( ) ; if ( ! $ eZTags instanceof eZTags ) return '' ; $ indexSynonyms = eZINI :: instance ( 'eztags.ini' ) -> variable ( 'SearchSettings' , 'IndexSynonyms' ) === 'enabled' ; $ keywords = array ( ) ; $ tags = $ eZTags -> attribute ( 'tags' ) ; /** @var eZTagsObject $tag */ foreach ( $ tags as $ tag ) { if ( ! $ indexSynonyms && $ tag -> isSynonym ( ) ) $ tag = $ tag -> getMainTag ( ) ; if ( $ tag instanceof eZTagsObject ) { $ keyword = $ tag -> getKeyword ( $ attribute -> attribute ( 'language_code' ) ) ; if ( ! $ keyword ) { //fall back to main language /** @var eZContentLanguage $mainLanguage */ $ mainLanguage = eZContentLanguage :: fetch ( $ tag -> attribute ( 'main_language_id' ) ) ; if ( $ mainLanguage instanceof eZContentLanguage ) $ keyword = $ tag -> getKeyword ( $ mainLanguage -> attribute ( 'locale' ) ) ; } if ( $ keyword ) $ keywords [ ] = $ keyword ; } } return implode ( ', ' , array_unique ( $ keywords ) ) ; }

1<CODESPLIT>https://github.com/dreamfactorysoftware/df-cassandra/blob/89009b47180789221c2b60ce864186c5f409577a/src/Database/Schema/Schema.php#L70-L88<CODESPLIT>Schema.getTableNames<CODESPLIT>Returns all table names in the database .<CODESPLIT>protected function getTableNames ( $ schema = '' ) { $ client = $ this -> connection -> getClient ( ) ; $ tables = $ client -> listTables ( ) ; $ schemaName = $ client -> getKeyspace ( ) -> name ( ) ; $ names = [ ] ; foreach ( $ tables as $ table ) { $ name = array_get ( $ table , 'table_name' ) ; $ resourceName = $ name ; $ internalName = $ schemaName . '.' . $ resourceName ; $ name = $ resourceName ; $ quotedName = $ this -> quoteTableName ( $ schemaName ) . '.' . $ this -> quoteTableName ( $ resourceName ) ; ; $ settings = compact ( 'schemaName' , 'resourceName' , 'name' , 'internalName' , 'quotedName' ) ; $ names [ strtolower ( $ name ) ] = new TableSchema ( $ settings ) ; } return $ names ; }

0<CODESPLIT>https://github.com/gobline/auth/blob/3d9fdabd45ab943132eb32acd7139c8413da8ba7/src/Authenticator/Db/TableMetadata.php#L191-L201<CODESPLIT>Device.addMessagesPackageReceived<CODESPLIT>@param string $passwordEncryption<CODESPLIT>public function addMessagesPackageReceived ( \ Sopinet \ ChatBundle \ Entity \ MessagePackage $ messagesPackageReceived ) { $ this -> messagesPackageReceived [ ] = $ messagesPackageReceived ; return $ this ; }

1<CODESPLIT>https://github.com/Erebot/Plop/blob/419a1cd6d8a6ed24ebcc65d8c7ebcec5f5baaa8b/src/Plop.php#L493-L536<CODESPLIT>Plop.offsetGet<CODESPLIT>Return the registered logger with the given identifier one of its parents or the root logger if no other logger can be found .<CODESPLIT>public function offsetGet ( $ offset ) { if ( ! is_string ( $ offset ) ) { throw new \ Plop \ Exception ( 'Invalid identifier' ) ; } $ parts = explode ( ':' , $ offset , 3 ) ; if ( count ( $ parts ) != 3 ) { throw new \ Plop \ Exception ( 'Invalid identifier' ) ; } list ( $ method , $ class , $ ns ) = $ parts ; $ len = - strlen ( '\\' ) ; while ( substr ( $ ns , $ len ) == '\\' ) { $ ns = ( string ) substr ( $ ns , 0 , $ len ) ; } // Namespace, class and method/function match. if ( isset ( $ this -> loggers [ "$method:$class:$ns" ] ) ) { return $ this -> loggers [ "$method:$class:$ns" ] ; } // Namespace and class match. if ( $ class != "" && isset ( $ this -> loggers [ ":$class:$ns" ] ) ) { return $ this -> loggers [ ":$class:$ns" ] ; } // Namespace match. $ parts = explode ( '\\' , $ ns ) ; while ( count ( $ parts ) ) { $ offset = implode ( '\\' , $ parts ) ; if ( $ offset == '' ) { break ; } if ( isset ( $ this -> loggers [ "::$offset" ] ) ) { return $ this -> loggers [ "::$offset" ] ; } array_pop ( $ parts ) ; } // Root logger. return $ this -> loggers [ '::' ] ; }

1<CODESPLIT>https://github.com/zicht/framework-extra-bundle/blob/8482ca491aabdec565b15bf6c10c588a98c458a5/src/Zicht/Bundle/FrameworkExtraBundle/Command/AbstractCronCommand.php#L86-L90<CODESPLIT>AbstractCronCommand.exceptionHandler<CODESPLIT>Exception handler ; will log the exception and exit the script .<CODESPLIT>public function exceptionHandler ( Exception $ exception ) { $ this -> logger -> addError ( $ exception -> getMessage ( ) , array ( $ exception -> getFile ( ) , $ exception -> getLine ( ) ) ) ; exit ( - 1 ) ; }

1<CODESPLIT>https://github.com/neos/flow-development-collection/blob/a4484ef2a57e050dc9bd87c8481eeb250c7a36fa/Neos.Flow/Classes/Security/Context.php#L372-L386<CODESPLIT>Context.getAuthenticationTokensOfType<CODESPLIT>Returns all Authentication \ Tokens of the security context which are active for the current request and of the given type . If a token has a request pattern that cannot match against the current request it is determined as not active .<CODESPLIT>public function getAuthenticationTokensOfType ( $ className ) { if ( $ this -> initialized === false ) { $ this -> initialize ( ) ; } $ activeTokens = [ ] ; foreach ( $ this -> activeTokens as $ token ) { if ( $ token instanceof $ className ) { $ activeTokens [ ] = $ token ; } } return $ activeTokens ; }

1<CODESPLIT>https://github.com/evias/nem-php/blob/88cf1674077ed1146b85521db25c09e60c3634bb/src/Core/Buffer.php#L537-L549<CODESPLIT>Buffer.toUInt8<CODESPLIT>Transfer binary data into a unsigned char array . Unsigned Char is the same as UInt8 in Javascript or other languages it represents unsigned integers on 8 bits ( 1 byte ) .<CODESPLIT>public function toUInt8 ( ) { $ binary = $ this -> getBinary ( ) ; $ split = str_split ( $ binary , 1 ) ; // argument *by-reference* array_walk ( $ split , function ( & $ item , $ ix ) { $ buf = new Buffer ( $ item , 1 ) ; $ item = ( int ) $ buf -> getInt ( ) ; } ) ; return $ split ; }

1<CODESPLIT>https://github.com/Stolz/laravel-schema-spy/blob/19b94c8ca38a7e6d1f719f299dabd1dc84bd85f0/src/Command.php#L75-L98<CODESPLIT>Command.handle<CODESPLIT>Execute the console command .<CODESPLIT>public function handle ( ) { // Set schemaSpy parameters $ this -> setParameters ( ) ; // Build command $ command = Config :: get ( 'spy.command' , 'java -jar schemaSpy.jar' ) ; foreach ( $ this -> parameters as $ key => $ value ) $ command .= " $key $value" ; // Run command exec ( $ command , $ output , $ returnValue ) ; if ( $ returnValue === 0 ) $ this -> info ( 'Files successfully written to ' . $ this -> parameters [ '-o' ] ) ; else { $ this -> error ( 'Something went wrong' ) ; $ this -> error ( implode ( PHP_EOL , $ output ) ) ; } return $ returnValue ; }

1<CODESPLIT>https://github.com/Softlabs/google-api-php-client/blob/5d509c0bc921a5431dca2c0fae5f222c29f5c2a9/src/contrib/Google_AdExchangeSellerService.php#L366-L375<CODESPLIT>google_PreferreddealsServiceResource.get<CODESPLIT>Get information about the selected Ad Exchange Preferred Deal . ( preferreddeals . get )<CODESPLIT>public function get ( $ dealId , $ optParams = array ( ) ) { $ params = array ( 'dealId' => $ dealId ) ; $ params = array_merge ( $ params , $ optParams ) ; $ data = $ this -> __call ( 'get' , array ( $ params ) ) ; if ( $ this -> useObjects ( ) ) { return new google_PreferredDeal ( $ data ) ; } else { return $ data ; } }

0<CODESPLIT>https://github.com/honey-comb/core/blob/5c12aba31cae092e9681f0ae3e3664ed3fcec956/src/Models/Traits/HCTranslation.php#L69-L83<CODESPLIT>Asn1MessageQueue.constructMessage<CODESPLIT>Update translations<CODESPLIT>protected function constructMessage ( Message $ message , ? int $ id = null ) { if ( $ this -> pduClass === null ) { throw new \ RuntimeException ( 'You must either define a PDU class or override getPdu().' ) ; } return \ call_user_func ( $ this -> pduClass . '::' . 'fromAsn1' , $ message -> getMessage ( ) ) ; }

0<CODESPLIT>https://github.com/cygnite/framework/blob/58d0cc1c946415eb0867d76218bd35166e999093/src/Cygnite/AssetManager/Asset.php#L455-L467<CODESPLIT>Asset.anchor<CODESPLIT>This method is alias of script () .<CODESPLIT>public function anchor ( ) { $ args = [ ] ; $ args = func_get_args ( ) ; if ( isset ( $ args [ 2 ] ) ) { $ args [ 2 ] = array_merge ( $ args [ 2 ] , [ 'type' => 'static' ] ) ; } else { $ args [ 2 ] = [ 'type' => 'static' ] ; } return call_user_func_array ( [ new static ( $ this -> container ) , 'link' ] , $ args ) ; }

1<CODESPLIT>https://github.com/ircmaxell/RandomLib/blob/e9e0204f40e49fa4419946c677eccd3fa25b8cf4/lib/RandomLib/Factory.php#L196-L210<CODESPLIT>Factory.findSources<CODESPLIT>Find a sources based upon the requested strength<CODESPLIT>protected function findSources ( \ SecurityLib \ Strength $ strength ) { $ sources = array ( ) ; foreach ( $ this -> getSources ( ) as $ source ) { if ( $ strength -> compare ( $ source :: getStrength ( ) ) <= 0 && $ source :: isSupported ( ) ) { $ sources [ ] = new $ source ( ) ; } } if ( 0 === count ( $ sources ) ) { throw new \ RuntimeException ( 'Could not find sources' ) ; } return $ sources ; }

1<CODESPLIT>https://github.com/KnpLabs/php-github-api/blob/275ce096aaadf274905e085f103e9c1ea476de82/lib/Github/HttpClient/Plugin/PathPrepend.php#L28-L37<CODESPLIT>PathPrepend.handleRequest<CODESPLIT>{<CODESPLIT>public function handleRequest ( RequestInterface $ request , callable $ next , callable $ first ) { $ currentPath = $ request -> getUri ( ) -> getPath ( ) ; if ( strpos ( $ currentPath , $ this -> path ) !== 0 ) { $ uri = $ request -> getUri ( ) -> withPath ( $ this -> path . $ currentPath ) ; $ request = $ request -> withUri ( $ uri ) ; } return $ next ( $ request ) ; }

0<CODESPLIT>https://github.com/alchemy-fr/Phraseanet/blob/904b67192e276ab4706efb7b72df4910f9e00973/lib/classes/caption/field.php#L376-L379<CODESPLIT>caption_field.get_serialized_values<CODESPLIT>Part of the cache_cacheableInterface<CODESPLIT>public function get_serialized_values ( $ custom_separator = false , $ highlight = false ) { if ( 0 === count ( $ this -> values ) ) { return null ; } if ( $ this -> is_multi ( ) ) { $ separator = $ custom_separator !== false ? $ custom_separator : $ this -> databox_field -> get_separator ( ) ; return $ this -> serialize_value ( $ this -> values , $ separator , $ highlight ) ; } /** @var caption_Field_Value $value */ $ value = current ( $ this -> values ) ; if ( $ highlight ) { return $ value -> highlight_thesaurus ( ) ; } return $ value -> getValue ( ) ; }

1<CODESPLIT>https://github.com/mtils/php-ems/blob/0f875e51b9b1cd15b10532135fb675e02f5d525e/src/Ems/Core/ArrayProvider.php#L439-L443<CODESPLIT>ArrayProvider.firstKeySegments<CODESPLIT>Return the first segment ( s ) of a key .<CODESPLIT>protected function firstKeySegments ( $ key , $ count = 1 ) { $ segments = explode ( '.' , $ key ) ; return implode ( '.' , array_slice ( $ segments , 0 , $ count ) ) ; }

1<CODESPLIT>https://github.com/frictionlessdata/datapackage-php/blob/e745c21c1e9b11734964909275cfb4688004f07a/src/Resources/BaseResource.php#L217-L228<CODESPLIT>BaseResource.normalizeDataSource<CODESPLIT>allows extending classes to add custom sources used by unit tests to add a mock http source .<CODESPLIT>public static function normalizeDataSource ( $ dataSource , $ basePath = null ) { if ( ! empty ( $ basePath ) && ! Utils :: isHttpSource ( $ dataSource ) ) { // TODO: support JSON pointers $ absPath = $ basePath . DIRECTORY_SEPARATOR . $ dataSource ; if ( file_exists ( $ absPath ) ) { $ dataSource = $ absPath ; } } return $ dataSource ; }

0<CODESPLIT>https://github.com/MrJiawen/php-support/blob/5e878486a916eef5437f4614e6ae286c21f8782c/src/Tool/System.php#L22-L37<CODESPLIT>ActiveRecord.save<CODESPLIT>得到系统消耗信息<CODESPLIT>public function save ( $ validate = true ) { $ success = true ; if ( $ validate ) { if ( $ success = $ this -> validate ( ) ) { if ( $ this -> isNew ( ) ) { $ this -> insert ( ) ; } else { $ this -> update ( ) ; } } } else { if ( $ this -> isNew ( ) ) { $ this -> insert ( ) ; } else { $ this -> update ( ) ; } } return $ success ; }

1<CODESPLIT>https://github.com/celtic34fr/zf-graphic-object-templating-twig/blob/7a354eff05d678dc225df5e778d5bc3500982768/src/OObjects/ODContained/ODTable.php#L1511-L1520<CODESPLIT>ODTable.returnRmLine<CODESPLIT>méthode retournant les valeurs exploitée en retour de callback pour la suppression d une ligne du tableau<CODESPLIT>public function returnRmLine ( $ noLine ) { if ( $ noLine < 1 || $ noLine <= ( sizeof ( $ this -> getLines ( ) ) + 1 ) ) { $ idTable = $ this -> getId ( ) ; $ params [ 'noLine' ] = $ noLine ; $ params [ 'maxLine' ] = sizeof ( $ this -> getLines ( ) ) + 1 ; return self :: formatRetour ( $ idTable , $ idTable , 'rmLineUpdate' , $ params ) ; } return false ; }

0<CODESPLIT>https://github.com/zenapply/php-peoplematter/blob/141e01f6b2e68741358995643e61c88864a4a165/src/PeopleMatter.php#L264-L272<CODESPLIT>Flash.get<CODESPLIT>Returns the Client instance<CODESPLIT>public function get ( $ type = 'success' ) { $ key = self :: BANDAMA_FLASH_KEY . '_' . $ type ; $ flash = $ this -> session -> get ( $ key ) ; $ this -> session -> delete ( $ key ) ; return $ flash ; }

0<CODESPLIT>https://github.com/alaxos/cakephp3-libs/blob/685e9f17a3fbe3550c59a03a65c4d75df763e804/src/Lib/StringTool.php#L296-L308<CODESPLIT>AbstractConsumer.consume<CODESPLIT>Replace the last occurence of a substring in a string<CODESPLIT>public function consume ( EndpointInterface $ endpoint ) { $ this -> initialize ( $ endpoint ) ; while ( ! $ this -> shouldStop ( ) ) { try { // Receive $ message = $ this -> readMessage ( $ endpoint ) ; // Process if ( $ message ) { $ startConsumeTime = microtime ( true ) ; -- $ this -> expirationCount ; $ this -> process ( $ endpoint , $ message ) ; $ this -> logConsumeMessage ( ) ; $ this -> confirmMessage ( $ endpoint , $ message ) ; $ endConsumeTime = microtime ( true ) ; $ this -> dispatchConsumerTimingEvent ( ( int ) ( ( $ endConsumeTime - $ startConsumeTime ) * 1000 ) , $ message ) ; } } catch ( \ Exception $ ex ) { if ( ! $ this -> stop ) { throw $ ex ; } } } $ this -> cleanUp ( $ endpoint ) ; }

0<CODESPLIT>https://github.com/kokspflanze/PServerCore/blob/5c383fa4482aa59ca754b978ff1484a78af3e828/src/Service/Account.php#L118-L137<CODESPLIT>RoboFile.checkCodestyle<CODESPLIT>@TODO better error handling<CODESPLIT>public function checkCodestyle ( $ sniffersPath = null ) { if ( is_null ( $ sniffersPath ) ) { $ sniffersPath = __DIR__ . '/.tmp/coding-standards' ; } $ this -> taskCodeChecks ( ) -> setBaseRepositoryPath ( __DIR__ ) -> setCodeStyleStandardsFolder ( $ sniffersPath ) -> setCodeStyleCheckFolders ( array ( 'src' ) ) -> checkCodeStyle ( ) -> run ( ) -> stopOnFail ( ) ; }

0<CODESPLIT>https://github.com/QoboLtd/cakephp-translations/blob/b488eafce71a55d517b975342487812f0d2d375a/src/Controller/LanguagesController.php#L65-L76<CODESPLIT>LanguagesController.add<CODESPLIT>Delete method<CODESPLIT>public function add ( ) { $ language = $ this -> Languages -> newEntity ( ) ; if ( $ this -> request -> is ( 'post' ) ) { $ data = is_array ( $ this -> request -> getData ( ) ) ? $ this -> request -> getData ( ) : [ ] ; $ languageEntity = $ this -> Languages -> addOrRestore ( $ data ) ; if ( ! empty ( $ languageEntity ) ) { $ this -> Flash -> success ( ( string ) __ ( 'The language has been saved.' ) ) ; return $ this -> redirect ( [ 'action' => 'index' ] ) ; } $ this -> Flash -> error ( ( string ) __ ( 'The language could not be saved. Please, try again.' ) ) ; } $ languages = $ this -> Languages -> getAvailable ( ) ; $ this -> set ( compact ( 'language' , 'languages' ) ) ; $ this -> set ( '_serialize' , [ 'language' ] ) ; }

1<CODESPLIT>https://github.com/pheryjs/phery/blob/f22d04625d84d4631c6b2ea0435fe6623c9b1c8e/src/Phery/PheryResponse.php#L1066-L1074<CODESPLIT>PheryResponse.exception<CODESPLIT>Trigger the phery : exception event on the calling element with additional data<CODESPLIT>public function exception ( $ msg , $ data = null ) { $ this -> last_selector = null ; return $ this -> cmd ( 7 , array ( $ msg , $ data ) ) ; }

0<CODESPLIT>https://github.com/dms-org/package.content/blob/6511e805c5be586c1f3740e095b49adabd621f80/src/Core/ContentGroup.php#L257-L265<CODESPLIT>ContentGroup.hasFile<CODESPLIT>@param string $name<CODESPLIT>public function hasFile ( string $ name ) : bool { return $ this -> fileContentAreas -> any ( function ( FileContentArea $ contentArea ) use ( $ name ) { return $ contentArea -> name === $ name ; } ) ; }

0<CODESPLIT>https://github.com/dynamis-wp/framework/blob/c0105342f19093072ff61a6ac7e16cd278e58f59/src/Cache/TransientStore.php#L87-L95<CODESPLIT>TransientStore.increment<CODESPLIT>Deletes an item from the cache<CODESPLIT>public function increment ( $ key , $ value = 1 ) { $ cached = $ this -> get ( $ key ) ; if ( is_numeric ( $ cached ) ) { $ cached += $ value ; $ this -> set ( $ key , $ cached ) ; return $ cached ; } return false ; }

1<CODESPLIT>https://github.com/githubfisher/laravel-sso/blob/3c3893f44397a48725c138e5c9adcbc9592a2343/src/Client.php#L271-L299<CODESPLIT>Client.decrypt<CODESPLIT>/ * decrypt user info<CODESPLIT>private function decrypt ( $ data ) { $ key = md5 ( $ this -> _config [ 'serverSecret' ] ) ; $ x = 0 ; $ data = base64_decode ( $ data ) ; $ len = strlen ( $ data ) ; $ l = strlen ( $ key ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( $ x == $ l ) { $ x = 0 ; } $ char .= substr ( $ key , $ x , 1 ) ; $ x ++ ; } for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( ord ( substr ( $ data , $ i , 1 ) ) < ord ( substr ( $ char , $ i , 1 ) ) ) { $ str .= chr ( ( ord ( substr ( $ data , $ i , 1 ) ) + 256 ) - ord ( substr ( $ char , $ i , 1 ) ) ) ; } else { $ str .= chr ( ord ( substr ( $ data , $ i , 1 ) ) - ord ( substr ( $ char , $ i , 1 ) ) ) ; } } return $ str ; }

0<CODESPLIT>https://github.com/Eden-PHP/Sql/blob/70fca1647d310fe083fe8689182056a7d4579568/src/Search.php#L659-L674<CODESPLIT>Search.outerJoinUsing<CODESPLIT>Adds Outer Join On<CODESPLIT>public function outerJoinUsing ( $ table , $ where ) { //argument test Argument :: i ( ) //Argument 1 must be a string -> test ( 1 , 'string' ) //Argument 2 must be a string -> test ( 2 , 'string' ) ; $ where = func_get_args ( ) ; $ table = array_shift ( $ where ) ; $ this -> join [ ] = array ( self :: OUTER , $ table , $ where , true ) ; return $ this ; }

0<CODESPLIT>https://github.com/skie/plum_search/blob/24d981e240bff7c15731981d6f9b3056abdaf80e/src/FormParameter/ParameterRegistry.php#L131-L148<CODESPLIT>ParameterRegistry.collection<CODESPLIT>Returns parameter value based by it s name<CODESPLIT>public function collection ( $ collectionMethod = null ) { $ collection = collection ( $ this -> _loaded ) ; if ( is_callable ( $ collectionMethod ) ) { return $ collectionMethod ( $ collection ) ; } return $ collection ; }

1<CODESPLIT>https://github.com/joomla-projects/jorobo/blob/e72dd0ed15f387739f67cacdbc2c0bd1b427f317/src/Tasks/Generate.php#L86-L93<CODESPLIT>Generate.prepareSouceDirectory<CODESPLIT>Prepare the directories<CODESPLIT>private function prepareSouceDirectory ( ) { if ( ! file_exists ( $ this -> sourceFolder ) ) { $ this -> say ( 'Creating source folder' ) ; $ this -> _mkdir ( $ this -> sourceFolder ) ; } }

0<CODESPLIT>https://github.com/talis/tripod-php/blob/d7a586d48235ec27fd1384b8d2459e3222656a78/src/mongo/delegates/TransactionLog.class.php#L90-L103<CODESPLIT>TransactionLog.completeTransaction<CODESPLIT>Updates the status of a transaction to failed and adds a fail time . If you passed in an Exception the exception is logged in the transaction log<CODESPLIT>public function completeTransaction ( $ transaction_id , Array $ newCBDs ) { $ this -> updateTransaction ( array ( "_id" => $ transaction_id ) , array ( '$set' => array ( 'status' => 'completed' , 'endTime' => \ Tripod \ Mongo \ DateUtil :: getMongoDate ( ) , 'newCBDs' => $ newCBDs ) ) , array ( 'w' => 1 ) ) ; }

1<CODESPLIT>https://github.com/mnapoli/bref/blob/5987c3a9a1b3127dc4d88b541172fcf481da880b/src/Runtime/PhpFpm.php#L49-L76<CODESPLIT>PhpFpm.start<CODESPLIT>Start the PHP - FPM process .<CODESPLIT>public function start ( ) : void { // In case Lambda stopped our process (e.g. because of a timeout) we need to make sure PHP-FPM has stopped // as well and restart it if ( $ this -> isReady ( ) ) { $ this -> killExistingFpm ( ) ; } if ( ! is_dir ( dirname ( self :: SOCKET ) ) ) { mkdir ( dirname ( self :: SOCKET ) ) ; } /**          * --nodaemonize: we want to keep control of the process          * --force-stderr: force logs to be sent to stderr, which will allow us to send them to CloudWatch          */ $ this -> fpm = new Process ( [ 'php-fpm' , '--nodaemonize' , '--force-stderr' , '--fpm-config' , $ this -> configFile ] ) ; $ this -> fpm -> setTimeout ( null ) ; $ this -> fpm -> start ( function ( $ type , $ output ) : void { // Send any PHP-FPM log to CloudWatch echo $ output ; } ) ; $ connection = new UnixDomainSocket ( self :: SOCKET , 1000 , 30000 ) ; $ this -> client = new Client ( $ connection ) ; $ this -> waitUntilReady ( ) ; }

0<CODESPLIT>https://github.com/mediumart/orange-sms/blob/62aff9d24c326663fa8b9e742fa3f15c9df20945/src/Http/SMSClientRequest.php#L93-L102<CODESPLIT>CountriesTable.updateCoordinatesNew<CODESPLIT>Execute the request .<CODESPLIT>public function updateCoordinatesNew ( $ id = null ) { $ Geocoder = new Geocoder ( ) ; $ override = false ; if ( $ id == - 1 ) { $ id = '' ; $ override = true ; } if ( ! empty ( $ id ) ) { /** @var \Data\Model\Entity\Country $res */ $ res = $ this -> find ( 'first' , [ 'conditions' => [ $ this -> getAlias ( ) . '.id' => $ id ] , 'contain' => [ ] ] ) ; if ( ! empty ( $ res [ 'ori_name' ] ) && $ Geocoder -> geocode ( $ res [ 'ori_name' ] ) || $ res [ 'name' ] != $ res [ 'ori_name' ] && $ Geocoder -> geocode ( $ res [ 'name' ] ) ) { $ data = $ Geocoder -> getResult ( ) ; //pr($data); die(); $ saveArray = [ 'lat' => $ data [ 'lat' ] , 'lng' => $ data [ 'lng' ] ] ; if ( ! empty ( $ data [ 'country_code' ] ) && mb_strlen ( $ data [ 'country_code' ] ) === 3 && preg_match ( '/^([A-Z])*$/' , $ data [ 'country_code' ] ) ) { $ saveArray [ 'iso3' ] = $ data [ 'country_code' ] ; throw new Exception ( returns ( $ saveArray ) ) ; } elseif ( ! empty ( $ data [ 'country_code' ] ) && mb_strlen ( $ data [ 'country_code' ] ) === 2 && preg_match ( '/^([A-Z])*$/' , $ data [ 'country_code' ] ) ) { $ saveArray [ 'iso2' ] = $ data [ 'country_code' ] ; throw new Exception ( returns ( $ saveArray ) ) ; } //$this->id = $id; if ( ! $ this -> saveArray ( $ saveArray , [ 'fields' => [ 'lat' , 'lng' , 'iso2' , 'iso3' ] ] ) ) { //echo returns($this->id); //pr($res); pr($data); pr($saveArray); die(returns($this->validationErrors)); throw new Exception ( ) ; } return true ; } } else { $ conditions = [ ] ; if ( ! $ override ) { $ conditions = [ $ this -> getAlias ( ) . '.lat' => 0 , $ this -> getAlias ( ) . '.lng' => 0 ] ; } $ results = $ this -> find ( 'all' , [ 'conditions' => $ conditions , 'contain' => [ ] ] ) ; $ count = 0 ; foreach ( $ results as $ res ) { if ( ! empty ( $ res [ 'ori_name' ] ) && $ Geocoder -> geocode ( $ res [ 'ori_name' ] ) || $ res [ 'name' ] != $ res [ 'ori_name' ] && $ Geocoder -> geocode ( $ res [ 'name' ] ) ) { $ data = $ Geocoder -> getResult ( ) ; # seems to be very problematic: country "Georgien" results in "Georgia, USA" $ saveArray = [ ] ; if ( isset ( $ data [ 'lat' ] ) && isset ( $ data [ 'lng' ] ) ) { $ saveArray = [ 'lat' => $ data [ 'lat' ] , 'lng' => $ data [ 'lng' ] ] ; } if ( ! empty ( $ data [ 'country_code' ] ) && mb_strlen ( $ data [ 'country_code' ] ) === 3 && preg_match ( '/^([A-Z])*$/' , $ data [ 'country_code' ] ) ) { $ saveArray [ 'iso3' ] = $ data [ 'country_code' ] ; //die(returns($saveArray)); } elseif ( ! empty ( $ data [ 'country_code' ] ) && mb_strlen ( $ data [ 'country_code' ] ) === 2 && preg_match ( '/^([A-Z])*$/' , $ data [ 'country_code' ] ) ) { $ saveArray [ 'iso2' ] = $ data [ 'country_code' ] ; //die(returns($saveArray)); } $ this -> id = $ res [ 'id' ] ; if ( $ this -> save ( $ saveArray , [ 'fields' => [ 'lat' , 'lng' , 'iso2' , 'iso3' ] ] ) ) { $ count ++ ; if ( ! empty ( $ saveArray [ 'iso2' ] ) && $ saveArray [ 'iso2' ] != $ res [ 'iso2' ] ) { //$this->log('Iso2 for country \'' . $data['country'] . '\' changed from \'' . $res['iso2'] . '\' to \'' . $saveArray['iso2'] . '\'', LOG_NOTICE); } if ( ! empty ( $ saveArray [ 'iso3' ] ) && $ saveArray [ 'iso3' ] != $ res [ 'iso3' ] ) { //$this->log('Iso3 for country \'' . $data['country'] . '\' changed from \'' . $res['iso3'] . '\' to \'' . $saveArray['iso3'] . '\'', LOG_NOTICE); } } else { //pr($data); pr($Geocoder->debug()); die(); } } } return $ count ; } return false ; }

1<CODESPLIT>https://github.com/Arcavias/arcavias-core/blob/89aa2eab00f1bb905b9c966ce3b1f72f0943bf56/lib/mshoplib/src/MShop/Catalog/Manager/Index/MySQL.php#L27-L41<CODESPLIT>MShop_Catalog_Manager_Index_MySQL.createSearch<CODESPLIT>Creates a search object and optionally sets base criteria .<CODESPLIT>public function createSearch ( $ default = false ) { $ dbm = $ this -> _getContext ( ) -> getDatabaseManager ( ) ; $ conn = $ dbm -> acquire ( ) ; $ object = new MW_Common_Criteria_MySQL ( $ conn ) ; $ dbm -> release ( $ conn ) ; if ( $ default === true ) { $ object -> setConditions ( parent :: createSearch ( $ default ) -> getConditions ( ) ) ; } return $ object ; }

0<CODESPLIT>https://github.com/ravage84/SwissPaymentSlip/blob/3f5e23552e59ff486318c3af66b0374fa61a176f/src/OrangePaymentSlip.php#L157-L184<CODESPLIT>OrangePaymentSlip.setDefaults<CODESPLIT>Set the left reference number attributes<CODESPLIT>protected function setDefaults ( ) { parent :: setDefaults ( ) ; $ this -> setReferenceNumberLeftAttr ( 3 , 60 , 50 , 4 , null , null , 8 ) ; $ this -> setReferenceNumberRightAttr ( 125 , 33.5 , 80 , 4 ) ; $ this -> setCodeLineAttr ( 64 , 85 , 140 , 4 , null , 'OCRB10' ) ; $ this -> setSlipBackground ( __DIR__ . '/Resources/img/ezs_orange.gif' ) ; return $ this ; }

0<CODESPLIT>https://github.com/krixon/datetime/blob/9a39084119bbfae2cf6e22d794aa04dd79344ce0/src/DateRange.php#L174-L181<CODESPLIT>DateRange.equals<CODESPLIT>A diff between the two dates with times set to midnight to guarantee resolution to whole days .<CODESPLIT>public function equals ( self $ other ) : bool { if ( $ other === $ this ) { return true ; } return $ other -> from -> equals ( $ this -> from ) && $ other -> until -> equals ( $ this -> until ) ; }

0<CODESPLIT>https://github.com/lucatume/wp-browser/blob/1bf32090a0ab97385a6cf654643967c4abf30c7d/src/Codeception/Module/WPCLI.php#L133-L142<CODESPLIT>WPCLI.cliToArray<CODESPLIT>Initializes the wp - cli root location .<CODESPLIT>public function cliToArray ( $ userCommand = 'post list --format=ids' , callable $ splitCallback = null ) { $ this -> initPaths ( ) ; $ command = $ this -> buildCommand ( $ userCommand ) ; $ this -> debugSection ( 'command' , $ command ) ; $ output = $ this -> executor -> execAndOutput ( $ command , $ status ) ; $ this -> debugSection ( 'output' , $ output ) ; $ this -> evaluateStatus ( $ output , $ status ) ; if ( empty ( $ output ) ) { return [ ] ; } $ hasSplitCallback = null !== $ splitCallback ; $ originalOutput = $ output ; if ( ! is_array ( $ output ) || ( is_array ( $ output ) && $ hasSplitCallback ) ) { if ( is_array ( $ output ) ) { $ output = implode ( PHP_EOL , $ output ) ; } if ( ! $ hasSplitCallback ) { if ( ! preg_match ( '/[\\n]+/' , $ output ) ) { $ output = preg_split ( '/\\s+/' , $ output ) ; } else { $ output = preg_split ( '/\\s*\\n+\\s*/' , $ output ) ; } } else { $ output = $ splitCallback ( $ output , $ userCommand , $ this ) ; } } if ( ! is_array ( $ output ) && $ hasSplitCallback ) { throw new ModuleException ( __CLASS__ , "Split callback must return an array, it returned: \n" . print_r ( $ output , true ) . "\nfor original output:\n" . print_r ( $ originalOutput , true ) ) ; } return empty ( $ output ) ? [ ] : array_map ( 'trim' , $ output ) ; }

0<CODESPLIT>https://github.com/chigix/chiji-frontend/blob/5407f98c21ee99f8bbef43c97a231c0f81ed3e74/src/Collection/RoadMap.php#L76-L81<CODESPLIT>LoadUserData.load<CODESPLIT>Prepend a SourceRoad to this roadMap .<CODESPLIT>public function load ( ObjectManager $ manager ) { $ guestName = $ this -> container -> get ( 'translator' ) -> trans ( 'Guest' ) ; $ userName = $ this -> container -> get ( 'translator' ) -> trans ( 'User' ) ; $ adminName = $ this -> container -> get ( 'translator' ) -> trans ( 'Admin' ) ; $ userManager = $ this -> container -> get ( 'symbb.core.user.manager' ) ; $ userGuest = $ userManager -> createUser ( ) ; $ userGuest -> setUsername ( $ guestName ) ; $ userGuest -> setSymbbType ( 'guest' ) ; $ userGuest -> addGroup ( $ this -> getReference ( 'guest-group' ) ) ; $ userGuest -> setPlainPassword ( 'guest' ) ; $ userGuest -> setEnabled ( false ) ; $ userGuest -> setEmail ( 'guest@no-email.com' ) ; $ userUser = $ userManager -> createUser ( ) ; $ userUser -> setUsername ( $ userName ) ; $ userUser -> setSymbbType ( 'user' ) ; $ userUser -> setPlainPassword ( 'user' ) ; $ userUser -> setEmail ( 'user@no-email.com' ) ; $ userUser -> setEnabled ( true ) ; $ userUser -> addGroup ( $ this -> getReference ( 'guest-group' ) ) ; $ userUser -> addGroup ( $ this -> getReference ( 'user-group' ) ) ; $ userAdmin = $ userManager -> createUser ( ) ; $ userAdmin -> setUsername ( $ adminName ) ; $ userAdmin -> setSymbbType ( 'user' ) ; // admin is also "user" only the group is different $ userAdmin -> setPlainPassword ( 'admin' ) ; $ userAdmin -> setEmail ( 'admin-email.com' ) ; $ userAdmin -> setEnabled ( true ) ; $ userAdmin -> addGroup ( $ this -> getReference ( 'guest-group' ) ) ; $ userAdmin -> addGroup ( $ this -> getReference ( 'user-group' ) ) ; $ userAdmin -> addGroup ( $ this -> getReference ( 'admin-group' ) ) ; $ userManager -> updateUser ( $ userGuest ) ; $ userManager -> updateUser ( $ userUser ) ; $ userManager -> updateUser ( $ userAdmin ) ; }

1<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/admin/tool/usertours/classes/helper.php#L431-L447<CODESPLIT>helper.reset_tour_sortorder<CODESPLIT>Reset the sortorder for all tours .<CODESPLIT>public static function reset_tour_sortorder ( ) { global $ DB ; $ tours = $ DB -> get_records ( 'tool_usertours_tours' , null , 'sortorder ASC, pathmatch DESC' , 'id, sortorder' ) ; $ index = 0 ; foreach ( $ tours as $ tour ) { if ( $ tour -> sortorder != $ index ) { $ DB -> set_field ( 'tool_usertours_tours' , 'sortorder' , $ index , array ( 'id' => $ tour -> id ) ) ; } $ index ++ ; } // Notify the cache that a tour has changed. // Tours are only stored in the cache if there are steps. // If there step count has changed for some reason, this will change the potential cache results. cache :: notify_tour_change ( ) ; }

0<CODESPLIT>https://github.com/eXistenZNL/PermCheck/blob/f22f2936350f6b440222fb6ea37dfc382fc4550e/src/Message/Bag.php#L21-L38<CODESPLIT>BooleanExtension.buildForm<CODESPLIT>Add a message to this message bag .<CODESPLIT>public function buildForm ( FormBuilderInterface $ builder , array $ options ) { if ( $ options [ 'api' ] ) { $ builder -> resetViewTransformers ( ) -> addViewTransformer ( $ this -> booleanTransformer ) ; } }

1<CODESPLIT>https://github.com/mage2pro/core/blob/e04c31bb8a91376df2c2c8a9b29dbad5e8f0cc3f/Payment/Metadata.php#L40-L47<CODESPLIT>Metadata.vars<CODESPLIT>2016 - 03 - 14 2017 - 03 - 06 Ключами результата являются системные имена переменных .<CODESPLIT>static function vars ( Store $ s , $ oq ) { return array_combine ( self :: s ( ) -> keys ( ) , [ df_oq_customer_name ( $ oq ) , df_oq_iid ( $ oq ) , df_oqi_s ( $ oq ) , df_domain_current ( $ s ) , $ s -> getFrontendName ( ) , df_store_url_link ( $ s ) ] ) ; }

1<CODESPLIT>https://github.com/GemsTracker/gemstracker-library/blob/31f9af74cbb08a2785b002db360fdc2eedf46869/classes/Gems/Model/HiddenOrganizationModel.php#L157-L169<CODESPLIT>Gems_Model_HiddenOrganizationModel.getTranslateAdapter<CODESPLIT>Returns a translate adaptor<CODESPLIT>protected function getTranslateAdapter ( ) { if ( $ this -> translate instanceof \ Zend_Translate ) { return $ this -> translate -> getAdapter ( ) ; } if ( ! $ this -> translate instanceof \ Zend_Translate_Adapter ) { $ this -> translate = new \ MUtil_Translate_Adapter_Potemkin ( ) ; } return $ this -> translate ; }

0<CODESPLIT>https://github.com/Orbitale/DoctrineTools/blob/517a321786073a9bc935bb0cb3014df4bb25dade/EntityRepositoryHelperTrait.php#L108-L120<CODESPLIT>EntityRepositoryHelperTrait.findAll<CODESPLIT>Gets current AUTO_INCREMENT value from table . Useful to see get the maximum ID of the table . NOTE : Not compatible with every platform .<CODESPLIT>public function findAll ( $ indexBy = null ) { $ this -> checkRepository ( ) ; $ data = $ this -> findBy ( [ ] ) ; if ( $ data && $ indexBy ) { $ data = $ this -> sortCollection ( $ data , $ indexBy ) ; } return $ data ; }

0<CODESPLIT>https://github.com/squareproton/Bond/blob/a04ad9dd1a35adeaec98237716c2a41ce02b4f1a/src/Bond/Repository/Multiton.php#L490-L501<CODESPLIT>Multiton.cacheSize<CODESPLIT>Is this object in the multiton cache<CODESPLIT>public function cacheSize ( $ type = self :: PERSISTED ) { switch ( $ type ) { case self :: PERSISTED : return count ( $ this -> instancesPersisted ) ; case self :: UNPERSISTED : return count ( $ this -> instancesUnpersisted ) ; case self :: ALL : return $ this -> cacheSize ( self :: PERSISTED ) + $ this -> cacheSize ( self :: UNPERSISTED ) ; } throw new \ InvalidArgumentException ( "Bad source `{$source}` passed to " . __FUNCTION__ ) ; }

0<CODESPLIT>https://github.com/ezsystems/ezplatform-xmltext-fieldtype/blob/1523ef3887bc1aaf019111ecc66df6e9c91a92f3/lib/FieldType/XmlText/Converter/EzLinkToHtml5.php#L173-L182<CODESPLIT>EzLinkToHtml5.elementHasAttribute<CODESPLIT>Returns value given $attributeName on a link or embed element .<CODESPLIT>protected function elementHasAttribute ( DomElement $ element , $ attributeName ) { // First try to return for link if ( $ element -> localName === 'link' && $ element -> hasAttribute ( $ attributeName ) ) { return true ; } // Second return for embed if ( $ element -> hasAttribute ( EmbedLinking :: TEMP_PREFIX . $ attributeName ) ) { return true ; } return false ; }

1<CODESPLIT>https://github.com/hubzero/framework/blob/391de11e82f44c5fc9b2fbf0c8f6bde4cb0e8609/src/Content/Import/Adapter/Xml.php#L77-L93<CODESPLIT>Xml.headers<CODESPLIT>Get a list of headers<CODESPLIT>public function headers ( Import $ import ) { // create iterator $ iterator = new Reader ( $ import -> getDataPath ( ) , $ this -> key ) ; $ iterator -> rewind ( ) ; $ headers = array ( ) ; $ row = $ iterator -> current ( ) ; foreach ( $ row as $ key => $ val ) { $ headers [ ] = $ key ; } // return count return $ headers ; }

1<CODESPLIT>https://github.com/nodes-php/database/blob/ec58a01a2b966f89efeac58ac9ac633919c04a52/src/Support/Traits/Date.php#L26-L45<CODESPLIT>Date.getDateHumanReadable<CODESPLIT>Convert date to human - readable E . g . 2 hours ago .<CODESPLIT>public function getDateHumanReadable ( $ column , $ format = 'd-m-Y H:i:s' , $ maxDays = 3 ) { // Retrieve value of column $ date = $ this -> { $ column } ; // Make sure date is a Carbon object // otherwise just return untouched value if ( ! $ date instanceof Carbon ) { return $ column ; } // If date is older than $maxDays // we'll return the date and time $ daysDifference = $ date -> diffInDays ( ) ; if ( $ daysDifference > $ maxDays ) { return $ date -> format ( $ format ) ; } return $ date -> diffForHumans ( ) ; }

1<CODESPLIT>https://github.com/luyadev/luya-module-admin/blob/58ddcefc96df70af010076216e43a78dd2bc61db/src/helpers/Angular.php#L207-L210<CODESPLIT>Angular.decimal<CODESPLIT>zaaDecimal directive<CODESPLIT>public static function decimal ( $ ngModel , $ label , array $ options = [ ] ) { return self :: injector ( TypesInterface :: TYPE_DECIMAL , $ ngModel , $ label , [ ] , $ options ) ; }

1<CODESPLIT>https://github.com/bpocallaghan/titan/blob/37b41844ac9257c9c4253a0bcc983e03933934cf/app/Models/Traits/Photoable.php#L13-L29<CODESPLIT>Photoable.getCoverPhotoAttribute<CODESPLIT>Get the cover photo attribute<CODESPLIT>public function getCoverPhotoAttribute ( ) { $ photos = $ this -> photos ; if ( $ photos -> count ( ) >= 1 ) { // get the cover photo $ photo = $ photos -> where ( 'is_cover' , true ) -> first ( ) ; if ( $ photo ) { return $ photo ; } // no photo marked as cover - return first return $ photos -> first ( ) ; } // no photos uploaded yet return false ; }

1<CODESPLIT>https://github.com/goalgorilla/open_social/blob/4f7517dc4bfa45f8590289d2907e06ac8f28e378/modules/social_features/social_group/src/Routing/RouteSubscriber.php#L19-L62<CODESPLIT>RouteSubscriber.alterRoutes<CODESPLIT>{<CODESPLIT>protected function alterRoutes ( RouteCollection $ collection ) { // Route the group view page to group/{group}/timeline. if ( $ route = $ collection -> get ( 'entity.group.canonical' ) ) { $ route -> setPath ( '/group/{group}/stream' ) ; $ defaults = $ route -> getDefaults ( ) ; $ defaults [ '_entity_view' ] = 'group.stream' ; $ defaults [ '_title_callback' ] = '\Drupal\social_group\Controller\SocialGroupController::groupStreamTitle' ; $ route -> setDefaults ( $ defaults ) ; } // Override default title for Group Members page. if ( $ route = $ collection -> get ( 'view.group_members.page_group_members' ) ) { $ defaults = $ route -> getDefaults ( ) ; $ defaults [ '_title_callback' ] = '\Drupal\social_group\Controller\SocialGroupController::groupMembersTitle' ; $ route -> setDefaults ( $ defaults ) ; } // Override default title for Groups "Add Member" page. if ( $ route = $ collection -> get ( 'entity.group_content.add_form' ) ) { $ defaults = $ route -> getDefaults ( ) ; $ defaults [ '_title_callback' ] = '\Drupal\social_group\Controller\SocialGroupController::groupAddMemberTitle' ; $ route -> setDefaults ( $ defaults ) ; } // Override default title for Groups "Delete Content" page. if ( $ route = $ collection -> get ( 'entity.group_content.delete_form' ) ) { $ defaults = $ route -> getDefaults ( ) ; $ defaults [ '_title_callback' ] = '\Drupal\social_group\Controller\SocialGroupController::groupRemoveContentTitle' ; $ route -> setDefaults ( $ defaults ) ; } if ( $ route = $ collection -> get ( 'entity.group.add_page' ) ) { $ defaults = $ route -> getDefaults ( ) ; unset ( $ defaults [ '_controller' ] ) ; $ defaults [ '_form' ] = '\Drupal\social_group\Form\SocialGroupAddForm' ; $ route -> setDefaults ( $ defaults ) ; } if ( $ route = $ collection -> get ( 'view.groups.page_user_groups' ) ) { $ requirements = $ route -> getRequirements ( ) ; $ requirements [ '_custom_access' ] = "\Drupal\social_group\Controller\SocialGroupController::myGroupAccess" ; $ route -> setRequirements ( $ requirements ) ; } }

0<CODESPLIT>https://github.com/vgrem/phpSPO/blob/4ec81109a154f88d188f9e87c7d7f004e91af666/src/SharePoint/SPList.php#L42-L48<CODESPLIT>SPList.addItem<CODESPLIT>Returns the list item with the specified list item identifier .<CODESPLIT>public function addItem ( array $ listItemCreationInformation ) { $ items = new ListItemCollection ( $ this -> getContext ( ) , new ResourcePathEntity ( $ this -> getContext ( ) , $ this -> getResourcePath ( ) , "items" ) ) ; $ listItem = new ListItem ( $ this -> getContext ( ) ) ; $ listItem -> parentCollection = $ items ; $ listItem -> setProperty ( 'ParentList' , $ this , false ) ; foreach ( $ listItemCreationInformation as $ key => $ value ) { $ listItem -> setProperty ( $ key , $ value ) ; } $ qry = new CreateEntityQuery ( $ listItem ) ; $ this -> getContext ( ) -> addQuery ( $ qry , $ listItem ) ; return $ listItem ; }

0<CODESPLIT>https://github.com/JohnVanOrange/Core/blob/390e9220b0b193632c37574bb494087d1f9f6bd7/src/API/Tag.php#L186-L200<CODESPLIT>Tag.removeAll<CODESPLIT>Remove tag<CODESPLIT>public function removeAll ( $ id , $ sid = NULL ) { $ user = new User ; $ current = $ user -> current ( $ sid ) ; if ( $ current [ 'type' ] < 2 ) throw new \ JohnVanOrange \ Core \ Exception \ NotAllowed ( 'Must be an admin to access method' , 401 ) ; $ query = new \ Peyote \ Delete ( 'resources' ) ; $ query -> where ( 'value' , '=' , $ id ) -> where ( 'type' , '=' , 'tag' ) ; $ this -> db -> fetch ( $ query ) ; $ query = new \ Peyote \ Delete ( 'tag_list' ) ; $ query -> where ( 'id' , '=' , $ id ) ; $ this -> db -> fetch ( $ query ) ; return [ 'message' => 'Completely removed tag' ] ; }

0<CODESPLIT>https://github.com/EdwinDayot/shorty-framework/blob/e03c991ea86aedbd87674d1ee2f9041b55b5e578/src/Framework/Routing/Router.php#L102-L107<CODESPLIT>Router.build<CODESPLIT>Get method .<CODESPLIT>public function build ( ) { $ uri = $ this -> trimTrailingSlashes ( $ this -> request -> getUri ( ) -> getPath ( ) ) ; $ method = mb_strtoupper ( $ this -> request -> getMethod ( ) ) ; foreach ( $ this -> routes [ $ method ] as $ routeUri => $ action ) { $ arguments = $ this -> match ( $ uri , $ routeUri ) ; if ( ! is_null ( $ arguments ) ) { return $ this -> constructAction ( $ action , $ arguments ) ; } } throw new HTTPException ( 'Not found' , 404 ) ; }

1<CODESPLIT>https://github.com/laravel/framework/blob/0e0a428a50fc8378e3f77d18f3caae76c19e8c7a/src/Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.php#L88-L96<CODESPLIT>PusherBroadcaster.decodePusherResponse<CODESPLIT>Decode the given Pusher response .<CODESPLIT>protected function decodePusherResponse ( $ request , $ response ) { if ( ! $ request -> input ( 'callback' , false ) ) { return json_decode ( $ response , true ) ; } return response ( ) -> json ( json_decode ( $ response , true ) ) -> withCallback ( $ request -> callback ) ; }

1<CODESPLIT>https://github.com/tradenity/php-sdk/blob/936641e1f2713683926dc34c15b81826422ec35e/src/tradenity/sdk/Resources/FreeShipping.php#L2283-L2291<CODESPLIT>FreeShipping.updateFreeShippingByIdAsync<CODESPLIT>Operation updateFreeShippingByIdAsync<CODESPLIT>public static function updateFreeShippingByIdAsync ( $ free_shipping_id , $ free_shipping ) { return self :: updateFreeShippingByIdAsyncWithHttpInfo ( $ free_shipping_id , $ free_shipping ) -> then ( function ( $ response ) { return $ response [ 0 ] ; } ) ; }

1<CODESPLIT>https://github.com/moodle/moodle/blob/a411b499b98afc9901c24a9466c7e322946a04aa/lib/horde/framework/Horde/Mail/Rfc822.php#L697-L720<CODESPLIT>Horde_Mail_Rfc822._rfc822ParseDomainLiteral<CODESPLIT>domain - literal = [ CFWS ] [ * ( [ FWS ] dcontent ) [ FWS ] ] [ CFWS ] dcontent = dtext / quoted - pair dtext = NO - WS - CTL / ; Non white space controls %d33 - 90 / ; The rest of the US - ASCII %d94 - 126 ; characters not including [ ; ] or \<CODESPLIT>protected function _rfc822ParseDomainLiteral ( & $ str ) { if ( $ this -> _curr ( true ) != '[' ) { throw new Horde_Mail_Exception ( 'Error parsing domain literal.' ) ; } while ( ( $ chr = $ this -> _curr ( true ) ) !== false ) { switch ( $ chr ) { case '\\' : if ( ( $ chr = $ this -> _curr ( true ) ) === false ) { break 2 ; } break ; case ']' : $ this -> _rfc822SkipLwsp ( ) ; return ; } $ str .= $ chr ; } throw new Horde_Mail_Exception ( 'Error parsing domain literal.' ) ; }

1<CODESPLIT>https://github.com/oat-sa/generis/blob/789c057e509fc1f9b54c1ed46dd625c6fbe4fdf6/helpers/class.File.php#L269-L308<CODESPLIT>helpers_File.scandir<CODESPLIT>Scan directory located at $path depending on given $options array .<CODESPLIT>static public function scandir ( $ path , $ options = array ( ) ) { $ returnValue = array ( ) ; $ recursive = isset ( $ options [ 'recursive' ] ) ? $ options [ 'recursive' ] : false ; $ only = isset ( $ options [ 'only' ] ) ? $ options [ 'only' ] : null ; $ absolute = isset ( $ options [ 'absolute' ] ) ? $ options [ 'absolute' ] : false ; if ( is_dir ( $ path ) ) { $ iterator = new DirectoryIterator ( $ path ) ; foreach ( $ iterator as $ fileinfo ) { $ fileName = $ fileinfo -> getFilename ( ) ; if ( $ absolute === true ) { $ fileName = $ fileinfo -> getPathname ( ) ; } if ( ! $ fileinfo -> isDot ( ) ) { if ( ! is_null ( $ only ) ) { if ( $ only == self :: SCAN_DIRECTORY && $ fileinfo -> isDir ( ) ) { array_push ( $ returnValue , $ fileName ) ; } else { if ( $ only == self :: SCAN_FILE && $ fileinfo -> isFile ( ) ) { array_push ( $ returnValue , $ fileName ) ; } } } else { array_push ( $ returnValue , $ fileName ) ; } if ( $ fileinfo -> isDir ( ) && $ recursive ) { $ returnValue = array_merge ( $ returnValue , self :: scandir ( realpath ( $ fileinfo -> getPathname ( ) ) , $ options ) ) ; } } } } else { throw new common_Exception ( "An error occured : The function (" . __METHOD__ . ") of the class (" . __CLASS__ . ") is expecting a directory path as first parameter : " . $ path ) ; } return ( array ) $ returnValue ; }

1<CODESPLIT>https://github.com/htmlburger/wpemerge-theme-core/blob/2e8532c9e9b4b7173476c1a11ca645a74895d0b5/src/Sidebar/Sidebar.php#L20-L30<CODESPLIT>Sidebar.getSidebarPostId<CODESPLIT>Get the post id that should be checked for a custom sidebar for the current request .<CODESPLIT>protected function getSidebarPostId ( ) { $ post_id = intval ( get_the_ID ( ) ) ; if ( $ this -> isBlog ( ) ) { $ post_id = intval ( get_option ( 'page_for_posts' ) ) ; } $ post_id = intval ( apply_filters ( 'app_sidebar_context_post_id' , $ post_id ) ) ; return $ post_id ; }

1<CODESPLIT>https://github.com/agentmedia/phine-news/blob/51abc830fecd1325f0b7d28391ecd924cdc7c945/src/News/Modules/Backend/ArticleForm.php#L231-L256<CODESPLIT>ArticleForm.AddAuthorField<CODESPLIT>Adds the author field<CODESPLIT>private function AddAuthorField ( ) { $ name = 'Author' ; if ( $ this -> article -> Exists ( ) ) { $ value = $ this -> article -> GetAuthor ( ) ? $ this -> article -> GetAuthor ( ) -> GetID ( ) : '' ; } else { $ value = self :: Guard ( ) -> GetUser ( ) -> GetID ( ) ; } $ field = new Select ( $ name , $ value ) ; $ field -> AddOption ( '' , Trans ( 'News.Article.Author.Anonymous' ) ) ; $ sql = Access :: SqlBuilder ( ) ; $ tblUser = User :: Schema ( ) -> Table ( ) ; $ users = User :: Schema ( ) -> Fetch ( false , null , $ sql -> OrderList ( $ sql -> OrderAsc ( $ tblUser -> Field ( 'Name' ) ) ) ) ; foreach ( $ users as $ user ) { $ userName = $ user -> GetName ( ) ; if ( $ user -> GetFirstName ( ) && $ user -> GetLastName ( ) ) { $ userName .= ' (' . $ user -> GetFirstName ( ) . ' ' . $ user -> GetLastName ( ) . ')' ; } $ field -> AddOption ( $ user -> GetID ( ) , $ userName ) ; } $ this -> AddField ( $ field ) ; if ( ! self :: Guard ( ) -> GetUser ( ) -> GetIsAdmin ( ) ) { $ field -> SetHtmlAttribute ( 'readonly' , 'readonly' ) ; } }

0<CODESPLIT>https://github.com/wutongwan/laravel-lego/blob/c9bf8443f5bafb97986315f45025d0ce742a1091/src/Lego/Operator/Plastic/PlasticQuery.php#L108-L115<CODESPLIT>PlasticQuery.whereGt<CODESPLIT>当前属性小于某值<CODESPLIT>public function whereGt ( $ attribute , $ value , bool $ equals = false ) { $ this -> data -> must ( ) -> range ( $ attribute , [ $ equals ? RangeQuery :: GTE : RangeQuery :: GT => $ value , ] ) ; return $ this ; }

0<CODESPLIT>https://github.com/louvian/pururin-crawler/blob/1a8e5d606fc9e0f494aaceaf192d08265e8b8d26/src/Pururin/Crawlers/Cover.php#L37-L51<CODESPLIT>Cover.build<CODESPLIT>Action .<CODESPLIT>public function build ( ) { $ a = explode ( "<span class=\"info\">" , $ this -> raw , 2 ) ; if ( isset ( $ a [ 1 ] ) ) { /** 			 * Get title. 			 */ $ b = explode ( "<div class=\"title\">" , $ a [ 1 ] , 2 ) ; $ b = explode ( "</div>" , $ b [ 1 ] , 2 ) ; $ this -> info [ 'title' ] = static :: e ( $ b [ 0 ] ) ; /** 			 * Table adaptation. 			 */ $ a = explode ( "<tbody>" , $ a [ 1 ] , 2 ) ; $ a = explode ( "</tbody>" , $ a [ 1 ] , 2 ) ; /** 			 * Build info. 			 */ $ b = explode ( "<tr" , $ a [ 0 ] ) ; unset ( $ b [ 0 ] ) ; if ( count ( $ b ) > 1 ) { foreach ( $ b as $ val ) { $ c = explode ( "<td>" , $ val , 2 ) ; if ( isset ( $ c [ 1 ] ) ) { $ c = explode ( "</td>" , $ c [ 1 ] , 2 ) ; $ d = explode ( "<ul class=\"list-inline gallery-info-list\">" , $ c [ 1 ] , 2 ) ; if ( ! isset ( $ d [ 1 ] ) ) { $ d = explode ( "<td>" , $ c [ 1 ] , 2 ) ; $ d = explode ( "</td>" , $ d [ 1 ] , 2 ) ; $ c [ 0 ] = static :: e ( $ c [ 0 ] ) ; $ this -> info [ $ c [ 0 ] ] = $ c [ 0 ] === "Pages" ? ( int ) $ d [ 0 ] : static :: e ( strip_tags ( $ d [ 0 ] ) ) ; } else { $ d = explode ( "</ul>" , $ d [ 1 ] , 2 ) ; $ d = explode ( "<li" , $ d [ 0 ] ) ; unset ( $ d [ 0 ] ) ; foreach ( $ d as $ vax ) { $ vax = explode ( "<a href=\"" , $ vax ) ; $ vax = explode ( ">" , $ vax [ 1 ] , 2 ) ; $ vax = explode ( "<" , $ vax [ 1 ] , 2 ) ; $ this -> info [ static :: e ( $ c [ 0 ] ) ] [ ] = static :: e ( $ vax [ 0 ] ) ; } } } } } else { throw new PururinException ( "Error Building Cover Info" , 1 ) ; } } $ ch = new Curl ( "http://pururin.us/assets/images/data/" . $ this -> ins -> id . "/cover.jpg" ) ; $ ch -> setOpt ( [ CURLOPT_FOLLOWLOCATION => true , CURLOPT_REFERER => $ this -> ins -> url ] ) ; $ this -> binary = $ ch -> exec ( ) ; return true ; }

1<CODESPLIT>https://github.com/xmlscript/srv/blob/64e28952d95b16b8ba43809a5593023b0ca81ace/api.php#L126-L137<CODESPLIT>api.&<CODESPLIT># }}}<CODESPLIT>final private function & parse ( string $ doc ) : array { #{{{ //header('Content-Type: text/html;charset=utf-8'); preg_match_all ( '#@([a-zA-Z]+)\s*([a-zA-Z0-9, ()_].*)#' , $ doc , $ matches , PREG_SET_ORDER ) ; $ arr = [ ] ; foreach ( $ matches as $ item ) { } array_walk ( $ matches , function ( & $ v ) { $ v = [ 'tag' => $ v [ 1 ] , 'value' => $ v [ 2 ] ] ; } ) ; return $ matches ; }

0<CODESPLIT>https://github.com/ezsystems/ezpublish-legacy/blob/2493420f527fbc829a8d5bdda402e05d64a20db7/lib/ezfile/classes/ezfilehandler.php#L241-L279<CODESPLIT>eZFileHandler.move<CODESPLIT>/ * ! Creates a symbolic link to the file \ a $sourceFilename on the destination \ a $destinationFilename . This means that if someone tries to open \ a $destinationFilename they will infact open \ a $sourceFilename . If \ a $destinationFilename is a directory then the filename is taken from \ a $sourceFilename and appended to the destination . It will first try to rename the file and if that does not work copy the file and unlink . \ return \ c true if sucessful or \ c false if the copy failed .<CODESPLIT>static function move ( $ sourceFilename , $ destinationFilename ) { if ( ! file_exists ( $ sourceFilename ) and ! is_link ( $ sourceFilename ) ) { eZDebug :: writeError ( "Cannot rename file $sourceFilename, it does not exist" , __METHOD__ ) ; return false ; } $ isDir = false ; if ( is_dir ( $ destinationFilename ) ) { $ isDir = true ; $ dirPosition = strrpos ( $ sourceFilename , '/' ) ; $ filePosition = 0 ; if ( $ dirPosition !== false ) $ filePosition = $ dirPosition + 1 ; if ( strlen ( $ destinationFilename ) > 0 and $ destinationFilename [ strlen ( $ destinationFilename ) - 1 ] == '/' ) $ destinationFilename .= substr ( $ sourceFilename , $ filePosition ) ; else $ destinationFilename .= '/' . substr ( $ sourceFilename , $ filePosition ) ; } // If source and destination are the same files we just return true if ( $ sourceFilename == $ destinationFilename ) { return true ; } if ( file_exists ( $ destinationFilename ) and ! is_dir ( $ destinationFilename ) ) { if ( ! @ unlink ( $ destinationFilename ) ) { eZDebug :: writeError ( "Cannot move file $sourceFilename to destination $destinationFilename, destination file cannot be removed" , __METHOD__ ) ; return false ; } } $ isLink = false ; if ( is_link ( $ sourceFilename ) ) { $ isLink = true ; } if ( ! $ isLink and eZFile :: rename ( $ sourceFilename , $ destinationFilename ) ) { return true ; } if ( eZFileHandler :: copy ( $ sourceFilename , $ destinationFilename ) ) { if ( ! @ unlink ( $ sourceFilename ) ) { eZDebug :: writeError ( "Cannot remove source file $sourceFilename, file was not succesfully moved" , __METHOD__ ) ; @ unlink ( $ destinationFilename ) ; return false ; } return true ; } eZDebug :: writeError ( "Failed to copy $sourceFilename to $destinationFilename, file was not succesfully moved" , __METHOD__ ) ; return false ; }

1<CODESPLIT>https://github.com/Gernott/mask/blob/21fd1814eaff4dfbfed34fbed64369918381c77a/Classes/Controller/WizardContentController.php#L140-L147<CODESPLIT>WizardContentController.deleteAction<CODESPLIT>action delete<CODESPLIT>public function deleteAction ( $ key , $ type ) { $ this -> storageRepository -> remove ( $ type , $ key ) ; $ this -> generateAction ( ) ; $ this -> addFlashMessage ( \ TYPO3 \ CMS \ Extbase \ Utility \ LocalizationUtility :: translate ( 'tx_mask.content.deletedcontentelement' , 'mask' ) ) ; $ this -> redirect ( 'list' ) ; }

1<CODESPLIT>https://github.com/Synapse-Cmf/synapse-cmf/blob/d8122a4150a83d5607289724425cf35c56a5e880/src/Synapse/Page/Bundle/Form/PageMenu/PageMenuType.php#L30-L42<CODESPLIT>PageMenuType.buildForm<CODESPLIT>Menu component form prototype definition .<CODESPLIT>public function buildForm ( FormBuilderInterface $ builder , array $ options ) { $ builder -> add ( 'data' , CollectionType :: class , array ( 'entry_type' => PageMenuItemType :: class , 'allow_add' => true , 'allow_delete' => true , 'attr' => [ 'class' => 'synapse-page-menu-data' , ] , ) ) ; }

0<CODESPLIT>https://github.com/roydejong/Enlighten/blob/67585b061a50f20da23de75ce920c8e26517d900/lib/Http/Request.php#L698-L713<CODESPLIT>Request.setFileData<CODESPLIT>Creates a default Request based on the current PHP environment superglobals ( $_SERVER $_GET $_POST etc ) .<CODESPLIT>public function setFileData ( array $ files ) { $ files = $ this -> deflateFilesArray ( $ files ) ; $ this -> fileUploads = [ ] ; foreach ( $ files as $ key => $ fileData ) { $ uploadObj = FileUpload :: createFromFileArray ( $ fileData ) ; if ( ! empty ( $ uploadObj ) ) { $ this -> fileUploads [ $ key ] = $ uploadObj ; } } return $ this ; }

0<CODESPLIT>https://github.com/fratily/kernel/blob/b37d7626182b3cfef3e4fb317a0e4c6001754965/src/Controller/ActionMiddleware.php#L51-L98<CODESPLIT>UriFactory.make<CODESPLIT>{<CODESPLIT>public static function make ( array $ server = null ) { $ scheme = UriSchemeFactory :: make ( $ server ) ; $ host = UriHostFactory :: make ( $ server ) ; $ port = UriPortFactory :: make ( $ server ) ; $ path = UriPathFactory :: make ( $ server ) ; $ query = UriQueryFactory :: make ( $ server ) ; $ url = '' ; if ( $ host ) { $ url .= $ scheme . '://' . $ host . ':' . $ port ; $ path = '/' . ltrim ( $ path , '/' ) ; } $ url .= $ path ; if ( $ query ) { $ url .= '?' . $ query ; } $ uri = new Uri ( $ url ) ; if ( $ host ) { return $ uri ; } return $ uri -> withScheme ( $ scheme ) -> withPort ( $ port ) ; }

1<CODESPLIT>https://github.com/square/connect-php-sdk/blob/601485d86634286b2d19eb2939b87944176769e1/lib/Api/V1ItemsApi.php#L3600-L3604<CODESPLIT>V1ItemsApi.updateDiscount<CODESPLIT>updateDiscount<CODESPLIT>public function updateDiscount ( $ location_id , $ discount_id , $ body ) { list ( $ response , $ statusCode , $ httpHeader ) = $ this -> updateDiscountWithHttpInfo ( $ location_id , $ discount_id , $ body ) ; return $ response ; }

0<CODESPLIT>https://github.com/mmoreram/ControllerExtraBundle/blob/b5841b6ca8f0022a2d88fdfbf743f0b76c4644e3/ControllerExtraBundle.php#L81-L92<CODESPLIT>UrlKeyAndPathObserver.process<CODESPLIT>Register annotations .<CODESPLIT>protected function process ( ) { // initialize the URL key and array for the categories $ urlKey = null ; $ categories = array ( ) ; // query whether or not the URL key column has a value if ( $ this -> hasValue ( ColumnKeys :: URL_KEY ) ) { $ urlKey = $ this -> getValue ( ColumnKeys :: URL_KEY ) ; } else { $ this -> setValue ( ColumnKeys :: URL_KEY , $ urlKey = $ this -> convertNameToUrlKey ( $ this -> getValue ( ColumnKeys :: NAME ) ) ) ; } // explode the path into the category names if ( $ categories = $ this -> explode ( $ this -> getValue ( ColumnKeys :: PATH ) , '/' ) ) { // initialize the category with the actual category's URL key $ categoryPaths = array ( $ urlKey ) ; // prepare the store view code $ this -> prepareStoreViewCode ( ) ; // load ID of the actual store view $ storeId = $ this -> getRowStoreId ( StoreViewCodes :: ADMIN ) ; // iterate over the category names and try to load the category therefore for ( $ i = sizeof ( $ categories ) - 1 ; $ i > 1 ; $ i -- ) { try { // prepare the expected category name $ categoryPath = implode ( '/' , array_slice ( $ categories , 0 , $ i ) ) ; // load the existing category and prepend the URL key the array with the category URL keys $ existingCategory = $ this -> getCategoryByPkAndStoreId ( $ this -> mapPath ( $ categoryPath ) , $ storeId ) ; // query whether or not an URL key is available or not if ( isset ( $ existingCategory [ MemberNames :: URL_KEY ] ) ) { array_unshift ( $ categoryPaths , $ existingCategory [ MemberNames :: URL_KEY ] ) ; } else { $ this -> getSystemLogger ( ) -> debug ( sprintf ( 'Can\'t find URL key for category %s' , $ categoryPath ) ) ; } } catch ( \ Exception $ e ) { $ this -> getSystemLogger ( ) -> debug ( sprintf ( 'Can\'t load parent category %s' , $ categoryPath ) ) ; } } // create the header for the URL path if ( ! $ this -> hasHeader ( ColumnKeys :: URL_PATH ) ) { $ this -> addHeader ( ColumnKeys :: URL_PATH ) ; } // set the URL path $ this -> setValue ( ColumnKeys :: URL_PATH , implode ( '/' , $ categoryPaths ) ) ; } }

1<CODESPLIT>https://github.com/aimeos/ai-client-html/blob/06738c091041e959f7ddc4674acdb1f1b18474c3/client/html/src/Client/Html/Locale/Select/Standard.php#L320-L374<CODESPLIT>Standard.addData<CODESPLIT>Sets the necessary parameter values in the view .<CODESPLIT>public function addData ( \ Aimeos \ MW \ View \ Iface $ view , array & $ tags = [ ] , & $ expire = null ) { $ map = [ ] ; $ context = $ this -> getContext ( ) ; $ config = $ context -> getConfig ( ) ; $ locale = $ context -> getLocale ( ) ; /** client/html/locale/select/language/param-name 		 * Name of the parameter that contains the language ID value 		 * 		 * Frameworks and applications normally use its own predefined parameter 		 * that contains the current language ID if they are multi-language 		 * capable. To adapt the Aimeos parameter name to the already used name, 		 * you are able to configure it by using this setting. 		 * 		 * @param string Parameter name for language ID 		 * @since 2015.06 		 * @see client/html/locale/select/currency/param-name 		 */ $ langname = $ config -> get ( 'client/html/locale/select/language/param-name' , 'locale' ) ; /** client/html/locale/select/currency/param-name 		 * Name of the parameter that contains the currency ID value 		 * 		 * Frameworks and applications normally use its own predefined parameter 		 * that contains the current currency ID if they already support multiple 		 * currencies. To adapt the Aimeos parameter name to the already used name, 		 * you are able to configure it by using this setting. 		 * 		 * @param string Parameter name for currency ID 		 * @since 2015.06 		 * @see client/html/locale/select/language/param-name 		 */ $ curname = $ config -> get ( 'client/html/locale/select/currency/param-name' , 'currency' ) ; $ items = \ Aimeos \ Controller \ Frontend :: create ( $ context , 'locale' ) -> sort ( 'position' ) -> slice ( 0 , 10000 ) -> search ( ) ; foreach ( $ items as $ item ) { $ curId = $ item -> getCurrencyId ( ) ; $ langId = $ item -> getLanguageId ( ) ; $ map [ $ langId ] [ $ curId ] = [ $ langname => $ langId , $ curname => $ curId ] ; } $ params = $ view -> param ( ) ; $ view -> selectMap = $ map ; $ view -> selectParams = $ params ; $ view -> selectLanguageId = $ locale -> getLanguageId ( ) ; $ view -> selectCurrencyId = $ locale -> getCurrencyId ( ) ; return parent :: addData ( $ view , $ tags , $ expire ) ; }

0<CODESPLIT>https://github.com/checkout/checkout-php-library/blob/bf40fa4dd9d68623928de5ce7e00638f705905ff/com/checkout/packages/CheckoutApi/Client/ClientGW3.php#L1009-L1032<CODESPLIT>CheckoutApi_Client_ClientGW3.createCard<CODESPLIT>Update a card<CODESPLIT>public function createCard ( $ param ) { $ this -> flushState ( ) ; $ uri = $ this -> getUriCustomer ( ) ; $ hasError = false ; $ postedParam = $ param [ 'postedParam' ] ; $ isCustomerIdValid = CheckoutApi_Client_Validation_GW3 :: isCustomerIdValid ( $ param ) ; $ isCardValid = CheckoutApi_Client_Validation_GW3 :: isCardValid ( $ postedParam ) ; if ( ! $ isCustomerIdValid ) { $ hasError = true ; $ this -> throwException ( 'Please provide a valid customer id' , array ( 'param' => $ param ) ) ; } else { $ uri = "$uri/{$param['customerId']}/cards" ; } if ( ! $ isCardValid ) { $ hasError = true ; $ this -> throwException ( 'Please provide a valid card object' , array ( 'param' => $ param ) ) ; } return $ this -> request ( $ uri , $ param , ! $ hasError ) ; }

0<CODESPLIT>https://github.com/yiisoft/yii/blob/af3cbce71db83c4476c8a4289517b2984c740f31/framework/base/CErrorHandler.php#L228-L300<CODESPLIT>CErrorHandler.handleException<CODESPLIT>Handles the PHP error .<CODESPLIT>protected function handleException ( $ exception ) { $ app = Yii :: app ( ) ; if ( $ app instanceof CWebApplication ) { if ( ( $ trace = $ this -> getExactTrace ( $ exception ) ) === null ) { $ fileName = $ exception -> getFile ( ) ; $ errorLine = $ exception -> getLine ( ) ; } else { $ fileName = $ trace [ 'file' ] ; $ errorLine = $ trace [ 'line' ] ; } $ trace = $ exception -> getTrace ( ) ; foreach ( $ trace as $ i => $ t ) { if ( ! isset ( $ t [ 'file' ] ) ) $ trace [ $ i ] [ 'file' ] = 'unknown' ; if ( ! isset ( $ t [ 'line' ] ) ) $ trace [ $ i ] [ 'line' ] = 0 ; if ( ! isset ( $ t [ 'function' ] ) ) $ trace [ $ i ] [ 'function' ] = 'unknown' ; unset ( $ trace [ $ i ] [ 'object' ] ) ; } $ this -> _exception = $ exception ; $ this -> _error = $ data = array ( 'code' => ( $ exception instanceof CHttpException ) ? $ exception -> statusCode : 500 , 'type' => get_class ( $ exception ) , 'errorCode' => $ exception -> getCode ( ) , 'message' => $ exception -> getMessage ( ) , 'file' => $ fileName , 'line' => $ errorLine , 'trace' => $ exception -> getTraceAsString ( ) , 'traces' => $ trace , ) ; if ( ! headers_sent ( ) ) { $ httpVersion = Yii :: app ( ) -> request -> getHttpVersion ( ) ; header ( "HTTP/$httpVersion {$data['code']} " . $ this -> getHttpHeader ( $ data [ 'code' ] , get_class ( $ exception ) ) ) ; } $ this -> renderException ( ) ; } else $ app -> displayException ( $ exception ) ; }

0<CODESPLIT>https://github.com/Talesoft/tale-http/blob/66462af79c13b0e5320e70b97e4d0a33a4bba9c9/src/Http/UploadedFile.php#L60-L94<CODESPLIT>ClassifiedExpiredListener.onClassifiedExpired<CODESPLIT>{<CODESPLIT>public function onClassifiedExpired ( ClassifiedExpiredEvent $ e ) { $ email = $ e -> getParam ( 'to' ) ; $ fullname = $ e -> getParam ( 'fullname' ) ; $ siteUrl = $ e -> getParam ( 'siteurl' ) ; $ title = $ e -> getParam ( 'title' ) ; $ hash = $ e -> getParam ( 'hash' ) ; $ content = $ e -> getParam ( 'content' ) ; $ hits = $ e -> getParam ( 'hits' ) ; $ activationUri = sprintf ( $ this -> getModuleOptions ( ) -> getClassifiedActivationUri ( ) , $ hash ) ; // something got really wrong if we get here... if ( empty ( $ email ) || empty ( $ fullname ) || empty ( $ title ) ) { return ; } $ transport = $ this -> getServiceLocator ( ) -> get ( 'mailer.mail.transport.smtp' ) ; $ message = $ this -> getServiceLocator ( ) -> get ( 'mailer.mail.message.classifiedexpired' ) ; $ message -> configure ( array ( 'to' => $ email , 'siteurl' => $ siteUrl , 'loginurl' => $ siteUrl . $ this -> getModuleOptions ( ) -> getLoginUri ( ) , 'fullname' => $ fullname , 'title' => $ title , 'cdnurl' => $ this -> getModuleOptions ( ) -> getCdnUrl ( ) , 'updateurl' => $ siteUrl . $ activationUri , 'siteName' => $ this -> getModuleOptions ( ) -> getSiteName ( ) , 'content' => $ content , 'hits' => $ hits , ) ) ; $ transport -> send ( $ message ) ; return $ this ; }

1<CODESPLIT>https://github.com/rosell-dk/webp-convert/blob/d54b23dbce745cae7955ee1c7ba912731f679ee1/src/WebPConvert.php#L38-L43<CODESPLIT>WebPConvert.convert<CODESPLIT>Convert jpeg or png into webp<CODESPLIT>public static function convert ( $ source , $ destination , $ options = [ ] , $ logger = null ) { //return ConverterHelper::runConverterStack($source, $destination, $options, $logger); //return Convert::runConverterStack($source, $destination, $options, $logger); Stack :: convert ( $ source , $ destination , $ options , $ logger ) ; }

0<CODESPLIT>https://github.com/tanmotop/laravel-admin/blob/4f5bf11ce4a1e4d75134ff57ce1ccbea756fde53/database/2018_04_09_014502_create_admin_tables.php#L89-L100<CODESPLIT>Http.setOptions<CODESPLIT>Reverse the migrations .<CODESPLIT>static public function setOptions ( $ options = [ ] ) { if ( isset ( $ options [ 'gzip' ] ) ) { self :: $ optGzip = ! empty ( $ options [ 'gzip' ] ) ; } if ( isset ( $ options [ 'minimal' ] ) ) { self :: $ optMinimal = ! empty ( $ options [ 'minimal' ] ) ; } }

0<CODESPLIT>https://github.com/FrenchFrogs/framework/blob/a4838c698a5600437e87dac6d35ba8ebe32c4395/src/Ruler/Ruler/Permission.php#L71-L79<CODESPLIT>PipelineFactory.buildAction<CODESPLIT>Remove permission from ermission container<CODESPLIT>public function buildAction ( $ pipeline , $ actionName , $ actionConfiguration = [ ] ) { $ triggeredByEvents = is_array ( $ actionConfiguration ) && array_key_exists ( "triggered_by_events" , $ actionConfiguration ) ? $ actionConfiguration [ "triggered_by_events" ] : [ ] ; if ( empty ( $ triggeredByEvents ) ) { // default behavior : auto-wiring action to the same event name $ triggeredByEvents = [ $ actionName ] ; } // create the action and the action creator $ action = new Action ( $ actionName ) ; $ actionCreator = new ActionCreator ( $ action ) ; foreach ( $ triggeredByEvents as $ triggeredByEvent ) { $ event = $ pipeline -> hasIncomingEvent ( $ triggeredByEvent ) ? $ pipeline -> getIncomingEvent ( $ triggeredByEvent ) : new Event ( $ triggeredByEvent ) ; $ actionCreator -> addTriggeredByEvent ( $ event ) ; $ pipeline -> addIncomingEvent ( $ event ) ; } $ pipeline -> addAction ( $ action ) ; $ pipeline -> addActionCreator ( $ actionCreator ) ; }

0<CODESPLIT>https://github.com/Erebot/Plop/blob/419a1cd6d8a6ed24ebcc65d8c7ebcec5f5baaa8b/src/Handler/TimedRotatingFile.php#L204-L218<CODESPLIT>TimedRotatingFile.getFilesToDelete<CODESPLIT>Determine when the next log rotation should take place .<CODESPLIT>protected function getFilesToDelete ( ) { $ dirName = dirname ( $ this -> baseFilename ) ; $ baseName = basename ( $ this -> baseFilename ) ; $ fileNames = scandir ( $ dirName ) ; $ result = array ( ) ; $ prefix = $ baseName . '.' ; $ plen = strlen ( $ prefix ) ; foreach ( $ fileNames as $ fileName ) { if ( $ fileName == '.' || $ fileName == '..' ) { continue ; } if ( ! strncmp ( $ fileName , $ prefix , $ plen ) ) { $ suffix = substr ( $ fileName , $ plen ) ; if ( preg_match ( $ this -> extMatch , $ suffix ) ) { $ result [ ] = $ dirName . DIRECTORY_SEPARATOR . $ fileName ; } } } sort ( $ result ) ; $ rlen = count ( $ result ) ; if ( $ rlen < $ this -> backupCount ) { $ result = array ( ) ; } else { $ result = array_slice ( $ result , 0 , $ rlen - $ this -> backupCount ) ; } return $ result ; }

1<CODESPLIT>https://github.com/laravel/cashier/blob/822b6535e755fd36dec8ecceb52cc8909c8a953e/src/Billable.php#L221-L234<CODESPLIT>Billable.invoice<CODESPLIT>Invoice the billable entity outside of regular billing cycle .<CODESPLIT>public function invoice ( array $ options = [ ] ) { if ( $ this -> stripe_id ) { $ parameters = array_merge ( $ options , [ 'customer' => $ this -> stripe_id ] ) ; try { return StripeInvoice :: create ( $ parameters , $ this -> getStripeKey ( ) ) -> pay ( ) ; } catch ( StripeErrorInvalidRequest $ e ) { return false ; } } return true ; }

1<CODESPLIT>https://github.com/nicolasdewez/webhome-common/blob/a9f6f83fa929ebd0510818c388cfb1ed44b87205/EventListener/ApiGetConnectedUserListener.php#L133-L142<CODESPLIT>ApiGetConnectedUserListener.inPaths<CODESPLIT>@param string $pathInfo @param array $paths<CODESPLIT>private function inPaths ( $ pathInfo , array $ paths ) { foreach ( $ paths as $ path ) { if ( preg_match ( '#' . $ path . '#' , $ pathInfo ) ) { return true ; } } return false ; }

1<CODESPLIT>https://github.com/donquixote/cellbrush/blob/09c70b421828624756e56591de41d5e86030f50e/src/TSection/TableSection.php#L205-L208<CODESPLIT>TableSection.td<CODESPLIT>@param string $rowName Row name group or range . @param string $colName Column name group or range . @param string $content HTML cell content .<CODESPLIT>function td ( $ rowName , $ colName , $ content ) { $ this -> cellContents [ $ rowName ] [ $ colName ] = $ content ; return $ this ; }

0<CODESPLIT>https://github.com/Fanamurov/larrock-core/blob/bce1d297182a829453f411d29371ec2a78d62960/src/Traits/AdminMethodsDestroy.php#L25-L44<CODESPLIT>ShareMethods.shareMethods<CODESPLIT>Remove the specified resource from storage .<CODESPLIT>public function shareMethods ( ) { $ allowed = [ ] ; if ( method_exists ( $ this , 'create' ) ) { \ View :: share ( 'allowCreate' , true ) ; $ allowed [ ] = 'allowCreate' ; } if ( method_exists ( $ this , 'index' ) ) { \ View :: share ( 'allowIndex' , true ) ; $ allowed [ ] = 'allowIndex' ; } if ( method_exists ( $ this , 'store' ) ) { \ View :: share ( 'allowStore' , true ) ; $ allowed [ ] = 'allowStore' ; } if ( method_exists ( $ this , 'destroy' ) ) { \ View :: share ( 'allowDestroy' , true ) ; $ allowed [ ] = 'allowDestroy' ; } if ( method_exists ( $ this , 'edit' ) ) { \ View :: share ( 'allowEdit' , true ) ; $ allowed [ ] = 'allowEdit' ; } if ( method_exists ( $ this , 'update' ) ) { \ View :: share ( 'allowUpdate' , true ) ; $ allowed [ ] = 'allowUpdate' ; } if ( method_exists ( $ this , 'show' ) ) { \ View :: share ( 'allowShow' , true ) ; $ allowed [ ] = 'allowShow' ; } return $ allowed ; }

0<CODESPLIT>https://github.com/lwl1989/agileSwoole/blob/0eee483acc9d4f4da8e93f24dd51b3196cdf678e/src/Kernel/Core/Cache/Type/SortSet.php#L163-L167<CODESPLIT>SortSet.getRank<CODESPLIT>从值获取元素<CODESPLIT>public function getRank ( string $ member , $ order = 'desc' ) { $ method = $ order === 'desc' ? 'zrevrank' : 'zrank' ; $ response = $ this -> _redis -> $ method ( $ this -> _key , $ member ) ; return $ response !== null ? $ response + 1 : null ; }

0<CODESPLIT>https://github.com/o2system/gear/blob/86eabc8008c325d11d401ce8e935cfea33181042/src/Debugger.php#L93-L104<CODESPLIT>Debugger.render<CODESPLIT>Debugger :: line<CODESPLIT>public static function render ( ) { $ trace = static :: $ chronology ; ob_start ( ) ; include __DIR__ . '/Views/Debugger.php' ; $ output = ob_get_contents ( ) ; ob_end_clean ( ) ; static :: $ chronology = [ ] ; echo $ output ; }

1<CODESPLIT>https://github.com/songshenzong/log/blob/b1e01f7994da47737866eabf82367490eab17c46/src/DataCollector/EventCollector.php#L102-L113<CODESPLIT>EventCollector.prepareParams<CODESPLIT>@param $params<CODESPLIT>protected function prepareParams ( $ params ) { $ data = [ ] ; foreach ( $ params as $ key => $ value ) { if ( is_object ( $ value ) && Str :: is ( 'Illuminate\*\Events\*' , get_class ( $ value ) ) ) { $ value = $ this -> prepareParams ( get_object_vars ( $ value ) ) ; } $ data [ $ key ] = htmlentities ( $ this -> exporter -> exportValue ( $ value ) , ENT_QUOTES , 'UTF-8' , false ) ; } return $ data ; }

1<CODESPLIT>https://github.com/ventoviro/windwalker-core/blob/0ed53059fc2d5d2d9b72f0e4aeef2fdf6aac0074/src/Debugger/Html/BootstrapKeyValueGrid.php#L60-L67<CODESPLIT>BootstrapKeyValueGrid.addTitle<CODESPLIT>addTitle<CODESPLIT>public function addTitle ( $ name , $ attribs = [ ] ) { if ( ! isset ( $ attribs [ static :: ROW ] [ 'class' ] ) ) { $ attribs [ static :: ROW ] [ 'class' ] = 'active' ; } return parent :: addTitle ( $ name , $ attribs ) ; }

1<CODESPLIT>https://github.com/phpgears/event/blob/9b25301837748a67b3b48cc46ad837c859c4522d/src/AbstractEventHandler.php#L45-L58<CODESPLIT>AbstractEventHandler.isEventSupported<CODESPLIT>Is event supported .<CODESPLIT>private function isEventSupported ( Event $ event ) : bool { $ supported = false ; foreach ( $ this -> getSupportedEventTypes ( ) as $ supportedEventType ) { if ( \ is_a ( $ event , $ supportedEventType ) ) { $ supported = true ; break ; } } return $ supported ; }

